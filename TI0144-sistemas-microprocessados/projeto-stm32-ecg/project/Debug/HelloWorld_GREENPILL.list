
HelloWorld_GREENPILL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003330  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080033f0  080033f0  000133f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003460  08003460  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003460  08003460  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003460  08003460  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003460  08003460  00013460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003464  08003464  00013464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000070  080034d8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  080034d8  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000042cf  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000119d  00000000  00000000  00024367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004a8  00000000  00000000  00025508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000400  00000000  00000000  000259b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f572  00000000  00000000  00025db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005f35  00000000  00000000  00035322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005b712  00000000  00000000  0003b257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00096969  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012b8  00000000  00000000  000969bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080033d8 	.word	0x080033d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080033d8 	.word	0x080033d8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f001 f9e1 	bl	80015f0 <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f001 f94b 	bl	80014d0 <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f000 fdb2 	bl	8000dac <__aeabi_dsub>
 8000248:	f001 f942 	bl	80014d0 <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	; 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_dadd>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	464f      	mov	r7, r9
 8000260:	4646      	mov	r6, r8
 8000262:	46d6      	mov	lr, sl
 8000264:	000d      	movs	r5, r1
 8000266:	0004      	movs	r4, r0
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	001f      	movs	r7, r3
 800026c:	0011      	movs	r1, r2
 800026e:	0328      	lsls	r0, r5, #12
 8000270:	0f62      	lsrs	r2, r4, #29
 8000272:	0a40      	lsrs	r0, r0, #9
 8000274:	4310      	orrs	r0, r2
 8000276:	007a      	lsls	r2, r7, #1
 8000278:	0d52      	lsrs	r2, r2, #21
 800027a:	00e3      	lsls	r3, r4, #3
 800027c:	033c      	lsls	r4, r7, #12
 800027e:	4691      	mov	r9, r2
 8000280:	0a64      	lsrs	r4, r4, #9
 8000282:	0ffa      	lsrs	r2, r7, #31
 8000284:	0f4f      	lsrs	r7, r1, #29
 8000286:	006e      	lsls	r6, r5, #1
 8000288:	4327      	orrs	r7, r4
 800028a:	4692      	mov	sl, r2
 800028c:	46b8      	mov	r8, r7
 800028e:	0d76      	lsrs	r6, r6, #21
 8000290:	0fed      	lsrs	r5, r5, #31
 8000292:	00c9      	lsls	r1, r1, #3
 8000294:	4295      	cmp	r5, r2
 8000296:	d100      	bne.n	800029a <__aeabi_dadd+0x3e>
 8000298:	e099      	b.n	80003ce <__aeabi_dadd+0x172>
 800029a:	464c      	mov	r4, r9
 800029c:	1b34      	subs	r4, r6, r4
 800029e:	46a4      	mov	ip, r4
 80002a0:	2c00      	cmp	r4, #0
 80002a2:	dc00      	bgt.n	80002a6 <__aeabi_dadd+0x4a>
 80002a4:	e07c      	b.n	80003a0 <__aeabi_dadd+0x144>
 80002a6:	464a      	mov	r2, r9
 80002a8:	2a00      	cmp	r2, #0
 80002aa:	d100      	bne.n	80002ae <__aeabi_dadd+0x52>
 80002ac:	e0b8      	b.n	8000420 <__aeabi_dadd+0x1c4>
 80002ae:	4ac5      	ldr	r2, [pc, #788]	; (80005c4 <__aeabi_dadd+0x368>)
 80002b0:	4296      	cmp	r6, r2
 80002b2:	d100      	bne.n	80002b6 <__aeabi_dadd+0x5a>
 80002b4:	e11c      	b.n	80004f0 <__aeabi_dadd+0x294>
 80002b6:	2280      	movs	r2, #128	; 0x80
 80002b8:	003c      	movs	r4, r7
 80002ba:	0412      	lsls	r2, r2, #16
 80002bc:	4314      	orrs	r4, r2
 80002be:	46a0      	mov	r8, r4
 80002c0:	4662      	mov	r2, ip
 80002c2:	2a38      	cmp	r2, #56	; 0x38
 80002c4:	dd00      	ble.n	80002c8 <__aeabi_dadd+0x6c>
 80002c6:	e161      	b.n	800058c <__aeabi_dadd+0x330>
 80002c8:	2a1f      	cmp	r2, #31
 80002ca:	dd00      	ble.n	80002ce <__aeabi_dadd+0x72>
 80002cc:	e1cc      	b.n	8000668 <__aeabi_dadd+0x40c>
 80002ce:	4664      	mov	r4, ip
 80002d0:	2220      	movs	r2, #32
 80002d2:	1b12      	subs	r2, r2, r4
 80002d4:	4644      	mov	r4, r8
 80002d6:	4094      	lsls	r4, r2
 80002d8:	000f      	movs	r7, r1
 80002da:	46a1      	mov	r9, r4
 80002dc:	4664      	mov	r4, ip
 80002de:	4091      	lsls	r1, r2
 80002e0:	40e7      	lsrs	r7, r4
 80002e2:	464c      	mov	r4, r9
 80002e4:	1e4a      	subs	r2, r1, #1
 80002e6:	4191      	sbcs	r1, r2
 80002e8:	433c      	orrs	r4, r7
 80002ea:	4642      	mov	r2, r8
 80002ec:	4321      	orrs	r1, r4
 80002ee:	4664      	mov	r4, ip
 80002f0:	40e2      	lsrs	r2, r4
 80002f2:	1a80      	subs	r0, r0, r2
 80002f4:	1a5c      	subs	r4, r3, r1
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	419b      	sbcs	r3, r3
 80002fa:	425f      	negs	r7, r3
 80002fc:	1bc7      	subs	r7, r0, r7
 80002fe:	023b      	lsls	r3, r7, #8
 8000300:	d400      	bmi.n	8000304 <__aeabi_dadd+0xa8>
 8000302:	e0d0      	b.n	80004a6 <__aeabi_dadd+0x24a>
 8000304:	027f      	lsls	r7, r7, #9
 8000306:	0a7f      	lsrs	r7, r7, #9
 8000308:	2f00      	cmp	r7, #0
 800030a:	d100      	bne.n	800030e <__aeabi_dadd+0xb2>
 800030c:	e0ff      	b.n	800050e <__aeabi_dadd+0x2b2>
 800030e:	0038      	movs	r0, r7
 8000310:	f001 f978 	bl	8001604 <__clzsi2>
 8000314:	0001      	movs	r1, r0
 8000316:	3908      	subs	r1, #8
 8000318:	2320      	movs	r3, #32
 800031a:	0022      	movs	r2, r4
 800031c:	1a5b      	subs	r3, r3, r1
 800031e:	408f      	lsls	r7, r1
 8000320:	40da      	lsrs	r2, r3
 8000322:	408c      	lsls	r4, r1
 8000324:	4317      	orrs	r7, r2
 8000326:	42b1      	cmp	r1, r6
 8000328:	da00      	bge.n	800032c <__aeabi_dadd+0xd0>
 800032a:	e0ff      	b.n	800052c <__aeabi_dadd+0x2d0>
 800032c:	1b89      	subs	r1, r1, r6
 800032e:	1c4b      	adds	r3, r1, #1
 8000330:	2b1f      	cmp	r3, #31
 8000332:	dd00      	ble.n	8000336 <__aeabi_dadd+0xda>
 8000334:	e0a8      	b.n	8000488 <__aeabi_dadd+0x22c>
 8000336:	2220      	movs	r2, #32
 8000338:	0039      	movs	r1, r7
 800033a:	1ad2      	subs	r2, r2, r3
 800033c:	0020      	movs	r0, r4
 800033e:	4094      	lsls	r4, r2
 8000340:	4091      	lsls	r1, r2
 8000342:	40d8      	lsrs	r0, r3
 8000344:	1e62      	subs	r2, r4, #1
 8000346:	4194      	sbcs	r4, r2
 8000348:	40df      	lsrs	r7, r3
 800034a:	2600      	movs	r6, #0
 800034c:	4301      	orrs	r1, r0
 800034e:	430c      	orrs	r4, r1
 8000350:	0763      	lsls	r3, r4, #29
 8000352:	d009      	beq.n	8000368 <__aeabi_dadd+0x10c>
 8000354:	230f      	movs	r3, #15
 8000356:	4023      	ands	r3, r4
 8000358:	2b04      	cmp	r3, #4
 800035a:	d005      	beq.n	8000368 <__aeabi_dadd+0x10c>
 800035c:	1d23      	adds	r3, r4, #4
 800035e:	42a3      	cmp	r3, r4
 8000360:	41a4      	sbcs	r4, r4
 8000362:	4264      	negs	r4, r4
 8000364:	193f      	adds	r7, r7, r4
 8000366:	001c      	movs	r4, r3
 8000368:	023b      	lsls	r3, r7, #8
 800036a:	d400      	bmi.n	800036e <__aeabi_dadd+0x112>
 800036c:	e09e      	b.n	80004ac <__aeabi_dadd+0x250>
 800036e:	4b95      	ldr	r3, [pc, #596]	; (80005c4 <__aeabi_dadd+0x368>)
 8000370:	3601      	adds	r6, #1
 8000372:	429e      	cmp	r6, r3
 8000374:	d100      	bne.n	8000378 <__aeabi_dadd+0x11c>
 8000376:	e0b7      	b.n	80004e8 <__aeabi_dadd+0x28c>
 8000378:	4a93      	ldr	r2, [pc, #588]	; (80005c8 <__aeabi_dadd+0x36c>)
 800037a:	08e4      	lsrs	r4, r4, #3
 800037c:	4017      	ands	r7, r2
 800037e:	077b      	lsls	r3, r7, #29
 8000380:	0571      	lsls	r1, r6, #21
 8000382:	027f      	lsls	r7, r7, #9
 8000384:	4323      	orrs	r3, r4
 8000386:	0b3f      	lsrs	r7, r7, #12
 8000388:	0d4a      	lsrs	r2, r1, #21
 800038a:	0512      	lsls	r2, r2, #20
 800038c:	433a      	orrs	r2, r7
 800038e:	07ed      	lsls	r5, r5, #31
 8000390:	432a      	orrs	r2, r5
 8000392:	0018      	movs	r0, r3
 8000394:	0011      	movs	r1, r2
 8000396:	bce0      	pop	{r5, r6, r7}
 8000398:	46ba      	mov	sl, r7
 800039a:	46b1      	mov	r9, r6
 800039c:	46a8      	mov	r8, r5
 800039e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003a0:	2c00      	cmp	r4, #0
 80003a2:	d04b      	beq.n	800043c <__aeabi_dadd+0x1e0>
 80003a4:	464c      	mov	r4, r9
 80003a6:	1ba4      	subs	r4, r4, r6
 80003a8:	46a4      	mov	ip, r4
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d000      	beq.n	80003b0 <__aeabi_dadd+0x154>
 80003ae:	e123      	b.n	80005f8 <__aeabi_dadd+0x39c>
 80003b0:	0004      	movs	r4, r0
 80003b2:	431c      	orrs	r4, r3
 80003b4:	d100      	bne.n	80003b8 <__aeabi_dadd+0x15c>
 80003b6:	e1af      	b.n	8000718 <__aeabi_dadd+0x4bc>
 80003b8:	4662      	mov	r2, ip
 80003ba:	1e54      	subs	r4, r2, #1
 80003bc:	2a01      	cmp	r2, #1
 80003be:	d100      	bne.n	80003c2 <__aeabi_dadd+0x166>
 80003c0:	e215      	b.n	80007ee <__aeabi_dadd+0x592>
 80003c2:	4d80      	ldr	r5, [pc, #512]	; (80005c4 <__aeabi_dadd+0x368>)
 80003c4:	45ac      	cmp	ip, r5
 80003c6:	d100      	bne.n	80003ca <__aeabi_dadd+0x16e>
 80003c8:	e1c8      	b.n	800075c <__aeabi_dadd+0x500>
 80003ca:	46a4      	mov	ip, r4
 80003cc:	e11b      	b.n	8000606 <__aeabi_dadd+0x3aa>
 80003ce:	464a      	mov	r2, r9
 80003d0:	1ab2      	subs	r2, r6, r2
 80003d2:	4694      	mov	ip, r2
 80003d4:	2a00      	cmp	r2, #0
 80003d6:	dc00      	bgt.n	80003da <__aeabi_dadd+0x17e>
 80003d8:	e0ac      	b.n	8000534 <__aeabi_dadd+0x2d8>
 80003da:	464a      	mov	r2, r9
 80003dc:	2a00      	cmp	r2, #0
 80003de:	d043      	beq.n	8000468 <__aeabi_dadd+0x20c>
 80003e0:	4a78      	ldr	r2, [pc, #480]	; (80005c4 <__aeabi_dadd+0x368>)
 80003e2:	4296      	cmp	r6, r2
 80003e4:	d100      	bne.n	80003e8 <__aeabi_dadd+0x18c>
 80003e6:	e1af      	b.n	8000748 <__aeabi_dadd+0x4ec>
 80003e8:	2280      	movs	r2, #128	; 0x80
 80003ea:	003c      	movs	r4, r7
 80003ec:	0412      	lsls	r2, r2, #16
 80003ee:	4314      	orrs	r4, r2
 80003f0:	46a0      	mov	r8, r4
 80003f2:	4662      	mov	r2, ip
 80003f4:	2a38      	cmp	r2, #56	; 0x38
 80003f6:	dc67      	bgt.n	80004c8 <__aeabi_dadd+0x26c>
 80003f8:	2a1f      	cmp	r2, #31
 80003fa:	dc00      	bgt.n	80003fe <__aeabi_dadd+0x1a2>
 80003fc:	e15f      	b.n	80006be <__aeabi_dadd+0x462>
 80003fe:	4647      	mov	r7, r8
 8000400:	3a20      	subs	r2, #32
 8000402:	40d7      	lsrs	r7, r2
 8000404:	4662      	mov	r2, ip
 8000406:	2a20      	cmp	r2, #32
 8000408:	d005      	beq.n	8000416 <__aeabi_dadd+0x1ba>
 800040a:	4664      	mov	r4, ip
 800040c:	2240      	movs	r2, #64	; 0x40
 800040e:	1b12      	subs	r2, r2, r4
 8000410:	4644      	mov	r4, r8
 8000412:	4094      	lsls	r4, r2
 8000414:	4321      	orrs	r1, r4
 8000416:	1e4a      	subs	r2, r1, #1
 8000418:	4191      	sbcs	r1, r2
 800041a:	000c      	movs	r4, r1
 800041c:	433c      	orrs	r4, r7
 800041e:	e057      	b.n	80004d0 <__aeabi_dadd+0x274>
 8000420:	003a      	movs	r2, r7
 8000422:	430a      	orrs	r2, r1
 8000424:	d100      	bne.n	8000428 <__aeabi_dadd+0x1cc>
 8000426:	e105      	b.n	8000634 <__aeabi_dadd+0x3d8>
 8000428:	0022      	movs	r2, r4
 800042a:	3a01      	subs	r2, #1
 800042c:	2c01      	cmp	r4, #1
 800042e:	d100      	bne.n	8000432 <__aeabi_dadd+0x1d6>
 8000430:	e182      	b.n	8000738 <__aeabi_dadd+0x4dc>
 8000432:	4c64      	ldr	r4, [pc, #400]	; (80005c4 <__aeabi_dadd+0x368>)
 8000434:	45a4      	cmp	ip, r4
 8000436:	d05b      	beq.n	80004f0 <__aeabi_dadd+0x294>
 8000438:	4694      	mov	ip, r2
 800043a:	e741      	b.n	80002c0 <__aeabi_dadd+0x64>
 800043c:	4c63      	ldr	r4, [pc, #396]	; (80005cc <__aeabi_dadd+0x370>)
 800043e:	1c77      	adds	r7, r6, #1
 8000440:	4227      	tst	r7, r4
 8000442:	d000      	beq.n	8000446 <__aeabi_dadd+0x1ea>
 8000444:	e0c4      	b.n	80005d0 <__aeabi_dadd+0x374>
 8000446:	0004      	movs	r4, r0
 8000448:	431c      	orrs	r4, r3
 800044a:	2e00      	cmp	r6, #0
 800044c:	d000      	beq.n	8000450 <__aeabi_dadd+0x1f4>
 800044e:	e169      	b.n	8000724 <__aeabi_dadd+0x4c8>
 8000450:	2c00      	cmp	r4, #0
 8000452:	d100      	bne.n	8000456 <__aeabi_dadd+0x1fa>
 8000454:	e1bf      	b.n	80007d6 <__aeabi_dadd+0x57a>
 8000456:	4644      	mov	r4, r8
 8000458:	430c      	orrs	r4, r1
 800045a:	d000      	beq.n	800045e <__aeabi_dadd+0x202>
 800045c:	e1d0      	b.n	8000800 <__aeabi_dadd+0x5a4>
 800045e:	0742      	lsls	r2, r0, #29
 8000460:	08db      	lsrs	r3, r3, #3
 8000462:	4313      	orrs	r3, r2
 8000464:	08c0      	lsrs	r0, r0, #3
 8000466:	e029      	b.n	80004bc <__aeabi_dadd+0x260>
 8000468:	003a      	movs	r2, r7
 800046a:	430a      	orrs	r2, r1
 800046c:	d100      	bne.n	8000470 <__aeabi_dadd+0x214>
 800046e:	e170      	b.n	8000752 <__aeabi_dadd+0x4f6>
 8000470:	4662      	mov	r2, ip
 8000472:	4664      	mov	r4, ip
 8000474:	3a01      	subs	r2, #1
 8000476:	2c01      	cmp	r4, #1
 8000478:	d100      	bne.n	800047c <__aeabi_dadd+0x220>
 800047a:	e0e0      	b.n	800063e <__aeabi_dadd+0x3e2>
 800047c:	4c51      	ldr	r4, [pc, #324]	; (80005c4 <__aeabi_dadd+0x368>)
 800047e:	45a4      	cmp	ip, r4
 8000480:	d100      	bne.n	8000484 <__aeabi_dadd+0x228>
 8000482:	e161      	b.n	8000748 <__aeabi_dadd+0x4ec>
 8000484:	4694      	mov	ip, r2
 8000486:	e7b4      	b.n	80003f2 <__aeabi_dadd+0x196>
 8000488:	003a      	movs	r2, r7
 800048a:	391f      	subs	r1, #31
 800048c:	40ca      	lsrs	r2, r1
 800048e:	0011      	movs	r1, r2
 8000490:	2b20      	cmp	r3, #32
 8000492:	d003      	beq.n	800049c <__aeabi_dadd+0x240>
 8000494:	2240      	movs	r2, #64	; 0x40
 8000496:	1ad3      	subs	r3, r2, r3
 8000498:	409f      	lsls	r7, r3
 800049a:	433c      	orrs	r4, r7
 800049c:	1e63      	subs	r3, r4, #1
 800049e:	419c      	sbcs	r4, r3
 80004a0:	2700      	movs	r7, #0
 80004a2:	2600      	movs	r6, #0
 80004a4:	430c      	orrs	r4, r1
 80004a6:	0763      	lsls	r3, r4, #29
 80004a8:	d000      	beq.n	80004ac <__aeabi_dadd+0x250>
 80004aa:	e753      	b.n	8000354 <__aeabi_dadd+0xf8>
 80004ac:	46b4      	mov	ip, r6
 80004ae:	08e4      	lsrs	r4, r4, #3
 80004b0:	077b      	lsls	r3, r7, #29
 80004b2:	4323      	orrs	r3, r4
 80004b4:	08f8      	lsrs	r0, r7, #3
 80004b6:	4a43      	ldr	r2, [pc, #268]	; (80005c4 <__aeabi_dadd+0x368>)
 80004b8:	4594      	cmp	ip, r2
 80004ba:	d01d      	beq.n	80004f8 <__aeabi_dadd+0x29c>
 80004bc:	4662      	mov	r2, ip
 80004be:	0307      	lsls	r7, r0, #12
 80004c0:	0552      	lsls	r2, r2, #21
 80004c2:	0b3f      	lsrs	r7, r7, #12
 80004c4:	0d52      	lsrs	r2, r2, #21
 80004c6:	e760      	b.n	800038a <__aeabi_dadd+0x12e>
 80004c8:	4644      	mov	r4, r8
 80004ca:	430c      	orrs	r4, r1
 80004cc:	1e62      	subs	r2, r4, #1
 80004ce:	4194      	sbcs	r4, r2
 80004d0:	18e4      	adds	r4, r4, r3
 80004d2:	429c      	cmp	r4, r3
 80004d4:	419b      	sbcs	r3, r3
 80004d6:	425f      	negs	r7, r3
 80004d8:	183f      	adds	r7, r7, r0
 80004da:	023b      	lsls	r3, r7, #8
 80004dc:	d5e3      	bpl.n	80004a6 <__aeabi_dadd+0x24a>
 80004de:	4b39      	ldr	r3, [pc, #228]	; (80005c4 <__aeabi_dadd+0x368>)
 80004e0:	3601      	adds	r6, #1
 80004e2:	429e      	cmp	r6, r3
 80004e4:	d000      	beq.n	80004e8 <__aeabi_dadd+0x28c>
 80004e6:	e0b5      	b.n	8000654 <__aeabi_dadd+0x3f8>
 80004e8:	0032      	movs	r2, r6
 80004ea:	2700      	movs	r7, #0
 80004ec:	2300      	movs	r3, #0
 80004ee:	e74c      	b.n	800038a <__aeabi_dadd+0x12e>
 80004f0:	0742      	lsls	r2, r0, #29
 80004f2:	08db      	lsrs	r3, r3, #3
 80004f4:	4313      	orrs	r3, r2
 80004f6:	08c0      	lsrs	r0, r0, #3
 80004f8:	001a      	movs	r2, r3
 80004fa:	4302      	orrs	r2, r0
 80004fc:	d100      	bne.n	8000500 <__aeabi_dadd+0x2a4>
 80004fe:	e1e1      	b.n	80008c4 <__aeabi_dadd+0x668>
 8000500:	2780      	movs	r7, #128	; 0x80
 8000502:	033f      	lsls	r7, r7, #12
 8000504:	4307      	orrs	r7, r0
 8000506:	033f      	lsls	r7, r7, #12
 8000508:	4a2e      	ldr	r2, [pc, #184]	; (80005c4 <__aeabi_dadd+0x368>)
 800050a:	0b3f      	lsrs	r7, r7, #12
 800050c:	e73d      	b.n	800038a <__aeabi_dadd+0x12e>
 800050e:	0020      	movs	r0, r4
 8000510:	f001 f878 	bl	8001604 <__clzsi2>
 8000514:	0001      	movs	r1, r0
 8000516:	3118      	adds	r1, #24
 8000518:	291f      	cmp	r1, #31
 800051a:	dc00      	bgt.n	800051e <__aeabi_dadd+0x2c2>
 800051c:	e6fc      	b.n	8000318 <__aeabi_dadd+0xbc>
 800051e:	3808      	subs	r0, #8
 8000520:	4084      	lsls	r4, r0
 8000522:	0027      	movs	r7, r4
 8000524:	2400      	movs	r4, #0
 8000526:	42b1      	cmp	r1, r6
 8000528:	db00      	blt.n	800052c <__aeabi_dadd+0x2d0>
 800052a:	e6ff      	b.n	800032c <__aeabi_dadd+0xd0>
 800052c:	4a26      	ldr	r2, [pc, #152]	; (80005c8 <__aeabi_dadd+0x36c>)
 800052e:	1a76      	subs	r6, r6, r1
 8000530:	4017      	ands	r7, r2
 8000532:	e70d      	b.n	8000350 <__aeabi_dadd+0xf4>
 8000534:	2a00      	cmp	r2, #0
 8000536:	d02f      	beq.n	8000598 <__aeabi_dadd+0x33c>
 8000538:	464a      	mov	r2, r9
 800053a:	1b92      	subs	r2, r2, r6
 800053c:	4694      	mov	ip, r2
 800053e:	2e00      	cmp	r6, #0
 8000540:	d100      	bne.n	8000544 <__aeabi_dadd+0x2e8>
 8000542:	e0ad      	b.n	80006a0 <__aeabi_dadd+0x444>
 8000544:	4a1f      	ldr	r2, [pc, #124]	; (80005c4 <__aeabi_dadd+0x368>)
 8000546:	4591      	cmp	r9, r2
 8000548:	d100      	bne.n	800054c <__aeabi_dadd+0x2f0>
 800054a:	e10f      	b.n	800076c <__aeabi_dadd+0x510>
 800054c:	2280      	movs	r2, #128	; 0x80
 800054e:	0412      	lsls	r2, r2, #16
 8000550:	4310      	orrs	r0, r2
 8000552:	4662      	mov	r2, ip
 8000554:	2a38      	cmp	r2, #56	; 0x38
 8000556:	dd00      	ble.n	800055a <__aeabi_dadd+0x2fe>
 8000558:	e10f      	b.n	800077a <__aeabi_dadd+0x51e>
 800055a:	2a1f      	cmp	r2, #31
 800055c:	dd00      	ble.n	8000560 <__aeabi_dadd+0x304>
 800055e:	e180      	b.n	8000862 <__aeabi_dadd+0x606>
 8000560:	4664      	mov	r4, ip
 8000562:	2220      	movs	r2, #32
 8000564:	001e      	movs	r6, r3
 8000566:	1b12      	subs	r2, r2, r4
 8000568:	4667      	mov	r7, ip
 800056a:	0004      	movs	r4, r0
 800056c:	4093      	lsls	r3, r2
 800056e:	4094      	lsls	r4, r2
 8000570:	40fe      	lsrs	r6, r7
 8000572:	1e5a      	subs	r2, r3, #1
 8000574:	4193      	sbcs	r3, r2
 8000576:	40f8      	lsrs	r0, r7
 8000578:	4334      	orrs	r4, r6
 800057a:	431c      	orrs	r4, r3
 800057c:	4480      	add	r8, r0
 800057e:	1864      	adds	r4, r4, r1
 8000580:	428c      	cmp	r4, r1
 8000582:	41bf      	sbcs	r7, r7
 8000584:	427f      	negs	r7, r7
 8000586:	464e      	mov	r6, r9
 8000588:	4447      	add	r7, r8
 800058a:	e7a6      	b.n	80004da <__aeabi_dadd+0x27e>
 800058c:	4642      	mov	r2, r8
 800058e:	430a      	orrs	r2, r1
 8000590:	0011      	movs	r1, r2
 8000592:	1e4a      	subs	r2, r1, #1
 8000594:	4191      	sbcs	r1, r2
 8000596:	e6ad      	b.n	80002f4 <__aeabi_dadd+0x98>
 8000598:	4c0c      	ldr	r4, [pc, #48]	; (80005cc <__aeabi_dadd+0x370>)
 800059a:	1c72      	adds	r2, r6, #1
 800059c:	4222      	tst	r2, r4
 800059e:	d000      	beq.n	80005a2 <__aeabi_dadd+0x346>
 80005a0:	e0a1      	b.n	80006e6 <__aeabi_dadd+0x48a>
 80005a2:	0002      	movs	r2, r0
 80005a4:	431a      	orrs	r2, r3
 80005a6:	2e00      	cmp	r6, #0
 80005a8:	d000      	beq.n	80005ac <__aeabi_dadd+0x350>
 80005aa:	e0fa      	b.n	80007a2 <__aeabi_dadd+0x546>
 80005ac:	2a00      	cmp	r2, #0
 80005ae:	d100      	bne.n	80005b2 <__aeabi_dadd+0x356>
 80005b0:	e145      	b.n	800083e <__aeabi_dadd+0x5e2>
 80005b2:	003a      	movs	r2, r7
 80005b4:	430a      	orrs	r2, r1
 80005b6:	d000      	beq.n	80005ba <__aeabi_dadd+0x35e>
 80005b8:	e146      	b.n	8000848 <__aeabi_dadd+0x5ec>
 80005ba:	0742      	lsls	r2, r0, #29
 80005bc:	08db      	lsrs	r3, r3, #3
 80005be:	4313      	orrs	r3, r2
 80005c0:	08c0      	lsrs	r0, r0, #3
 80005c2:	e77b      	b.n	80004bc <__aeabi_dadd+0x260>
 80005c4:	000007ff 	.word	0x000007ff
 80005c8:	ff7fffff 	.word	0xff7fffff
 80005cc:	000007fe 	.word	0x000007fe
 80005d0:	4647      	mov	r7, r8
 80005d2:	1a5c      	subs	r4, r3, r1
 80005d4:	1bc2      	subs	r2, r0, r7
 80005d6:	42a3      	cmp	r3, r4
 80005d8:	41bf      	sbcs	r7, r7
 80005da:	427f      	negs	r7, r7
 80005dc:	46b9      	mov	r9, r7
 80005de:	0017      	movs	r7, r2
 80005e0:	464a      	mov	r2, r9
 80005e2:	1abf      	subs	r7, r7, r2
 80005e4:	023a      	lsls	r2, r7, #8
 80005e6:	d500      	bpl.n	80005ea <__aeabi_dadd+0x38e>
 80005e8:	e08d      	b.n	8000706 <__aeabi_dadd+0x4aa>
 80005ea:	0023      	movs	r3, r4
 80005ec:	433b      	orrs	r3, r7
 80005ee:	d000      	beq.n	80005f2 <__aeabi_dadd+0x396>
 80005f0:	e68a      	b.n	8000308 <__aeabi_dadd+0xac>
 80005f2:	2000      	movs	r0, #0
 80005f4:	2500      	movs	r5, #0
 80005f6:	e761      	b.n	80004bc <__aeabi_dadd+0x260>
 80005f8:	4cb4      	ldr	r4, [pc, #720]	; (80008cc <__aeabi_dadd+0x670>)
 80005fa:	45a1      	cmp	r9, r4
 80005fc:	d100      	bne.n	8000600 <__aeabi_dadd+0x3a4>
 80005fe:	e0ad      	b.n	800075c <__aeabi_dadd+0x500>
 8000600:	2480      	movs	r4, #128	; 0x80
 8000602:	0424      	lsls	r4, r4, #16
 8000604:	4320      	orrs	r0, r4
 8000606:	4664      	mov	r4, ip
 8000608:	2c38      	cmp	r4, #56	; 0x38
 800060a:	dc3d      	bgt.n	8000688 <__aeabi_dadd+0x42c>
 800060c:	4662      	mov	r2, ip
 800060e:	2c1f      	cmp	r4, #31
 8000610:	dd00      	ble.n	8000614 <__aeabi_dadd+0x3b8>
 8000612:	e0b7      	b.n	8000784 <__aeabi_dadd+0x528>
 8000614:	2520      	movs	r5, #32
 8000616:	001e      	movs	r6, r3
 8000618:	1b2d      	subs	r5, r5, r4
 800061a:	0004      	movs	r4, r0
 800061c:	40ab      	lsls	r3, r5
 800061e:	40ac      	lsls	r4, r5
 8000620:	40d6      	lsrs	r6, r2
 8000622:	40d0      	lsrs	r0, r2
 8000624:	4642      	mov	r2, r8
 8000626:	1e5d      	subs	r5, r3, #1
 8000628:	41ab      	sbcs	r3, r5
 800062a:	4334      	orrs	r4, r6
 800062c:	1a12      	subs	r2, r2, r0
 800062e:	4690      	mov	r8, r2
 8000630:	4323      	orrs	r3, r4
 8000632:	e02c      	b.n	800068e <__aeabi_dadd+0x432>
 8000634:	0742      	lsls	r2, r0, #29
 8000636:	08db      	lsrs	r3, r3, #3
 8000638:	4313      	orrs	r3, r2
 800063a:	08c0      	lsrs	r0, r0, #3
 800063c:	e73b      	b.n	80004b6 <__aeabi_dadd+0x25a>
 800063e:	185c      	adds	r4, r3, r1
 8000640:	429c      	cmp	r4, r3
 8000642:	419b      	sbcs	r3, r3
 8000644:	4440      	add	r0, r8
 8000646:	425b      	negs	r3, r3
 8000648:	18c7      	adds	r7, r0, r3
 800064a:	2601      	movs	r6, #1
 800064c:	023b      	lsls	r3, r7, #8
 800064e:	d400      	bmi.n	8000652 <__aeabi_dadd+0x3f6>
 8000650:	e729      	b.n	80004a6 <__aeabi_dadd+0x24a>
 8000652:	2602      	movs	r6, #2
 8000654:	4a9e      	ldr	r2, [pc, #632]	; (80008d0 <__aeabi_dadd+0x674>)
 8000656:	0863      	lsrs	r3, r4, #1
 8000658:	4017      	ands	r7, r2
 800065a:	2201      	movs	r2, #1
 800065c:	4014      	ands	r4, r2
 800065e:	431c      	orrs	r4, r3
 8000660:	07fb      	lsls	r3, r7, #31
 8000662:	431c      	orrs	r4, r3
 8000664:	087f      	lsrs	r7, r7, #1
 8000666:	e673      	b.n	8000350 <__aeabi_dadd+0xf4>
 8000668:	4644      	mov	r4, r8
 800066a:	3a20      	subs	r2, #32
 800066c:	40d4      	lsrs	r4, r2
 800066e:	4662      	mov	r2, ip
 8000670:	2a20      	cmp	r2, #32
 8000672:	d005      	beq.n	8000680 <__aeabi_dadd+0x424>
 8000674:	4667      	mov	r7, ip
 8000676:	2240      	movs	r2, #64	; 0x40
 8000678:	1bd2      	subs	r2, r2, r7
 800067a:	4647      	mov	r7, r8
 800067c:	4097      	lsls	r7, r2
 800067e:	4339      	orrs	r1, r7
 8000680:	1e4a      	subs	r2, r1, #1
 8000682:	4191      	sbcs	r1, r2
 8000684:	4321      	orrs	r1, r4
 8000686:	e635      	b.n	80002f4 <__aeabi_dadd+0x98>
 8000688:	4303      	orrs	r3, r0
 800068a:	1e58      	subs	r0, r3, #1
 800068c:	4183      	sbcs	r3, r0
 800068e:	1acc      	subs	r4, r1, r3
 8000690:	42a1      	cmp	r1, r4
 8000692:	41bf      	sbcs	r7, r7
 8000694:	4643      	mov	r3, r8
 8000696:	427f      	negs	r7, r7
 8000698:	4655      	mov	r5, sl
 800069a:	464e      	mov	r6, r9
 800069c:	1bdf      	subs	r7, r3, r7
 800069e:	e62e      	b.n	80002fe <__aeabi_dadd+0xa2>
 80006a0:	0002      	movs	r2, r0
 80006a2:	431a      	orrs	r2, r3
 80006a4:	d100      	bne.n	80006a8 <__aeabi_dadd+0x44c>
 80006a6:	e0bd      	b.n	8000824 <__aeabi_dadd+0x5c8>
 80006a8:	4662      	mov	r2, ip
 80006aa:	4664      	mov	r4, ip
 80006ac:	3a01      	subs	r2, #1
 80006ae:	2c01      	cmp	r4, #1
 80006b0:	d100      	bne.n	80006b4 <__aeabi_dadd+0x458>
 80006b2:	e0e5      	b.n	8000880 <__aeabi_dadd+0x624>
 80006b4:	4c85      	ldr	r4, [pc, #532]	; (80008cc <__aeabi_dadd+0x670>)
 80006b6:	45a4      	cmp	ip, r4
 80006b8:	d058      	beq.n	800076c <__aeabi_dadd+0x510>
 80006ba:	4694      	mov	ip, r2
 80006bc:	e749      	b.n	8000552 <__aeabi_dadd+0x2f6>
 80006be:	4664      	mov	r4, ip
 80006c0:	2220      	movs	r2, #32
 80006c2:	1b12      	subs	r2, r2, r4
 80006c4:	4644      	mov	r4, r8
 80006c6:	4094      	lsls	r4, r2
 80006c8:	000f      	movs	r7, r1
 80006ca:	46a1      	mov	r9, r4
 80006cc:	4664      	mov	r4, ip
 80006ce:	4091      	lsls	r1, r2
 80006d0:	40e7      	lsrs	r7, r4
 80006d2:	464c      	mov	r4, r9
 80006d4:	1e4a      	subs	r2, r1, #1
 80006d6:	4191      	sbcs	r1, r2
 80006d8:	433c      	orrs	r4, r7
 80006da:	4642      	mov	r2, r8
 80006dc:	430c      	orrs	r4, r1
 80006de:	4661      	mov	r1, ip
 80006e0:	40ca      	lsrs	r2, r1
 80006e2:	1880      	adds	r0, r0, r2
 80006e4:	e6f4      	b.n	80004d0 <__aeabi_dadd+0x274>
 80006e6:	4c79      	ldr	r4, [pc, #484]	; (80008cc <__aeabi_dadd+0x670>)
 80006e8:	42a2      	cmp	r2, r4
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x492>
 80006ec:	e6fd      	b.n	80004ea <__aeabi_dadd+0x28e>
 80006ee:	1859      	adds	r1, r3, r1
 80006f0:	4299      	cmp	r1, r3
 80006f2:	419b      	sbcs	r3, r3
 80006f4:	4440      	add	r0, r8
 80006f6:	425f      	negs	r7, r3
 80006f8:	19c7      	adds	r7, r0, r7
 80006fa:	07fc      	lsls	r4, r7, #31
 80006fc:	0849      	lsrs	r1, r1, #1
 80006fe:	0016      	movs	r6, r2
 8000700:	430c      	orrs	r4, r1
 8000702:	087f      	lsrs	r7, r7, #1
 8000704:	e6cf      	b.n	80004a6 <__aeabi_dadd+0x24a>
 8000706:	1acc      	subs	r4, r1, r3
 8000708:	42a1      	cmp	r1, r4
 800070a:	41bf      	sbcs	r7, r7
 800070c:	4643      	mov	r3, r8
 800070e:	427f      	negs	r7, r7
 8000710:	1a18      	subs	r0, r3, r0
 8000712:	4655      	mov	r5, sl
 8000714:	1bc7      	subs	r7, r0, r7
 8000716:	e5f7      	b.n	8000308 <__aeabi_dadd+0xac>
 8000718:	08c9      	lsrs	r1, r1, #3
 800071a:	077b      	lsls	r3, r7, #29
 800071c:	4655      	mov	r5, sl
 800071e:	430b      	orrs	r3, r1
 8000720:	08f8      	lsrs	r0, r7, #3
 8000722:	e6c8      	b.n	80004b6 <__aeabi_dadd+0x25a>
 8000724:	2c00      	cmp	r4, #0
 8000726:	d000      	beq.n	800072a <__aeabi_dadd+0x4ce>
 8000728:	e081      	b.n	800082e <__aeabi_dadd+0x5d2>
 800072a:	4643      	mov	r3, r8
 800072c:	430b      	orrs	r3, r1
 800072e:	d115      	bne.n	800075c <__aeabi_dadd+0x500>
 8000730:	2080      	movs	r0, #128	; 0x80
 8000732:	2500      	movs	r5, #0
 8000734:	0300      	lsls	r0, r0, #12
 8000736:	e6e3      	b.n	8000500 <__aeabi_dadd+0x2a4>
 8000738:	1a5c      	subs	r4, r3, r1
 800073a:	42a3      	cmp	r3, r4
 800073c:	419b      	sbcs	r3, r3
 800073e:	1bc7      	subs	r7, r0, r7
 8000740:	425b      	negs	r3, r3
 8000742:	2601      	movs	r6, #1
 8000744:	1aff      	subs	r7, r7, r3
 8000746:	e5da      	b.n	80002fe <__aeabi_dadd+0xa2>
 8000748:	0742      	lsls	r2, r0, #29
 800074a:	08db      	lsrs	r3, r3, #3
 800074c:	4313      	orrs	r3, r2
 800074e:	08c0      	lsrs	r0, r0, #3
 8000750:	e6d2      	b.n	80004f8 <__aeabi_dadd+0x29c>
 8000752:	0742      	lsls	r2, r0, #29
 8000754:	08db      	lsrs	r3, r3, #3
 8000756:	4313      	orrs	r3, r2
 8000758:	08c0      	lsrs	r0, r0, #3
 800075a:	e6ac      	b.n	80004b6 <__aeabi_dadd+0x25a>
 800075c:	4643      	mov	r3, r8
 800075e:	4642      	mov	r2, r8
 8000760:	08c9      	lsrs	r1, r1, #3
 8000762:	075b      	lsls	r3, r3, #29
 8000764:	4655      	mov	r5, sl
 8000766:	430b      	orrs	r3, r1
 8000768:	08d0      	lsrs	r0, r2, #3
 800076a:	e6c5      	b.n	80004f8 <__aeabi_dadd+0x29c>
 800076c:	4643      	mov	r3, r8
 800076e:	4642      	mov	r2, r8
 8000770:	075b      	lsls	r3, r3, #29
 8000772:	08c9      	lsrs	r1, r1, #3
 8000774:	430b      	orrs	r3, r1
 8000776:	08d0      	lsrs	r0, r2, #3
 8000778:	e6be      	b.n	80004f8 <__aeabi_dadd+0x29c>
 800077a:	4303      	orrs	r3, r0
 800077c:	001c      	movs	r4, r3
 800077e:	1e63      	subs	r3, r4, #1
 8000780:	419c      	sbcs	r4, r3
 8000782:	e6fc      	b.n	800057e <__aeabi_dadd+0x322>
 8000784:	0002      	movs	r2, r0
 8000786:	3c20      	subs	r4, #32
 8000788:	40e2      	lsrs	r2, r4
 800078a:	0014      	movs	r4, r2
 800078c:	4662      	mov	r2, ip
 800078e:	2a20      	cmp	r2, #32
 8000790:	d003      	beq.n	800079a <__aeabi_dadd+0x53e>
 8000792:	2540      	movs	r5, #64	; 0x40
 8000794:	1aad      	subs	r5, r5, r2
 8000796:	40a8      	lsls	r0, r5
 8000798:	4303      	orrs	r3, r0
 800079a:	1e58      	subs	r0, r3, #1
 800079c:	4183      	sbcs	r3, r0
 800079e:	4323      	orrs	r3, r4
 80007a0:	e775      	b.n	800068e <__aeabi_dadd+0x432>
 80007a2:	2a00      	cmp	r2, #0
 80007a4:	d0e2      	beq.n	800076c <__aeabi_dadd+0x510>
 80007a6:	003a      	movs	r2, r7
 80007a8:	430a      	orrs	r2, r1
 80007aa:	d0cd      	beq.n	8000748 <__aeabi_dadd+0x4ec>
 80007ac:	0742      	lsls	r2, r0, #29
 80007ae:	08db      	lsrs	r3, r3, #3
 80007b0:	4313      	orrs	r3, r2
 80007b2:	2280      	movs	r2, #128	; 0x80
 80007b4:	08c0      	lsrs	r0, r0, #3
 80007b6:	0312      	lsls	r2, r2, #12
 80007b8:	4210      	tst	r0, r2
 80007ba:	d006      	beq.n	80007ca <__aeabi_dadd+0x56e>
 80007bc:	08fc      	lsrs	r4, r7, #3
 80007be:	4214      	tst	r4, r2
 80007c0:	d103      	bne.n	80007ca <__aeabi_dadd+0x56e>
 80007c2:	0020      	movs	r0, r4
 80007c4:	08cb      	lsrs	r3, r1, #3
 80007c6:	077a      	lsls	r2, r7, #29
 80007c8:	4313      	orrs	r3, r2
 80007ca:	0f5a      	lsrs	r2, r3, #29
 80007cc:	00db      	lsls	r3, r3, #3
 80007ce:	0752      	lsls	r2, r2, #29
 80007d0:	08db      	lsrs	r3, r3, #3
 80007d2:	4313      	orrs	r3, r2
 80007d4:	e690      	b.n	80004f8 <__aeabi_dadd+0x29c>
 80007d6:	4643      	mov	r3, r8
 80007d8:	430b      	orrs	r3, r1
 80007da:	d100      	bne.n	80007de <__aeabi_dadd+0x582>
 80007dc:	e709      	b.n	80005f2 <__aeabi_dadd+0x396>
 80007de:	4643      	mov	r3, r8
 80007e0:	4642      	mov	r2, r8
 80007e2:	08c9      	lsrs	r1, r1, #3
 80007e4:	075b      	lsls	r3, r3, #29
 80007e6:	4655      	mov	r5, sl
 80007e8:	430b      	orrs	r3, r1
 80007ea:	08d0      	lsrs	r0, r2, #3
 80007ec:	e666      	b.n	80004bc <__aeabi_dadd+0x260>
 80007ee:	1acc      	subs	r4, r1, r3
 80007f0:	42a1      	cmp	r1, r4
 80007f2:	4189      	sbcs	r1, r1
 80007f4:	1a3f      	subs	r7, r7, r0
 80007f6:	4249      	negs	r1, r1
 80007f8:	4655      	mov	r5, sl
 80007fa:	2601      	movs	r6, #1
 80007fc:	1a7f      	subs	r7, r7, r1
 80007fe:	e57e      	b.n	80002fe <__aeabi_dadd+0xa2>
 8000800:	4642      	mov	r2, r8
 8000802:	1a5c      	subs	r4, r3, r1
 8000804:	1a87      	subs	r7, r0, r2
 8000806:	42a3      	cmp	r3, r4
 8000808:	4192      	sbcs	r2, r2
 800080a:	4252      	negs	r2, r2
 800080c:	1abf      	subs	r7, r7, r2
 800080e:	023a      	lsls	r2, r7, #8
 8000810:	d53d      	bpl.n	800088e <__aeabi_dadd+0x632>
 8000812:	1acc      	subs	r4, r1, r3
 8000814:	42a1      	cmp	r1, r4
 8000816:	4189      	sbcs	r1, r1
 8000818:	4643      	mov	r3, r8
 800081a:	4249      	negs	r1, r1
 800081c:	1a1f      	subs	r7, r3, r0
 800081e:	4655      	mov	r5, sl
 8000820:	1a7f      	subs	r7, r7, r1
 8000822:	e595      	b.n	8000350 <__aeabi_dadd+0xf4>
 8000824:	077b      	lsls	r3, r7, #29
 8000826:	08c9      	lsrs	r1, r1, #3
 8000828:	430b      	orrs	r3, r1
 800082a:	08f8      	lsrs	r0, r7, #3
 800082c:	e643      	b.n	80004b6 <__aeabi_dadd+0x25a>
 800082e:	4644      	mov	r4, r8
 8000830:	08db      	lsrs	r3, r3, #3
 8000832:	430c      	orrs	r4, r1
 8000834:	d130      	bne.n	8000898 <__aeabi_dadd+0x63c>
 8000836:	0742      	lsls	r2, r0, #29
 8000838:	4313      	orrs	r3, r2
 800083a:	08c0      	lsrs	r0, r0, #3
 800083c:	e65c      	b.n	80004f8 <__aeabi_dadd+0x29c>
 800083e:	077b      	lsls	r3, r7, #29
 8000840:	08c9      	lsrs	r1, r1, #3
 8000842:	430b      	orrs	r3, r1
 8000844:	08f8      	lsrs	r0, r7, #3
 8000846:	e639      	b.n	80004bc <__aeabi_dadd+0x260>
 8000848:	185c      	adds	r4, r3, r1
 800084a:	429c      	cmp	r4, r3
 800084c:	419b      	sbcs	r3, r3
 800084e:	4440      	add	r0, r8
 8000850:	425b      	negs	r3, r3
 8000852:	18c7      	adds	r7, r0, r3
 8000854:	023b      	lsls	r3, r7, #8
 8000856:	d400      	bmi.n	800085a <__aeabi_dadd+0x5fe>
 8000858:	e625      	b.n	80004a6 <__aeabi_dadd+0x24a>
 800085a:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <__aeabi_dadd+0x674>)
 800085c:	2601      	movs	r6, #1
 800085e:	401f      	ands	r7, r3
 8000860:	e621      	b.n	80004a6 <__aeabi_dadd+0x24a>
 8000862:	0004      	movs	r4, r0
 8000864:	3a20      	subs	r2, #32
 8000866:	40d4      	lsrs	r4, r2
 8000868:	4662      	mov	r2, ip
 800086a:	2a20      	cmp	r2, #32
 800086c:	d004      	beq.n	8000878 <__aeabi_dadd+0x61c>
 800086e:	2240      	movs	r2, #64	; 0x40
 8000870:	4666      	mov	r6, ip
 8000872:	1b92      	subs	r2, r2, r6
 8000874:	4090      	lsls	r0, r2
 8000876:	4303      	orrs	r3, r0
 8000878:	1e5a      	subs	r2, r3, #1
 800087a:	4193      	sbcs	r3, r2
 800087c:	431c      	orrs	r4, r3
 800087e:	e67e      	b.n	800057e <__aeabi_dadd+0x322>
 8000880:	185c      	adds	r4, r3, r1
 8000882:	428c      	cmp	r4, r1
 8000884:	4189      	sbcs	r1, r1
 8000886:	4440      	add	r0, r8
 8000888:	4249      	negs	r1, r1
 800088a:	1847      	adds	r7, r0, r1
 800088c:	e6dd      	b.n	800064a <__aeabi_dadd+0x3ee>
 800088e:	0023      	movs	r3, r4
 8000890:	433b      	orrs	r3, r7
 8000892:	d100      	bne.n	8000896 <__aeabi_dadd+0x63a>
 8000894:	e6ad      	b.n	80005f2 <__aeabi_dadd+0x396>
 8000896:	e606      	b.n	80004a6 <__aeabi_dadd+0x24a>
 8000898:	0744      	lsls	r4, r0, #29
 800089a:	4323      	orrs	r3, r4
 800089c:	2480      	movs	r4, #128	; 0x80
 800089e:	08c0      	lsrs	r0, r0, #3
 80008a0:	0324      	lsls	r4, r4, #12
 80008a2:	4220      	tst	r0, r4
 80008a4:	d008      	beq.n	80008b8 <__aeabi_dadd+0x65c>
 80008a6:	4642      	mov	r2, r8
 80008a8:	08d6      	lsrs	r6, r2, #3
 80008aa:	4226      	tst	r6, r4
 80008ac:	d104      	bne.n	80008b8 <__aeabi_dadd+0x65c>
 80008ae:	4655      	mov	r5, sl
 80008b0:	0030      	movs	r0, r6
 80008b2:	08cb      	lsrs	r3, r1, #3
 80008b4:	0751      	lsls	r1, r2, #29
 80008b6:	430b      	orrs	r3, r1
 80008b8:	0f5a      	lsrs	r2, r3, #29
 80008ba:	00db      	lsls	r3, r3, #3
 80008bc:	08db      	lsrs	r3, r3, #3
 80008be:	0752      	lsls	r2, r2, #29
 80008c0:	4313      	orrs	r3, r2
 80008c2:	e619      	b.n	80004f8 <__aeabi_dadd+0x29c>
 80008c4:	2300      	movs	r3, #0
 80008c6:	4a01      	ldr	r2, [pc, #4]	; (80008cc <__aeabi_dadd+0x670>)
 80008c8:	001f      	movs	r7, r3
 80008ca:	e55e      	b.n	800038a <__aeabi_dadd+0x12e>
 80008cc:	000007ff 	.word	0x000007ff
 80008d0:	ff7fffff 	.word	0xff7fffff

080008d4 <__aeabi_dmul>:
 80008d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008d6:	4657      	mov	r7, sl
 80008d8:	464e      	mov	r6, r9
 80008da:	4645      	mov	r5, r8
 80008dc:	46de      	mov	lr, fp
 80008de:	b5e0      	push	{r5, r6, r7, lr}
 80008e0:	4698      	mov	r8, r3
 80008e2:	030c      	lsls	r4, r1, #12
 80008e4:	004b      	lsls	r3, r1, #1
 80008e6:	0006      	movs	r6, r0
 80008e8:	4692      	mov	sl, r2
 80008ea:	b087      	sub	sp, #28
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d5b      	lsrs	r3, r3, #21
 80008f0:	0fcf      	lsrs	r7, r1, #31
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_dmul+0x24>
 80008f6:	e15c      	b.n	8000bb2 <__aeabi_dmul+0x2de>
 80008f8:	4ad9      	ldr	r2, [pc, #868]	; (8000c60 <__aeabi_dmul+0x38c>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d100      	bne.n	8000900 <__aeabi_dmul+0x2c>
 80008fe:	e175      	b.n	8000bec <__aeabi_dmul+0x318>
 8000900:	0f42      	lsrs	r2, r0, #29
 8000902:	00e4      	lsls	r4, r4, #3
 8000904:	4314      	orrs	r4, r2
 8000906:	2280      	movs	r2, #128	; 0x80
 8000908:	0412      	lsls	r2, r2, #16
 800090a:	4314      	orrs	r4, r2
 800090c:	4ad5      	ldr	r2, [pc, #852]	; (8000c64 <__aeabi_dmul+0x390>)
 800090e:	00c5      	lsls	r5, r0, #3
 8000910:	4694      	mov	ip, r2
 8000912:	4463      	add	r3, ip
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	2300      	movs	r3, #0
 8000918:	4699      	mov	r9, r3
 800091a:	469b      	mov	fp, r3
 800091c:	4643      	mov	r3, r8
 800091e:	4642      	mov	r2, r8
 8000920:	031e      	lsls	r6, r3, #12
 8000922:	0fd2      	lsrs	r2, r2, #31
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	4650      	mov	r0, sl
 8000928:	4690      	mov	r8, r2
 800092a:	0b36      	lsrs	r6, r6, #12
 800092c:	0d5b      	lsrs	r3, r3, #21
 800092e:	d100      	bne.n	8000932 <__aeabi_dmul+0x5e>
 8000930:	e120      	b.n	8000b74 <__aeabi_dmul+0x2a0>
 8000932:	4acb      	ldr	r2, [pc, #812]	; (8000c60 <__aeabi_dmul+0x38c>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d100      	bne.n	800093a <__aeabi_dmul+0x66>
 8000938:	e162      	b.n	8000c00 <__aeabi_dmul+0x32c>
 800093a:	49ca      	ldr	r1, [pc, #808]	; (8000c64 <__aeabi_dmul+0x390>)
 800093c:	0f42      	lsrs	r2, r0, #29
 800093e:	468c      	mov	ip, r1
 8000940:	9900      	ldr	r1, [sp, #0]
 8000942:	4463      	add	r3, ip
 8000944:	00f6      	lsls	r6, r6, #3
 8000946:	468c      	mov	ip, r1
 8000948:	4316      	orrs	r6, r2
 800094a:	2280      	movs	r2, #128	; 0x80
 800094c:	449c      	add	ip, r3
 800094e:	0412      	lsls	r2, r2, #16
 8000950:	4663      	mov	r3, ip
 8000952:	4316      	orrs	r6, r2
 8000954:	00c2      	lsls	r2, r0, #3
 8000956:	2000      	movs	r0, #0
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	9900      	ldr	r1, [sp, #0]
 800095c:	4643      	mov	r3, r8
 800095e:	3101      	adds	r1, #1
 8000960:	468c      	mov	ip, r1
 8000962:	4649      	mov	r1, r9
 8000964:	407b      	eors	r3, r7
 8000966:	9301      	str	r3, [sp, #4]
 8000968:	290f      	cmp	r1, #15
 800096a:	d826      	bhi.n	80009ba <__aeabi_dmul+0xe6>
 800096c:	4bbe      	ldr	r3, [pc, #760]	; (8000c68 <__aeabi_dmul+0x394>)
 800096e:	0089      	lsls	r1, r1, #2
 8000970:	5859      	ldr	r1, [r3, r1]
 8000972:	468f      	mov	pc, r1
 8000974:	4643      	mov	r3, r8
 8000976:	9301      	str	r3, [sp, #4]
 8000978:	0034      	movs	r4, r6
 800097a:	0015      	movs	r5, r2
 800097c:	4683      	mov	fp, r0
 800097e:	465b      	mov	r3, fp
 8000980:	2b02      	cmp	r3, #2
 8000982:	d016      	beq.n	80009b2 <__aeabi_dmul+0xde>
 8000984:	2b03      	cmp	r3, #3
 8000986:	d100      	bne.n	800098a <__aeabi_dmul+0xb6>
 8000988:	e203      	b.n	8000d92 <__aeabi_dmul+0x4be>
 800098a:	2b01      	cmp	r3, #1
 800098c:	d000      	beq.n	8000990 <__aeabi_dmul+0xbc>
 800098e:	e0cd      	b.n	8000b2c <__aeabi_dmul+0x258>
 8000990:	2200      	movs	r2, #0
 8000992:	2400      	movs	r4, #0
 8000994:	2500      	movs	r5, #0
 8000996:	9b01      	ldr	r3, [sp, #4]
 8000998:	0512      	lsls	r2, r2, #20
 800099a:	4322      	orrs	r2, r4
 800099c:	07db      	lsls	r3, r3, #31
 800099e:	431a      	orrs	r2, r3
 80009a0:	0028      	movs	r0, r5
 80009a2:	0011      	movs	r1, r2
 80009a4:	b007      	add	sp, #28
 80009a6:	bcf0      	pop	{r4, r5, r6, r7}
 80009a8:	46bb      	mov	fp, r7
 80009aa:	46b2      	mov	sl, r6
 80009ac:	46a9      	mov	r9, r5
 80009ae:	46a0      	mov	r8, r4
 80009b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009b2:	2400      	movs	r4, #0
 80009b4:	2500      	movs	r5, #0
 80009b6:	4aaa      	ldr	r2, [pc, #680]	; (8000c60 <__aeabi_dmul+0x38c>)
 80009b8:	e7ed      	b.n	8000996 <__aeabi_dmul+0xc2>
 80009ba:	0c28      	lsrs	r0, r5, #16
 80009bc:	042d      	lsls	r5, r5, #16
 80009be:	0c2d      	lsrs	r5, r5, #16
 80009c0:	002b      	movs	r3, r5
 80009c2:	0c11      	lsrs	r1, r2, #16
 80009c4:	0412      	lsls	r2, r2, #16
 80009c6:	0c12      	lsrs	r2, r2, #16
 80009c8:	4353      	muls	r3, r2
 80009ca:	4698      	mov	r8, r3
 80009cc:	0013      	movs	r3, r2
 80009ce:	002f      	movs	r7, r5
 80009d0:	4343      	muls	r3, r0
 80009d2:	4699      	mov	r9, r3
 80009d4:	434f      	muls	r7, r1
 80009d6:	444f      	add	r7, r9
 80009d8:	46bb      	mov	fp, r7
 80009da:	4647      	mov	r7, r8
 80009dc:	000b      	movs	r3, r1
 80009de:	0c3f      	lsrs	r7, r7, #16
 80009e0:	46ba      	mov	sl, r7
 80009e2:	4343      	muls	r3, r0
 80009e4:	44da      	add	sl, fp
 80009e6:	9302      	str	r3, [sp, #8]
 80009e8:	45d1      	cmp	r9, sl
 80009ea:	d904      	bls.n	80009f6 <__aeabi_dmul+0x122>
 80009ec:	2780      	movs	r7, #128	; 0x80
 80009ee:	027f      	lsls	r7, r7, #9
 80009f0:	46b9      	mov	r9, r7
 80009f2:	444b      	add	r3, r9
 80009f4:	9302      	str	r3, [sp, #8]
 80009f6:	4653      	mov	r3, sl
 80009f8:	0c1b      	lsrs	r3, r3, #16
 80009fa:	469b      	mov	fp, r3
 80009fc:	4653      	mov	r3, sl
 80009fe:	041f      	lsls	r7, r3, #16
 8000a00:	4643      	mov	r3, r8
 8000a02:	041b      	lsls	r3, r3, #16
 8000a04:	0c1b      	lsrs	r3, r3, #16
 8000a06:	4698      	mov	r8, r3
 8000a08:	003b      	movs	r3, r7
 8000a0a:	4443      	add	r3, r8
 8000a0c:	9304      	str	r3, [sp, #16]
 8000a0e:	0c33      	lsrs	r3, r6, #16
 8000a10:	0436      	lsls	r6, r6, #16
 8000a12:	0c36      	lsrs	r6, r6, #16
 8000a14:	4698      	mov	r8, r3
 8000a16:	0033      	movs	r3, r6
 8000a18:	4343      	muls	r3, r0
 8000a1a:	4699      	mov	r9, r3
 8000a1c:	4643      	mov	r3, r8
 8000a1e:	4343      	muls	r3, r0
 8000a20:	002f      	movs	r7, r5
 8000a22:	469a      	mov	sl, r3
 8000a24:	4643      	mov	r3, r8
 8000a26:	4377      	muls	r7, r6
 8000a28:	435d      	muls	r5, r3
 8000a2a:	0c38      	lsrs	r0, r7, #16
 8000a2c:	444d      	add	r5, r9
 8000a2e:	1945      	adds	r5, r0, r5
 8000a30:	45a9      	cmp	r9, r5
 8000a32:	d903      	bls.n	8000a3c <__aeabi_dmul+0x168>
 8000a34:	2380      	movs	r3, #128	; 0x80
 8000a36:	025b      	lsls	r3, r3, #9
 8000a38:	4699      	mov	r9, r3
 8000a3a:	44ca      	add	sl, r9
 8000a3c:	043f      	lsls	r7, r7, #16
 8000a3e:	0c28      	lsrs	r0, r5, #16
 8000a40:	0c3f      	lsrs	r7, r7, #16
 8000a42:	042d      	lsls	r5, r5, #16
 8000a44:	19ed      	adds	r5, r5, r7
 8000a46:	0c27      	lsrs	r7, r4, #16
 8000a48:	0424      	lsls	r4, r4, #16
 8000a4a:	0c24      	lsrs	r4, r4, #16
 8000a4c:	0003      	movs	r3, r0
 8000a4e:	0020      	movs	r0, r4
 8000a50:	4350      	muls	r0, r2
 8000a52:	437a      	muls	r2, r7
 8000a54:	4691      	mov	r9, r2
 8000a56:	003a      	movs	r2, r7
 8000a58:	4453      	add	r3, sl
 8000a5a:	9305      	str	r3, [sp, #20]
 8000a5c:	0c03      	lsrs	r3, r0, #16
 8000a5e:	469a      	mov	sl, r3
 8000a60:	434a      	muls	r2, r1
 8000a62:	4361      	muls	r1, r4
 8000a64:	4449      	add	r1, r9
 8000a66:	4451      	add	r1, sl
 8000a68:	44ab      	add	fp, r5
 8000a6a:	4589      	cmp	r9, r1
 8000a6c:	d903      	bls.n	8000a76 <__aeabi_dmul+0x1a2>
 8000a6e:	2380      	movs	r3, #128	; 0x80
 8000a70:	025b      	lsls	r3, r3, #9
 8000a72:	4699      	mov	r9, r3
 8000a74:	444a      	add	r2, r9
 8000a76:	0400      	lsls	r0, r0, #16
 8000a78:	0c0b      	lsrs	r3, r1, #16
 8000a7a:	0c00      	lsrs	r0, r0, #16
 8000a7c:	0409      	lsls	r1, r1, #16
 8000a7e:	1809      	adds	r1, r1, r0
 8000a80:	0020      	movs	r0, r4
 8000a82:	4699      	mov	r9, r3
 8000a84:	4643      	mov	r3, r8
 8000a86:	4370      	muls	r0, r6
 8000a88:	435c      	muls	r4, r3
 8000a8a:	437e      	muls	r6, r7
 8000a8c:	435f      	muls	r7, r3
 8000a8e:	0c03      	lsrs	r3, r0, #16
 8000a90:	4698      	mov	r8, r3
 8000a92:	19a4      	adds	r4, r4, r6
 8000a94:	4444      	add	r4, r8
 8000a96:	444a      	add	r2, r9
 8000a98:	9703      	str	r7, [sp, #12]
 8000a9a:	42a6      	cmp	r6, r4
 8000a9c:	d904      	bls.n	8000aa8 <__aeabi_dmul+0x1d4>
 8000a9e:	2380      	movs	r3, #128	; 0x80
 8000aa0:	025b      	lsls	r3, r3, #9
 8000aa2:	4698      	mov	r8, r3
 8000aa4:	4447      	add	r7, r8
 8000aa6:	9703      	str	r7, [sp, #12]
 8000aa8:	0423      	lsls	r3, r4, #16
 8000aaa:	9e02      	ldr	r6, [sp, #8]
 8000aac:	469a      	mov	sl, r3
 8000aae:	9b05      	ldr	r3, [sp, #20]
 8000ab0:	445e      	add	r6, fp
 8000ab2:	4698      	mov	r8, r3
 8000ab4:	42ae      	cmp	r6, r5
 8000ab6:	41ad      	sbcs	r5, r5
 8000ab8:	1876      	adds	r6, r6, r1
 8000aba:	428e      	cmp	r6, r1
 8000abc:	4189      	sbcs	r1, r1
 8000abe:	0400      	lsls	r0, r0, #16
 8000ac0:	0c00      	lsrs	r0, r0, #16
 8000ac2:	4450      	add	r0, sl
 8000ac4:	4440      	add	r0, r8
 8000ac6:	426d      	negs	r5, r5
 8000ac8:	1947      	adds	r7, r0, r5
 8000aca:	46b8      	mov	r8, r7
 8000acc:	4693      	mov	fp, r2
 8000ace:	4249      	negs	r1, r1
 8000ad0:	4689      	mov	r9, r1
 8000ad2:	44c3      	add	fp, r8
 8000ad4:	44d9      	add	r9, fp
 8000ad6:	4298      	cmp	r0, r3
 8000ad8:	4180      	sbcs	r0, r0
 8000ada:	45a8      	cmp	r8, r5
 8000adc:	41ad      	sbcs	r5, r5
 8000ade:	4593      	cmp	fp, r2
 8000ae0:	4192      	sbcs	r2, r2
 8000ae2:	4589      	cmp	r9, r1
 8000ae4:	4189      	sbcs	r1, r1
 8000ae6:	426d      	negs	r5, r5
 8000ae8:	4240      	negs	r0, r0
 8000aea:	4328      	orrs	r0, r5
 8000aec:	0c24      	lsrs	r4, r4, #16
 8000aee:	4252      	negs	r2, r2
 8000af0:	4249      	negs	r1, r1
 8000af2:	430a      	orrs	r2, r1
 8000af4:	9b03      	ldr	r3, [sp, #12]
 8000af6:	1900      	adds	r0, r0, r4
 8000af8:	1880      	adds	r0, r0, r2
 8000afa:	18c7      	adds	r7, r0, r3
 8000afc:	464b      	mov	r3, r9
 8000afe:	0ddc      	lsrs	r4, r3, #23
 8000b00:	9b04      	ldr	r3, [sp, #16]
 8000b02:	0275      	lsls	r5, r6, #9
 8000b04:	431d      	orrs	r5, r3
 8000b06:	1e6a      	subs	r2, r5, #1
 8000b08:	4195      	sbcs	r5, r2
 8000b0a:	464b      	mov	r3, r9
 8000b0c:	0df6      	lsrs	r6, r6, #23
 8000b0e:	027f      	lsls	r7, r7, #9
 8000b10:	4335      	orrs	r5, r6
 8000b12:	025a      	lsls	r2, r3, #9
 8000b14:	433c      	orrs	r4, r7
 8000b16:	4315      	orrs	r5, r2
 8000b18:	01fb      	lsls	r3, r7, #7
 8000b1a:	d400      	bmi.n	8000b1e <__aeabi_dmul+0x24a>
 8000b1c:	e11c      	b.n	8000d58 <__aeabi_dmul+0x484>
 8000b1e:	2101      	movs	r1, #1
 8000b20:	086a      	lsrs	r2, r5, #1
 8000b22:	400d      	ands	r5, r1
 8000b24:	4315      	orrs	r5, r2
 8000b26:	07e2      	lsls	r2, r4, #31
 8000b28:	4315      	orrs	r5, r2
 8000b2a:	0864      	lsrs	r4, r4, #1
 8000b2c:	494f      	ldr	r1, [pc, #316]	; (8000c6c <__aeabi_dmul+0x398>)
 8000b2e:	4461      	add	r1, ip
 8000b30:	2900      	cmp	r1, #0
 8000b32:	dc00      	bgt.n	8000b36 <__aeabi_dmul+0x262>
 8000b34:	e0b0      	b.n	8000c98 <__aeabi_dmul+0x3c4>
 8000b36:	076b      	lsls	r3, r5, #29
 8000b38:	d009      	beq.n	8000b4e <__aeabi_dmul+0x27a>
 8000b3a:	220f      	movs	r2, #15
 8000b3c:	402a      	ands	r2, r5
 8000b3e:	2a04      	cmp	r2, #4
 8000b40:	d005      	beq.n	8000b4e <__aeabi_dmul+0x27a>
 8000b42:	1d2a      	adds	r2, r5, #4
 8000b44:	42aa      	cmp	r2, r5
 8000b46:	41ad      	sbcs	r5, r5
 8000b48:	426d      	negs	r5, r5
 8000b4a:	1964      	adds	r4, r4, r5
 8000b4c:	0015      	movs	r5, r2
 8000b4e:	01e3      	lsls	r3, r4, #7
 8000b50:	d504      	bpl.n	8000b5c <__aeabi_dmul+0x288>
 8000b52:	2180      	movs	r1, #128	; 0x80
 8000b54:	4a46      	ldr	r2, [pc, #280]	; (8000c70 <__aeabi_dmul+0x39c>)
 8000b56:	00c9      	lsls	r1, r1, #3
 8000b58:	4014      	ands	r4, r2
 8000b5a:	4461      	add	r1, ip
 8000b5c:	4a45      	ldr	r2, [pc, #276]	; (8000c74 <__aeabi_dmul+0x3a0>)
 8000b5e:	4291      	cmp	r1, r2
 8000b60:	dd00      	ble.n	8000b64 <__aeabi_dmul+0x290>
 8000b62:	e726      	b.n	80009b2 <__aeabi_dmul+0xde>
 8000b64:	0762      	lsls	r2, r4, #29
 8000b66:	08ed      	lsrs	r5, r5, #3
 8000b68:	0264      	lsls	r4, r4, #9
 8000b6a:	0549      	lsls	r1, r1, #21
 8000b6c:	4315      	orrs	r5, r2
 8000b6e:	0b24      	lsrs	r4, r4, #12
 8000b70:	0d4a      	lsrs	r2, r1, #21
 8000b72:	e710      	b.n	8000996 <__aeabi_dmul+0xc2>
 8000b74:	4652      	mov	r2, sl
 8000b76:	4332      	orrs	r2, r6
 8000b78:	d100      	bne.n	8000b7c <__aeabi_dmul+0x2a8>
 8000b7a:	e07f      	b.n	8000c7c <__aeabi_dmul+0x3a8>
 8000b7c:	2e00      	cmp	r6, #0
 8000b7e:	d100      	bne.n	8000b82 <__aeabi_dmul+0x2ae>
 8000b80:	e0dc      	b.n	8000d3c <__aeabi_dmul+0x468>
 8000b82:	0030      	movs	r0, r6
 8000b84:	f000 fd3e 	bl	8001604 <__clzsi2>
 8000b88:	0002      	movs	r2, r0
 8000b8a:	3a0b      	subs	r2, #11
 8000b8c:	231d      	movs	r3, #29
 8000b8e:	0001      	movs	r1, r0
 8000b90:	1a9b      	subs	r3, r3, r2
 8000b92:	4652      	mov	r2, sl
 8000b94:	3908      	subs	r1, #8
 8000b96:	40da      	lsrs	r2, r3
 8000b98:	408e      	lsls	r6, r1
 8000b9a:	4316      	orrs	r6, r2
 8000b9c:	4652      	mov	r2, sl
 8000b9e:	408a      	lsls	r2, r1
 8000ba0:	9b00      	ldr	r3, [sp, #0]
 8000ba2:	4935      	ldr	r1, [pc, #212]	; (8000c78 <__aeabi_dmul+0x3a4>)
 8000ba4:	1a18      	subs	r0, r3, r0
 8000ba6:	0003      	movs	r3, r0
 8000ba8:	468c      	mov	ip, r1
 8000baa:	4463      	add	r3, ip
 8000bac:	2000      	movs	r0, #0
 8000bae:	9300      	str	r3, [sp, #0]
 8000bb0:	e6d3      	b.n	800095a <__aeabi_dmul+0x86>
 8000bb2:	0025      	movs	r5, r4
 8000bb4:	4305      	orrs	r5, r0
 8000bb6:	d04a      	beq.n	8000c4e <__aeabi_dmul+0x37a>
 8000bb8:	2c00      	cmp	r4, #0
 8000bba:	d100      	bne.n	8000bbe <__aeabi_dmul+0x2ea>
 8000bbc:	e0b0      	b.n	8000d20 <__aeabi_dmul+0x44c>
 8000bbe:	0020      	movs	r0, r4
 8000bc0:	f000 fd20 	bl	8001604 <__clzsi2>
 8000bc4:	0001      	movs	r1, r0
 8000bc6:	0002      	movs	r2, r0
 8000bc8:	390b      	subs	r1, #11
 8000bca:	231d      	movs	r3, #29
 8000bcc:	0010      	movs	r0, r2
 8000bce:	1a5b      	subs	r3, r3, r1
 8000bd0:	0031      	movs	r1, r6
 8000bd2:	0035      	movs	r5, r6
 8000bd4:	3808      	subs	r0, #8
 8000bd6:	4084      	lsls	r4, r0
 8000bd8:	40d9      	lsrs	r1, r3
 8000bda:	4085      	lsls	r5, r0
 8000bdc:	430c      	orrs	r4, r1
 8000bde:	4826      	ldr	r0, [pc, #152]	; (8000c78 <__aeabi_dmul+0x3a4>)
 8000be0:	1a83      	subs	r3, r0, r2
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	2300      	movs	r3, #0
 8000be6:	4699      	mov	r9, r3
 8000be8:	469b      	mov	fp, r3
 8000bea:	e697      	b.n	800091c <__aeabi_dmul+0x48>
 8000bec:	0005      	movs	r5, r0
 8000bee:	4325      	orrs	r5, r4
 8000bf0:	d126      	bne.n	8000c40 <__aeabi_dmul+0x36c>
 8000bf2:	2208      	movs	r2, #8
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	2400      	movs	r4, #0
 8000bfa:	4691      	mov	r9, r2
 8000bfc:	469b      	mov	fp, r3
 8000bfe:	e68d      	b.n	800091c <__aeabi_dmul+0x48>
 8000c00:	4652      	mov	r2, sl
 8000c02:	9b00      	ldr	r3, [sp, #0]
 8000c04:	4332      	orrs	r2, r6
 8000c06:	d110      	bne.n	8000c2a <__aeabi_dmul+0x356>
 8000c08:	4915      	ldr	r1, [pc, #84]	; (8000c60 <__aeabi_dmul+0x38c>)
 8000c0a:	2600      	movs	r6, #0
 8000c0c:	468c      	mov	ip, r1
 8000c0e:	4463      	add	r3, ip
 8000c10:	4649      	mov	r1, r9
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	2302      	movs	r3, #2
 8000c16:	4319      	orrs	r1, r3
 8000c18:	4689      	mov	r9, r1
 8000c1a:	2002      	movs	r0, #2
 8000c1c:	e69d      	b.n	800095a <__aeabi_dmul+0x86>
 8000c1e:	465b      	mov	r3, fp
 8000c20:	9701      	str	r7, [sp, #4]
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d000      	beq.n	8000c28 <__aeabi_dmul+0x354>
 8000c26:	e6ad      	b.n	8000984 <__aeabi_dmul+0xb0>
 8000c28:	e6c3      	b.n	80009b2 <__aeabi_dmul+0xde>
 8000c2a:	4a0d      	ldr	r2, [pc, #52]	; (8000c60 <__aeabi_dmul+0x38c>)
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	4694      	mov	ip, r2
 8000c30:	4463      	add	r3, ip
 8000c32:	464a      	mov	r2, r9
 8000c34:	9300      	str	r3, [sp, #0]
 8000c36:	2303      	movs	r3, #3
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	4691      	mov	r9, r2
 8000c3c:	4652      	mov	r2, sl
 8000c3e:	e68c      	b.n	800095a <__aeabi_dmul+0x86>
 8000c40:	220c      	movs	r2, #12
 8000c42:	9300      	str	r3, [sp, #0]
 8000c44:	2303      	movs	r3, #3
 8000c46:	0005      	movs	r5, r0
 8000c48:	4691      	mov	r9, r2
 8000c4a:	469b      	mov	fp, r3
 8000c4c:	e666      	b.n	800091c <__aeabi_dmul+0x48>
 8000c4e:	2304      	movs	r3, #4
 8000c50:	4699      	mov	r9, r3
 8000c52:	2300      	movs	r3, #0
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	3301      	adds	r3, #1
 8000c58:	2400      	movs	r4, #0
 8000c5a:	469b      	mov	fp, r3
 8000c5c:	e65e      	b.n	800091c <__aeabi_dmul+0x48>
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	000007ff 	.word	0x000007ff
 8000c64:	fffffc01 	.word	0xfffffc01
 8000c68:	080033f0 	.word	0x080033f0
 8000c6c:	000003ff 	.word	0x000003ff
 8000c70:	feffffff 	.word	0xfeffffff
 8000c74:	000007fe 	.word	0x000007fe
 8000c78:	fffffc0d 	.word	0xfffffc0d
 8000c7c:	4649      	mov	r1, r9
 8000c7e:	2301      	movs	r3, #1
 8000c80:	4319      	orrs	r1, r3
 8000c82:	4689      	mov	r9, r1
 8000c84:	2600      	movs	r6, #0
 8000c86:	2001      	movs	r0, #1
 8000c88:	e667      	b.n	800095a <__aeabi_dmul+0x86>
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	2480      	movs	r4, #128	; 0x80
 8000c8e:	2500      	movs	r5, #0
 8000c90:	4a43      	ldr	r2, [pc, #268]	; (8000da0 <__aeabi_dmul+0x4cc>)
 8000c92:	9301      	str	r3, [sp, #4]
 8000c94:	0324      	lsls	r4, r4, #12
 8000c96:	e67e      	b.n	8000996 <__aeabi_dmul+0xc2>
 8000c98:	2001      	movs	r0, #1
 8000c9a:	1a40      	subs	r0, r0, r1
 8000c9c:	2838      	cmp	r0, #56	; 0x38
 8000c9e:	dd00      	ble.n	8000ca2 <__aeabi_dmul+0x3ce>
 8000ca0:	e676      	b.n	8000990 <__aeabi_dmul+0xbc>
 8000ca2:	281f      	cmp	r0, #31
 8000ca4:	dd5b      	ble.n	8000d5e <__aeabi_dmul+0x48a>
 8000ca6:	221f      	movs	r2, #31
 8000ca8:	0023      	movs	r3, r4
 8000caa:	4252      	negs	r2, r2
 8000cac:	1a51      	subs	r1, r2, r1
 8000cae:	40cb      	lsrs	r3, r1
 8000cb0:	0019      	movs	r1, r3
 8000cb2:	2820      	cmp	r0, #32
 8000cb4:	d003      	beq.n	8000cbe <__aeabi_dmul+0x3ea>
 8000cb6:	4a3b      	ldr	r2, [pc, #236]	; (8000da4 <__aeabi_dmul+0x4d0>)
 8000cb8:	4462      	add	r2, ip
 8000cba:	4094      	lsls	r4, r2
 8000cbc:	4325      	orrs	r5, r4
 8000cbe:	1e6a      	subs	r2, r5, #1
 8000cc0:	4195      	sbcs	r5, r2
 8000cc2:	002a      	movs	r2, r5
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	2107      	movs	r1, #7
 8000cc8:	000d      	movs	r5, r1
 8000cca:	2400      	movs	r4, #0
 8000ccc:	4015      	ands	r5, r2
 8000cce:	4211      	tst	r1, r2
 8000cd0:	d05b      	beq.n	8000d8a <__aeabi_dmul+0x4b6>
 8000cd2:	210f      	movs	r1, #15
 8000cd4:	2400      	movs	r4, #0
 8000cd6:	4011      	ands	r1, r2
 8000cd8:	2904      	cmp	r1, #4
 8000cda:	d053      	beq.n	8000d84 <__aeabi_dmul+0x4b0>
 8000cdc:	1d11      	adds	r1, r2, #4
 8000cde:	4291      	cmp	r1, r2
 8000ce0:	4192      	sbcs	r2, r2
 8000ce2:	4252      	negs	r2, r2
 8000ce4:	18a4      	adds	r4, r4, r2
 8000ce6:	000a      	movs	r2, r1
 8000ce8:	0223      	lsls	r3, r4, #8
 8000cea:	d54b      	bpl.n	8000d84 <__aeabi_dmul+0x4b0>
 8000cec:	2201      	movs	r2, #1
 8000cee:	2400      	movs	r4, #0
 8000cf0:	2500      	movs	r5, #0
 8000cf2:	e650      	b.n	8000996 <__aeabi_dmul+0xc2>
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	031b      	lsls	r3, r3, #12
 8000cf8:	421c      	tst	r4, r3
 8000cfa:	d009      	beq.n	8000d10 <__aeabi_dmul+0x43c>
 8000cfc:	421e      	tst	r6, r3
 8000cfe:	d107      	bne.n	8000d10 <__aeabi_dmul+0x43c>
 8000d00:	4333      	orrs	r3, r6
 8000d02:	031c      	lsls	r4, r3, #12
 8000d04:	4643      	mov	r3, r8
 8000d06:	0015      	movs	r5, r2
 8000d08:	0b24      	lsrs	r4, r4, #12
 8000d0a:	4a25      	ldr	r2, [pc, #148]	; (8000da0 <__aeabi_dmul+0x4cc>)
 8000d0c:	9301      	str	r3, [sp, #4]
 8000d0e:	e642      	b.n	8000996 <__aeabi_dmul+0xc2>
 8000d10:	2280      	movs	r2, #128	; 0x80
 8000d12:	0312      	lsls	r2, r2, #12
 8000d14:	4314      	orrs	r4, r2
 8000d16:	0324      	lsls	r4, r4, #12
 8000d18:	4a21      	ldr	r2, [pc, #132]	; (8000da0 <__aeabi_dmul+0x4cc>)
 8000d1a:	0b24      	lsrs	r4, r4, #12
 8000d1c:	9701      	str	r7, [sp, #4]
 8000d1e:	e63a      	b.n	8000996 <__aeabi_dmul+0xc2>
 8000d20:	f000 fc70 	bl	8001604 <__clzsi2>
 8000d24:	0001      	movs	r1, r0
 8000d26:	0002      	movs	r2, r0
 8000d28:	3115      	adds	r1, #21
 8000d2a:	3220      	adds	r2, #32
 8000d2c:	291c      	cmp	r1, #28
 8000d2e:	dc00      	bgt.n	8000d32 <__aeabi_dmul+0x45e>
 8000d30:	e74b      	b.n	8000bca <__aeabi_dmul+0x2f6>
 8000d32:	0034      	movs	r4, r6
 8000d34:	3808      	subs	r0, #8
 8000d36:	2500      	movs	r5, #0
 8000d38:	4084      	lsls	r4, r0
 8000d3a:	e750      	b.n	8000bde <__aeabi_dmul+0x30a>
 8000d3c:	f000 fc62 	bl	8001604 <__clzsi2>
 8000d40:	0003      	movs	r3, r0
 8000d42:	001a      	movs	r2, r3
 8000d44:	3215      	adds	r2, #21
 8000d46:	3020      	adds	r0, #32
 8000d48:	2a1c      	cmp	r2, #28
 8000d4a:	dc00      	bgt.n	8000d4e <__aeabi_dmul+0x47a>
 8000d4c:	e71e      	b.n	8000b8c <__aeabi_dmul+0x2b8>
 8000d4e:	4656      	mov	r6, sl
 8000d50:	3b08      	subs	r3, #8
 8000d52:	2200      	movs	r2, #0
 8000d54:	409e      	lsls	r6, r3
 8000d56:	e723      	b.n	8000ba0 <__aeabi_dmul+0x2cc>
 8000d58:	9b00      	ldr	r3, [sp, #0]
 8000d5a:	469c      	mov	ip, r3
 8000d5c:	e6e6      	b.n	8000b2c <__aeabi_dmul+0x258>
 8000d5e:	4912      	ldr	r1, [pc, #72]	; (8000da8 <__aeabi_dmul+0x4d4>)
 8000d60:	0022      	movs	r2, r4
 8000d62:	4461      	add	r1, ip
 8000d64:	002e      	movs	r6, r5
 8000d66:	408d      	lsls	r5, r1
 8000d68:	408a      	lsls	r2, r1
 8000d6a:	40c6      	lsrs	r6, r0
 8000d6c:	1e69      	subs	r1, r5, #1
 8000d6e:	418d      	sbcs	r5, r1
 8000d70:	4332      	orrs	r2, r6
 8000d72:	432a      	orrs	r2, r5
 8000d74:	40c4      	lsrs	r4, r0
 8000d76:	0753      	lsls	r3, r2, #29
 8000d78:	d0b6      	beq.n	8000ce8 <__aeabi_dmul+0x414>
 8000d7a:	210f      	movs	r1, #15
 8000d7c:	4011      	ands	r1, r2
 8000d7e:	2904      	cmp	r1, #4
 8000d80:	d1ac      	bne.n	8000cdc <__aeabi_dmul+0x408>
 8000d82:	e7b1      	b.n	8000ce8 <__aeabi_dmul+0x414>
 8000d84:	0765      	lsls	r5, r4, #29
 8000d86:	0264      	lsls	r4, r4, #9
 8000d88:	0b24      	lsrs	r4, r4, #12
 8000d8a:	08d2      	lsrs	r2, r2, #3
 8000d8c:	4315      	orrs	r5, r2
 8000d8e:	2200      	movs	r2, #0
 8000d90:	e601      	b.n	8000996 <__aeabi_dmul+0xc2>
 8000d92:	2280      	movs	r2, #128	; 0x80
 8000d94:	0312      	lsls	r2, r2, #12
 8000d96:	4314      	orrs	r4, r2
 8000d98:	0324      	lsls	r4, r4, #12
 8000d9a:	4a01      	ldr	r2, [pc, #4]	; (8000da0 <__aeabi_dmul+0x4cc>)
 8000d9c:	0b24      	lsrs	r4, r4, #12
 8000d9e:	e5fa      	b.n	8000996 <__aeabi_dmul+0xc2>
 8000da0:	000007ff 	.word	0x000007ff
 8000da4:	0000043e 	.word	0x0000043e
 8000da8:	0000041e 	.word	0x0000041e

08000dac <__aeabi_dsub>:
 8000dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dae:	4657      	mov	r7, sl
 8000db0:	464e      	mov	r6, r9
 8000db2:	4645      	mov	r5, r8
 8000db4:	46de      	mov	lr, fp
 8000db6:	b5e0      	push	{r5, r6, r7, lr}
 8000db8:	001e      	movs	r6, r3
 8000dba:	0017      	movs	r7, r2
 8000dbc:	004a      	lsls	r2, r1, #1
 8000dbe:	030b      	lsls	r3, r1, #12
 8000dc0:	0d52      	lsrs	r2, r2, #21
 8000dc2:	0a5b      	lsrs	r3, r3, #9
 8000dc4:	4690      	mov	r8, r2
 8000dc6:	0f42      	lsrs	r2, r0, #29
 8000dc8:	431a      	orrs	r2, r3
 8000dca:	0fcd      	lsrs	r5, r1, #31
 8000dcc:	4ccd      	ldr	r4, [pc, #820]	; (8001104 <__aeabi_dsub+0x358>)
 8000dce:	0331      	lsls	r1, r6, #12
 8000dd0:	00c3      	lsls	r3, r0, #3
 8000dd2:	4694      	mov	ip, r2
 8000dd4:	0070      	lsls	r0, r6, #1
 8000dd6:	0f7a      	lsrs	r2, r7, #29
 8000dd8:	0a49      	lsrs	r1, r1, #9
 8000dda:	00ff      	lsls	r7, r7, #3
 8000ddc:	469a      	mov	sl, r3
 8000dde:	46b9      	mov	r9, r7
 8000de0:	0d40      	lsrs	r0, r0, #21
 8000de2:	0ff6      	lsrs	r6, r6, #31
 8000de4:	4311      	orrs	r1, r2
 8000de6:	42a0      	cmp	r0, r4
 8000de8:	d100      	bne.n	8000dec <__aeabi_dsub+0x40>
 8000dea:	e0b1      	b.n	8000f50 <__aeabi_dsub+0x1a4>
 8000dec:	2201      	movs	r2, #1
 8000dee:	4056      	eors	r6, r2
 8000df0:	46b3      	mov	fp, r6
 8000df2:	42b5      	cmp	r5, r6
 8000df4:	d100      	bne.n	8000df8 <__aeabi_dsub+0x4c>
 8000df6:	e088      	b.n	8000f0a <__aeabi_dsub+0x15e>
 8000df8:	4642      	mov	r2, r8
 8000dfa:	1a12      	subs	r2, r2, r0
 8000dfc:	2a00      	cmp	r2, #0
 8000dfe:	dc00      	bgt.n	8000e02 <__aeabi_dsub+0x56>
 8000e00:	e0ae      	b.n	8000f60 <__aeabi_dsub+0x1b4>
 8000e02:	2800      	cmp	r0, #0
 8000e04:	d100      	bne.n	8000e08 <__aeabi_dsub+0x5c>
 8000e06:	e0c1      	b.n	8000f8c <__aeabi_dsub+0x1e0>
 8000e08:	48be      	ldr	r0, [pc, #760]	; (8001104 <__aeabi_dsub+0x358>)
 8000e0a:	4580      	cmp	r8, r0
 8000e0c:	d100      	bne.n	8000e10 <__aeabi_dsub+0x64>
 8000e0e:	e151      	b.n	80010b4 <__aeabi_dsub+0x308>
 8000e10:	2080      	movs	r0, #128	; 0x80
 8000e12:	0400      	lsls	r0, r0, #16
 8000e14:	4301      	orrs	r1, r0
 8000e16:	2a38      	cmp	r2, #56	; 0x38
 8000e18:	dd00      	ble.n	8000e1c <__aeabi_dsub+0x70>
 8000e1a:	e17b      	b.n	8001114 <__aeabi_dsub+0x368>
 8000e1c:	2a1f      	cmp	r2, #31
 8000e1e:	dd00      	ble.n	8000e22 <__aeabi_dsub+0x76>
 8000e20:	e1ee      	b.n	8001200 <__aeabi_dsub+0x454>
 8000e22:	2020      	movs	r0, #32
 8000e24:	003e      	movs	r6, r7
 8000e26:	1a80      	subs	r0, r0, r2
 8000e28:	000c      	movs	r4, r1
 8000e2a:	40d6      	lsrs	r6, r2
 8000e2c:	40d1      	lsrs	r1, r2
 8000e2e:	4087      	lsls	r7, r0
 8000e30:	4662      	mov	r2, ip
 8000e32:	4084      	lsls	r4, r0
 8000e34:	1a52      	subs	r2, r2, r1
 8000e36:	1e78      	subs	r0, r7, #1
 8000e38:	4187      	sbcs	r7, r0
 8000e3a:	4694      	mov	ip, r2
 8000e3c:	4334      	orrs	r4, r6
 8000e3e:	4327      	orrs	r7, r4
 8000e40:	1bdc      	subs	r4, r3, r7
 8000e42:	42a3      	cmp	r3, r4
 8000e44:	419b      	sbcs	r3, r3
 8000e46:	4662      	mov	r2, ip
 8000e48:	425b      	negs	r3, r3
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	4699      	mov	r9, r3
 8000e4e:	464b      	mov	r3, r9
 8000e50:	021b      	lsls	r3, r3, #8
 8000e52:	d400      	bmi.n	8000e56 <__aeabi_dsub+0xaa>
 8000e54:	e118      	b.n	8001088 <__aeabi_dsub+0x2dc>
 8000e56:	464b      	mov	r3, r9
 8000e58:	0258      	lsls	r0, r3, #9
 8000e5a:	0a43      	lsrs	r3, r0, #9
 8000e5c:	4699      	mov	r9, r3
 8000e5e:	464b      	mov	r3, r9
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d100      	bne.n	8000e66 <__aeabi_dsub+0xba>
 8000e64:	e137      	b.n	80010d6 <__aeabi_dsub+0x32a>
 8000e66:	4648      	mov	r0, r9
 8000e68:	f000 fbcc 	bl	8001604 <__clzsi2>
 8000e6c:	0001      	movs	r1, r0
 8000e6e:	3908      	subs	r1, #8
 8000e70:	2320      	movs	r3, #32
 8000e72:	0022      	movs	r2, r4
 8000e74:	4648      	mov	r0, r9
 8000e76:	1a5b      	subs	r3, r3, r1
 8000e78:	40da      	lsrs	r2, r3
 8000e7a:	4088      	lsls	r0, r1
 8000e7c:	408c      	lsls	r4, r1
 8000e7e:	4643      	mov	r3, r8
 8000e80:	4310      	orrs	r0, r2
 8000e82:	4588      	cmp	r8, r1
 8000e84:	dd00      	ble.n	8000e88 <__aeabi_dsub+0xdc>
 8000e86:	e136      	b.n	80010f6 <__aeabi_dsub+0x34a>
 8000e88:	1ac9      	subs	r1, r1, r3
 8000e8a:	1c4b      	adds	r3, r1, #1
 8000e8c:	2b1f      	cmp	r3, #31
 8000e8e:	dd00      	ble.n	8000e92 <__aeabi_dsub+0xe6>
 8000e90:	e0ea      	b.n	8001068 <__aeabi_dsub+0x2bc>
 8000e92:	2220      	movs	r2, #32
 8000e94:	0026      	movs	r6, r4
 8000e96:	1ad2      	subs	r2, r2, r3
 8000e98:	0001      	movs	r1, r0
 8000e9a:	4094      	lsls	r4, r2
 8000e9c:	40de      	lsrs	r6, r3
 8000e9e:	40d8      	lsrs	r0, r3
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	4091      	lsls	r1, r2
 8000ea4:	1e62      	subs	r2, r4, #1
 8000ea6:	4194      	sbcs	r4, r2
 8000ea8:	4681      	mov	r9, r0
 8000eaa:	4698      	mov	r8, r3
 8000eac:	4331      	orrs	r1, r6
 8000eae:	430c      	orrs	r4, r1
 8000eb0:	0763      	lsls	r3, r4, #29
 8000eb2:	d009      	beq.n	8000ec8 <__aeabi_dsub+0x11c>
 8000eb4:	230f      	movs	r3, #15
 8000eb6:	4023      	ands	r3, r4
 8000eb8:	2b04      	cmp	r3, #4
 8000eba:	d005      	beq.n	8000ec8 <__aeabi_dsub+0x11c>
 8000ebc:	1d23      	adds	r3, r4, #4
 8000ebe:	42a3      	cmp	r3, r4
 8000ec0:	41a4      	sbcs	r4, r4
 8000ec2:	4264      	negs	r4, r4
 8000ec4:	44a1      	add	r9, r4
 8000ec6:	001c      	movs	r4, r3
 8000ec8:	464b      	mov	r3, r9
 8000eca:	021b      	lsls	r3, r3, #8
 8000ecc:	d400      	bmi.n	8000ed0 <__aeabi_dsub+0x124>
 8000ece:	e0de      	b.n	800108e <__aeabi_dsub+0x2e2>
 8000ed0:	4641      	mov	r1, r8
 8000ed2:	4b8c      	ldr	r3, [pc, #560]	; (8001104 <__aeabi_dsub+0x358>)
 8000ed4:	3101      	adds	r1, #1
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	d100      	bne.n	8000edc <__aeabi_dsub+0x130>
 8000eda:	e0e7      	b.n	80010ac <__aeabi_dsub+0x300>
 8000edc:	464b      	mov	r3, r9
 8000ede:	488a      	ldr	r0, [pc, #552]	; (8001108 <__aeabi_dsub+0x35c>)
 8000ee0:	08e4      	lsrs	r4, r4, #3
 8000ee2:	4003      	ands	r3, r0
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	0549      	lsls	r1, r1, #21
 8000ee8:	075b      	lsls	r3, r3, #29
 8000eea:	0240      	lsls	r0, r0, #9
 8000eec:	4323      	orrs	r3, r4
 8000eee:	0d4a      	lsrs	r2, r1, #21
 8000ef0:	0b04      	lsrs	r4, r0, #12
 8000ef2:	0512      	lsls	r2, r2, #20
 8000ef4:	07ed      	lsls	r5, r5, #31
 8000ef6:	4322      	orrs	r2, r4
 8000ef8:	432a      	orrs	r2, r5
 8000efa:	0018      	movs	r0, r3
 8000efc:	0011      	movs	r1, r2
 8000efe:	bcf0      	pop	{r4, r5, r6, r7}
 8000f00:	46bb      	mov	fp, r7
 8000f02:	46b2      	mov	sl, r6
 8000f04:	46a9      	mov	r9, r5
 8000f06:	46a0      	mov	r8, r4
 8000f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f0a:	4642      	mov	r2, r8
 8000f0c:	1a12      	subs	r2, r2, r0
 8000f0e:	2a00      	cmp	r2, #0
 8000f10:	dd52      	ble.n	8000fb8 <__aeabi_dsub+0x20c>
 8000f12:	2800      	cmp	r0, #0
 8000f14:	d100      	bne.n	8000f18 <__aeabi_dsub+0x16c>
 8000f16:	e09c      	b.n	8001052 <__aeabi_dsub+0x2a6>
 8000f18:	45a0      	cmp	r8, r4
 8000f1a:	d100      	bne.n	8000f1e <__aeabi_dsub+0x172>
 8000f1c:	e0ca      	b.n	80010b4 <__aeabi_dsub+0x308>
 8000f1e:	2080      	movs	r0, #128	; 0x80
 8000f20:	0400      	lsls	r0, r0, #16
 8000f22:	4301      	orrs	r1, r0
 8000f24:	2a38      	cmp	r2, #56	; 0x38
 8000f26:	dd00      	ble.n	8000f2a <__aeabi_dsub+0x17e>
 8000f28:	e149      	b.n	80011be <__aeabi_dsub+0x412>
 8000f2a:	2a1f      	cmp	r2, #31
 8000f2c:	dc00      	bgt.n	8000f30 <__aeabi_dsub+0x184>
 8000f2e:	e197      	b.n	8001260 <__aeabi_dsub+0x4b4>
 8000f30:	0010      	movs	r0, r2
 8000f32:	000e      	movs	r6, r1
 8000f34:	3820      	subs	r0, #32
 8000f36:	40c6      	lsrs	r6, r0
 8000f38:	2a20      	cmp	r2, #32
 8000f3a:	d004      	beq.n	8000f46 <__aeabi_dsub+0x19a>
 8000f3c:	2040      	movs	r0, #64	; 0x40
 8000f3e:	1a82      	subs	r2, r0, r2
 8000f40:	4091      	lsls	r1, r2
 8000f42:	430f      	orrs	r7, r1
 8000f44:	46b9      	mov	r9, r7
 8000f46:	464c      	mov	r4, r9
 8000f48:	1e62      	subs	r2, r4, #1
 8000f4a:	4194      	sbcs	r4, r2
 8000f4c:	4334      	orrs	r4, r6
 8000f4e:	e13a      	b.n	80011c6 <__aeabi_dsub+0x41a>
 8000f50:	000a      	movs	r2, r1
 8000f52:	433a      	orrs	r2, r7
 8000f54:	d028      	beq.n	8000fa8 <__aeabi_dsub+0x1fc>
 8000f56:	46b3      	mov	fp, r6
 8000f58:	42b5      	cmp	r5, r6
 8000f5a:	d02b      	beq.n	8000fb4 <__aeabi_dsub+0x208>
 8000f5c:	4a6b      	ldr	r2, [pc, #428]	; (800110c <__aeabi_dsub+0x360>)
 8000f5e:	4442      	add	r2, r8
 8000f60:	2a00      	cmp	r2, #0
 8000f62:	d05d      	beq.n	8001020 <__aeabi_dsub+0x274>
 8000f64:	4642      	mov	r2, r8
 8000f66:	4644      	mov	r4, r8
 8000f68:	1a82      	subs	r2, r0, r2
 8000f6a:	2c00      	cmp	r4, #0
 8000f6c:	d000      	beq.n	8000f70 <__aeabi_dsub+0x1c4>
 8000f6e:	e0f5      	b.n	800115c <__aeabi_dsub+0x3b0>
 8000f70:	4665      	mov	r5, ip
 8000f72:	431d      	orrs	r5, r3
 8000f74:	d100      	bne.n	8000f78 <__aeabi_dsub+0x1cc>
 8000f76:	e19c      	b.n	80012b2 <__aeabi_dsub+0x506>
 8000f78:	1e55      	subs	r5, r2, #1
 8000f7a:	2a01      	cmp	r2, #1
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_dsub+0x1d4>
 8000f7e:	e1fb      	b.n	8001378 <__aeabi_dsub+0x5cc>
 8000f80:	4c60      	ldr	r4, [pc, #384]	; (8001104 <__aeabi_dsub+0x358>)
 8000f82:	42a2      	cmp	r2, r4
 8000f84:	d100      	bne.n	8000f88 <__aeabi_dsub+0x1dc>
 8000f86:	e1bd      	b.n	8001304 <__aeabi_dsub+0x558>
 8000f88:	002a      	movs	r2, r5
 8000f8a:	e0f0      	b.n	800116e <__aeabi_dsub+0x3c2>
 8000f8c:	0008      	movs	r0, r1
 8000f8e:	4338      	orrs	r0, r7
 8000f90:	d100      	bne.n	8000f94 <__aeabi_dsub+0x1e8>
 8000f92:	e0c3      	b.n	800111c <__aeabi_dsub+0x370>
 8000f94:	1e50      	subs	r0, r2, #1
 8000f96:	2a01      	cmp	r2, #1
 8000f98:	d100      	bne.n	8000f9c <__aeabi_dsub+0x1f0>
 8000f9a:	e1a8      	b.n	80012ee <__aeabi_dsub+0x542>
 8000f9c:	4c59      	ldr	r4, [pc, #356]	; (8001104 <__aeabi_dsub+0x358>)
 8000f9e:	42a2      	cmp	r2, r4
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_dsub+0x1f8>
 8000fa2:	e087      	b.n	80010b4 <__aeabi_dsub+0x308>
 8000fa4:	0002      	movs	r2, r0
 8000fa6:	e736      	b.n	8000e16 <__aeabi_dsub+0x6a>
 8000fa8:	2201      	movs	r2, #1
 8000faa:	4056      	eors	r6, r2
 8000fac:	46b3      	mov	fp, r6
 8000fae:	42b5      	cmp	r5, r6
 8000fb0:	d000      	beq.n	8000fb4 <__aeabi_dsub+0x208>
 8000fb2:	e721      	b.n	8000df8 <__aeabi_dsub+0x4c>
 8000fb4:	4a55      	ldr	r2, [pc, #340]	; (800110c <__aeabi_dsub+0x360>)
 8000fb6:	4442      	add	r2, r8
 8000fb8:	2a00      	cmp	r2, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_dsub+0x212>
 8000fbc:	e0b5      	b.n	800112a <__aeabi_dsub+0x37e>
 8000fbe:	4642      	mov	r2, r8
 8000fc0:	4644      	mov	r4, r8
 8000fc2:	1a82      	subs	r2, r0, r2
 8000fc4:	2c00      	cmp	r4, #0
 8000fc6:	d100      	bne.n	8000fca <__aeabi_dsub+0x21e>
 8000fc8:	e138      	b.n	800123c <__aeabi_dsub+0x490>
 8000fca:	4e4e      	ldr	r6, [pc, #312]	; (8001104 <__aeabi_dsub+0x358>)
 8000fcc:	42b0      	cmp	r0, r6
 8000fce:	d100      	bne.n	8000fd2 <__aeabi_dsub+0x226>
 8000fd0:	e1de      	b.n	8001390 <__aeabi_dsub+0x5e4>
 8000fd2:	2680      	movs	r6, #128	; 0x80
 8000fd4:	4664      	mov	r4, ip
 8000fd6:	0436      	lsls	r6, r6, #16
 8000fd8:	4334      	orrs	r4, r6
 8000fda:	46a4      	mov	ip, r4
 8000fdc:	2a38      	cmp	r2, #56	; 0x38
 8000fde:	dd00      	ble.n	8000fe2 <__aeabi_dsub+0x236>
 8000fe0:	e196      	b.n	8001310 <__aeabi_dsub+0x564>
 8000fe2:	2a1f      	cmp	r2, #31
 8000fe4:	dd00      	ble.n	8000fe8 <__aeabi_dsub+0x23c>
 8000fe6:	e224      	b.n	8001432 <__aeabi_dsub+0x686>
 8000fe8:	2620      	movs	r6, #32
 8000fea:	1ab4      	subs	r4, r6, r2
 8000fec:	46a2      	mov	sl, r4
 8000fee:	4664      	mov	r4, ip
 8000ff0:	4656      	mov	r6, sl
 8000ff2:	40b4      	lsls	r4, r6
 8000ff4:	46a1      	mov	r9, r4
 8000ff6:	001c      	movs	r4, r3
 8000ff8:	464e      	mov	r6, r9
 8000ffa:	40d4      	lsrs	r4, r2
 8000ffc:	4326      	orrs	r6, r4
 8000ffe:	0034      	movs	r4, r6
 8001000:	4656      	mov	r6, sl
 8001002:	40b3      	lsls	r3, r6
 8001004:	1e5e      	subs	r6, r3, #1
 8001006:	41b3      	sbcs	r3, r6
 8001008:	431c      	orrs	r4, r3
 800100a:	4663      	mov	r3, ip
 800100c:	40d3      	lsrs	r3, r2
 800100e:	18c9      	adds	r1, r1, r3
 8001010:	19e4      	adds	r4, r4, r7
 8001012:	42bc      	cmp	r4, r7
 8001014:	41bf      	sbcs	r7, r7
 8001016:	427f      	negs	r7, r7
 8001018:	46b9      	mov	r9, r7
 800101a:	4680      	mov	r8, r0
 800101c:	4489      	add	r9, r1
 800101e:	e0d8      	b.n	80011d2 <__aeabi_dsub+0x426>
 8001020:	4640      	mov	r0, r8
 8001022:	4c3b      	ldr	r4, [pc, #236]	; (8001110 <__aeabi_dsub+0x364>)
 8001024:	3001      	adds	r0, #1
 8001026:	4220      	tst	r0, r4
 8001028:	d000      	beq.n	800102c <__aeabi_dsub+0x280>
 800102a:	e0b4      	b.n	8001196 <__aeabi_dsub+0x3ea>
 800102c:	4640      	mov	r0, r8
 800102e:	2800      	cmp	r0, #0
 8001030:	d000      	beq.n	8001034 <__aeabi_dsub+0x288>
 8001032:	e144      	b.n	80012be <__aeabi_dsub+0x512>
 8001034:	4660      	mov	r0, ip
 8001036:	4318      	orrs	r0, r3
 8001038:	d100      	bne.n	800103c <__aeabi_dsub+0x290>
 800103a:	e190      	b.n	800135e <__aeabi_dsub+0x5b2>
 800103c:	0008      	movs	r0, r1
 800103e:	4338      	orrs	r0, r7
 8001040:	d000      	beq.n	8001044 <__aeabi_dsub+0x298>
 8001042:	e1aa      	b.n	800139a <__aeabi_dsub+0x5ee>
 8001044:	4661      	mov	r1, ip
 8001046:	08db      	lsrs	r3, r3, #3
 8001048:	0749      	lsls	r1, r1, #29
 800104a:	430b      	orrs	r3, r1
 800104c:	4661      	mov	r1, ip
 800104e:	08cc      	lsrs	r4, r1, #3
 8001050:	e027      	b.n	80010a2 <__aeabi_dsub+0x2f6>
 8001052:	0008      	movs	r0, r1
 8001054:	4338      	orrs	r0, r7
 8001056:	d061      	beq.n	800111c <__aeabi_dsub+0x370>
 8001058:	1e50      	subs	r0, r2, #1
 800105a:	2a01      	cmp	r2, #1
 800105c:	d100      	bne.n	8001060 <__aeabi_dsub+0x2b4>
 800105e:	e139      	b.n	80012d4 <__aeabi_dsub+0x528>
 8001060:	42a2      	cmp	r2, r4
 8001062:	d027      	beq.n	80010b4 <__aeabi_dsub+0x308>
 8001064:	0002      	movs	r2, r0
 8001066:	e75d      	b.n	8000f24 <__aeabi_dsub+0x178>
 8001068:	0002      	movs	r2, r0
 800106a:	391f      	subs	r1, #31
 800106c:	40ca      	lsrs	r2, r1
 800106e:	0011      	movs	r1, r2
 8001070:	2b20      	cmp	r3, #32
 8001072:	d003      	beq.n	800107c <__aeabi_dsub+0x2d0>
 8001074:	2240      	movs	r2, #64	; 0x40
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	4098      	lsls	r0, r3
 800107a:	4304      	orrs	r4, r0
 800107c:	1e63      	subs	r3, r4, #1
 800107e:	419c      	sbcs	r4, r3
 8001080:	2300      	movs	r3, #0
 8001082:	4699      	mov	r9, r3
 8001084:	4698      	mov	r8, r3
 8001086:	430c      	orrs	r4, r1
 8001088:	0763      	lsls	r3, r4, #29
 800108a:	d000      	beq.n	800108e <__aeabi_dsub+0x2e2>
 800108c:	e712      	b.n	8000eb4 <__aeabi_dsub+0x108>
 800108e:	464b      	mov	r3, r9
 8001090:	464a      	mov	r2, r9
 8001092:	08e4      	lsrs	r4, r4, #3
 8001094:	075b      	lsls	r3, r3, #29
 8001096:	4323      	orrs	r3, r4
 8001098:	08d4      	lsrs	r4, r2, #3
 800109a:	4642      	mov	r2, r8
 800109c:	4919      	ldr	r1, [pc, #100]	; (8001104 <__aeabi_dsub+0x358>)
 800109e:	428a      	cmp	r2, r1
 80010a0:	d00e      	beq.n	80010c0 <__aeabi_dsub+0x314>
 80010a2:	0324      	lsls	r4, r4, #12
 80010a4:	0552      	lsls	r2, r2, #21
 80010a6:	0b24      	lsrs	r4, r4, #12
 80010a8:	0d52      	lsrs	r2, r2, #21
 80010aa:	e722      	b.n	8000ef2 <__aeabi_dsub+0x146>
 80010ac:	000a      	movs	r2, r1
 80010ae:	2400      	movs	r4, #0
 80010b0:	2300      	movs	r3, #0
 80010b2:	e71e      	b.n	8000ef2 <__aeabi_dsub+0x146>
 80010b4:	08db      	lsrs	r3, r3, #3
 80010b6:	4662      	mov	r2, ip
 80010b8:	0752      	lsls	r2, r2, #29
 80010ba:	4313      	orrs	r3, r2
 80010bc:	4662      	mov	r2, ip
 80010be:	08d4      	lsrs	r4, r2, #3
 80010c0:	001a      	movs	r2, r3
 80010c2:	4322      	orrs	r2, r4
 80010c4:	d100      	bne.n	80010c8 <__aeabi_dsub+0x31c>
 80010c6:	e1fc      	b.n	80014c2 <__aeabi_dsub+0x716>
 80010c8:	2280      	movs	r2, #128	; 0x80
 80010ca:	0312      	lsls	r2, r2, #12
 80010cc:	4314      	orrs	r4, r2
 80010ce:	0324      	lsls	r4, r4, #12
 80010d0:	4a0c      	ldr	r2, [pc, #48]	; (8001104 <__aeabi_dsub+0x358>)
 80010d2:	0b24      	lsrs	r4, r4, #12
 80010d4:	e70d      	b.n	8000ef2 <__aeabi_dsub+0x146>
 80010d6:	0020      	movs	r0, r4
 80010d8:	f000 fa94 	bl	8001604 <__clzsi2>
 80010dc:	0001      	movs	r1, r0
 80010de:	3118      	adds	r1, #24
 80010e0:	291f      	cmp	r1, #31
 80010e2:	dc00      	bgt.n	80010e6 <__aeabi_dsub+0x33a>
 80010e4:	e6c4      	b.n	8000e70 <__aeabi_dsub+0xc4>
 80010e6:	3808      	subs	r0, #8
 80010e8:	4084      	lsls	r4, r0
 80010ea:	4643      	mov	r3, r8
 80010ec:	0020      	movs	r0, r4
 80010ee:	2400      	movs	r4, #0
 80010f0:	4588      	cmp	r8, r1
 80010f2:	dc00      	bgt.n	80010f6 <__aeabi_dsub+0x34a>
 80010f4:	e6c8      	b.n	8000e88 <__aeabi_dsub+0xdc>
 80010f6:	4a04      	ldr	r2, [pc, #16]	; (8001108 <__aeabi_dsub+0x35c>)
 80010f8:	1a5b      	subs	r3, r3, r1
 80010fa:	4010      	ands	r0, r2
 80010fc:	4698      	mov	r8, r3
 80010fe:	4681      	mov	r9, r0
 8001100:	e6d6      	b.n	8000eb0 <__aeabi_dsub+0x104>
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	000007ff 	.word	0x000007ff
 8001108:	ff7fffff 	.word	0xff7fffff
 800110c:	fffff801 	.word	0xfffff801
 8001110:	000007fe 	.word	0x000007fe
 8001114:	430f      	orrs	r7, r1
 8001116:	1e7a      	subs	r2, r7, #1
 8001118:	4197      	sbcs	r7, r2
 800111a:	e691      	b.n	8000e40 <__aeabi_dsub+0x94>
 800111c:	4661      	mov	r1, ip
 800111e:	08db      	lsrs	r3, r3, #3
 8001120:	0749      	lsls	r1, r1, #29
 8001122:	430b      	orrs	r3, r1
 8001124:	4661      	mov	r1, ip
 8001126:	08cc      	lsrs	r4, r1, #3
 8001128:	e7b8      	b.n	800109c <__aeabi_dsub+0x2f0>
 800112a:	4640      	mov	r0, r8
 800112c:	4cd3      	ldr	r4, [pc, #844]	; (800147c <__aeabi_dsub+0x6d0>)
 800112e:	3001      	adds	r0, #1
 8001130:	4220      	tst	r0, r4
 8001132:	d000      	beq.n	8001136 <__aeabi_dsub+0x38a>
 8001134:	e0a2      	b.n	800127c <__aeabi_dsub+0x4d0>
 8001136:	4640      	mov	r0, r8
 8001138:	2800      	cmp	r0, #0
 800113a:	d000      	beq.n	800113e <__aeabi_dsub+0x392>
 800113c:	e101      	b.n	8001342 <__aeabi_dsub+0x596>
 800113e:	4660      	mov	r0, ip
 8001140:	4318      	orrs	r0, r3
 8001142:	d100      	bne.n	8001146 <__aeabi_dsub+0x39a>
 8001144:	e15e      	b.n	8001404 <__aeabi_dsub+0x658>
 8001146:	0008      	movs	r0, r1
 8001148:	4338      	orrs	r0, r7
 800114a:	d000      	beq.n	800114e <__aeabi_dsub+0x3a2>
 800114c:	e15f      	b.n	800140e <__aeabi_dsub+0x662>
 800114e:	4661      	mov	r1, ip
 8001150:	08db      	lsrs	r3, r3, #3
 8001152:	0749      	lsls	r1, r1, #29
 8001154:	430b      	orrs	r3, r1
 8001156:	4661      	mov	r1, ip
 8001158:	08cc      	lsrs	r4, r1, #3
 800115a:	e7a2      	b.n	80010a2 <__aeabi_dsub+0x2f6>
 800115c:	4dc8      	ldr	r5, [pc, #800]	; (8001480 <__aeabi_dsub+0x6d4>)
 800115e:	42a8      	cmp	r0, r5
 8001160:	d100      	bne.n	8001164 <__aeabi_dsub+0x3b8>
 8001162:	e0cf      	b.n	8001304 <__aeabi_dsub+0x558>
 8001164:	2580      	movs	r5, #128	; 0x80
 8001166:	4664      	mov	r4, ip
 8001168:	042d      	lsls	r5, r5, #16
 800116a:	432c      	orrs	r4, r5
 800116c:	46a4      	mov	ip, r4
 800116e:	2a38      	cmp	r2, #56	; 0x38
 8001170:	dc56      	bgt.n	8001220 <__aeabi_dsub+0x474>
 8001172:	2a1f      	cmp	r2, #31
 8001174:	dd00      	ble.n	8001178 <__aeabi_dsub+0x3cc>
 8001176:	e0d1      	b.n	800131c <__aeabi_dsub+0x570>
 8001178:	2520      	movs	r5, #32
 800117a:	001e      	movs	r6, r3
 800117c:	1aad      	subs	r5, r5, r2
 800117e:	4664      	mov	r4, ip
 8001180:	40ab      	lsls	r3, r5
 8001182:	40ac      	lsls	r4, r5
 8001184:	40d6      	lsrs	r6, r2
 8001186:	1e5d      	subs	r5, r3, #1
 8001188:	41ab      	sbcs	r3, r5
 800118a:	4334      	orrs	r4, r6
 800118c:	4323      	orrs	r3, r4
 800118e:	4664      	mov	r4, ip
 8001190:	40d4      	lsrs	r4, r2
 8001192:	1b09      	subs	r1, r1, r4
 8001194:	e049      	b.n	800122a <__aeabi_dsub+0x47e>
 8001196:	4660      	mov	r0, ip
 8001198:	1bdc      	subs	r4, r3, r7
 800119a:	1a46      	subs	r6, r0, r1
 800119c:	42a3      	cmp	r3, r4
 800119e:	4180      	sbcs	r0, r0
 80011a0:	4240      	negs	r0, r0
 80011a2:	4681      	mov	r9, r0
 80011a4:	0030      	movs	r0, r6
 80011a6:	464e      	mov	r6, r9
 80011a8:	1b80      	subs	r0, r0, r6
 80011aa:	4681      	mov	r9, r0
 80011ac:	0200      	lsls	r0, r0, #8
 80011ae:	d476      	bmi.n	800129e <__aeabi_dsub+0x4f2>
 80011b0:	464b      	mov	r3, r9
 80011b2:	4323      	orrs	r3, r4
 80011b4:	d000      	beq.n	80011b8 <__aeabi_dsub+0x40c>
 80011b6:	e652      	b.n	8000e5e <__aeabi_dsub+0xb2>
 80011b8:	2400      	movs	r4, #0
 80011ba:	2500      	movs	r5, #0
 80011bc:	e771      	b.n	80010a2 <__aeabi_dsub+0x2f6>
 80011be:	4339      	orrs	r1, r7
 80011c0:	000c      	movs	r4, r1
 80011c2:	1e62      	subs	r2, r4, #1
 80011c4:	4194      	sbcs	r4, r2
 80011c6:	18e4      	adds	r4, r4, r3
 80011c8:	429c      	cmp	r4, r3
 80011ca:	419b      	sbcs	r3, r3
 80011cc:	425b      	negs	r3, r3
 80011ce:	4463      	add	r3, ip
 80011d0:	4699      	mov	r9, r3
 80011d2:	464b      	mov	r3, r9
 80011d4:	021b      	lsls	r3, r3, #8
 80011d6:	d400      	bmi.n	80011da <__aeabi_dsub+0x42e>
 80011d8:	e756      	b.n	8001088 <__aeabi_dsub+0x2dc>
 80011da:	2301      	movs	r3, #1
 80011dc:	469c      	mov	ip, r3
 80011de:	4ba8      	ldr	r3, [pc, #672]	; (8001480 <__aeabi_dsub+0x6d4>)
 80011e0:	44e0      	add	r8, ip
 80011e2:	4598      	cmp	r8, r3
 80011e4:	d038      	beq.n	8001258 <__aeabi_dsub+0x4ac>
 80011e6:	464b      	mov	r3, r9
 80011e8:	48a6      	ldr	r0, [pc, #664]	; (8001484 <__aeabi_dsub+0x6d8>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	4003      	ands	r3, r0
 80011ee:	0018      	movs	r0, r3
 80011f0:	0863      	lsrs	r3, r4, #1
 80011f2:	4014      	ands	r4, r2
 80011f4:	431c      	orrs	r4, r3
 80011f6:	07c3      	lsls	r3, r0, #31
 80011f8:	431c      	orrs	r4, r3
 80011fa:	0843      	lsrs	r3, r0, #1
 80011fc:	4699      	mov	r9, r3
 80011fe:	e657      	b.n	8000eb0 <__aeabi_dsub+0x104>
 8001200:	0010      	movs	r0, r2
 8001202:	000e      	movs	r6, r1
 8001204:	3820      	subs	r0, #32
 8001206:	40c6      	lsrs	r6, r0
 8001208:	2a20      	cmp	r2, #32
 800120a:	d004      	beq.n	8001216 <__aeabi_dsub+0x46a>
 800120c:	2040      	movs	r0, #64	; 0x40
 800120e:	1a82      	subs	r2, r0, r2
 8001210:	4091      	lsls	r1, r2
 8001212:	430f      	orrs	r7, r1
 8001214:	46b9      	mov	r9, r7
 8001216:	464f      	mov	r7, r9
 8001218:	1e7a      	subs	r2, r7, #1
 800121a:	4197      	sbcs	r7, r2
 800121c:	4337      	orrs	r7, r6
 800121e:	e60f      	b.n	8000e40 <__aeabi_dsub+0x94>
 8001220:	4662      	mov	r2, ip
 8001222:	431a      	orrs	r2, r3
 8001224:	0013      	movs	r3, r2
 8001226:	1e5a      	subs	r2, r3, #1
 8001228:	4193      	sbcs	r3, r2
 800122a:	1afc      	subs	r4, r7, r3
 800122c:	42a7      	cmp	r7, r4
 800122e:	41bf      	sbcs	r7, r7
 8001230:	427f      	negs	r7, r7
 8001232:	1bcb      	subs	r3, r1, r7
 8001234:	4699      	mov	r9, r3
 8001236:	465d      	mov	r5, fp
 8001238:	4680      	mov	r8, r0
 800123a:	e608      	b.n	8000e4e <__aeabi_dsub+0xa2>
 800123c:	4666      	mov	r6, ip
 800123e:	431e      	orrs	r6, r3
 8001240:	d100      	bne.n	8001244 <__aeabi_dsub+0x498>
 8001242:	e0be      	b.n	80013c2 <__aeabi_dsub+0x616>
 8001244:	1e56      	subs	r6, r2, #1
 8001246:	2a01      	cmp	r2, #1
 8001248:	d100      	bne.n	800124c <__aeabi_dsub+0x4a0>
 800124a:	e109      	b.n	8001460 <__aeabi_dsub+0x6b4>
 800124c:	4c8c      	ldr	r4, [pc, #560]	; (8001480 <__aeabi_dsub+0x6d4>)
 800124e:	42a2      	cmp	r2, r4
 8001250:	d100      	bne.n	8001254 <__aeabi_dsub+0x4a8>
 8001252:	e119      	b.n	8001488 <__aeabi_dsub+0x6dc>
 8001254:	0032      	movs	r2, r6
 8001256:	e6c1      	b.n	8000fdc <__aeabi_dsub+0x230>
 8001258:	4642      	mov	r2, r8
 800125a:	2400      	movs	r4, #0
 800125c:	2300      	movs	r3, #0
 800125e:	e648      	b.n	8000ef2 <__aeabi_dsub+0x146>
 8001260:	2020      	movs	r0, #32
 8001262:	000c      	movs	r4, r1
 8001264:	1a80      	subs	r0, r0, r2
 8001266:	003e      	movs	r6, r7
 8001268:	4087      	lsls	r7, r0
 800126a:	4084      	lsls	r4, r0
 800126c:	40d6      	lsrs	r6, r2
 800126e:	1e78      	subs	r0, r7, #1
 8001270:	4187      	sbcs	r7, r0
 8001272:	40d1      	lsrs	r1, r2
 8001274:	4334      	orrs	r4, r6
 8001276:	433c      	orrs	r4, r7
 8001278:	448c      	add	ip, r1
 800127a:	e7a4      	b.n	80011c6 <__aeabi_dsub+0x41a>
 800127c:	4a80      	ldr	r2, [pc, #512]	; (8001480 <__aeabi_dsub+0x6d4>)
 800127e:	4290      	cmp	r0, r2
 8001280:	d100      	bne.n	8001284 <__aeabi_dsub+0x4d8>
 8001282:	e0e9      	b.n	8001458 <__aeabi_dsub+0x6ac>
 8001284:	19df      	adds	r7, r3, r7
 8001286:	429f      	cmp	r7, r3
 8001288:	419b      	sbcs	r3, r3
 800128a:	4461      	add	r1, ip
 800128c:	425b      	negs	r3, r3
 800128e:	18c9      	adds	r1, r1, r3
 8001290:	07cc      	lsls	r4, r1, #31
 8001292:	087f      	lsrs	r7, r7, #1
 8001294:	084b      	lsrs	r3, r1, #1
 8001296:	4699      	mov	r9, r3
 8001298:	4680      	mov	r8, r0
 800129a:	433c      	orrs	r4, r7
 800129c:	e6f4      	b.n	8001088 <__aeabi_dsub+0x2dc>
 800129e:	1afc      	subs	r4, r7, r3
 80012a0:	42a7      	cmp	r7, r4
 80012a2:	41bf      	sbcs	r7, r7
 80012a4:	4663      	mov	r3, ip
 80012a6:	427f      	negs	r7, r7
 80012a8:	1ac9      	subs	r1, r1, r3
 80012aa:	1bcb      	subs	r3, r1, r7
 80012ac:	4699      	mov	r9, r3
 80012ae:	465d      	mov	r5, fp
 80012b0:	e5d5      	b.n	8000e5e <__aeabi_dsub+0xb2>
 80012b2:	08ff      	lsrs	r7, r7, #3
 80012b4:	074b      	lsls	r3, r1, #29
 80012b6:	465d      	mov	r5, fp
 80012b8:	433b      	orrs	r3, r7
 80012ba:	08cc      	lsrs	r4, r1, #3
 80012bc:	e6ee      	b.n	800109c <__aeabi_dsub+0x2f0>
 80012be:	4662      	mov	r2, ip
 80012c0:	431a      	orrs	r2, r3
 80012c2:	d000      	beq.n	80012c6 <__aeabi_dsub+0x51a>
 80012c4:	e082      	b.n	80013cc <__aeabi_dsub+0x620>
 80012c6:	000b      	movs	r3, r1
 80012c8:	433b      	orrs	r3, r7
 80012ca:	d11b      	bne.n	8001304 <__aeabi_dsub+0x558>
 80012cc:	2480      	movs	r4, #128	; 0x80
 80012ce:	2500      	movs	r5, #0
 80012d0:	0324      	lsls	r4, r4, #12
 80012d2:	e6f9      	b.n	80010c8 <__aeabi_dsub+0x31c>
 80012d4:	19dc      	adds	r4, r3, r7
 80012d6:	429c      	cmp	r4, r3
 80012d8:	419b      	sbcs	r3, r3
 80012da:	4461      	add	r1, ip
 80012dc:	4689      	mov	r9, r1
 80012de:	425b      	negs	r3, r3
 80012e0:	4499      	add	r9, r3
 80012e2:	464b      	mov	r3, r9
 80012e4:	021b      	lsls	r3, r3, #8
 80012e6:	d444      	bmi.n	8001372 <__aeabi_dsub+0x5c6>
 80012e8:	2301      	movs	r3, #1
 80012ea:	4698      	mov	r8, r3
 80012ec:	e6cc      	b.n	8001088 <__aeabi_dsub+0x2dc>
 80012ee:	1bdc      	subs	r4, r3, r7
 80012f0:	4662      	mov	r2, ip
 80012f2:	42a3      	cmp	r3, r4
 80012f4:	419b      	sbcs	r3, r3
 80012f6:	1a51      	subs	r1, r2, r1
 80012f8:	425b      	negs	r3, r3
 80012fa:	1acb      	subs	r3, r1, r3
 80012fc:	4699      	mov	r9, r3
 80012fe:	2301      	movs	r3, #1
 8001300:	4698      	mov	r8, r3
 8001302:	e5a4      	b.n	8000e4e <__aeabi_dsub+0xa2>
 8001304:	08ff      	lsrs	r7, r7, #3
 8001306:	074b      	lsls	r3, r1, #29
 8001308:	465d      	mov	r5, fp
 800130a:	433b      	orrs	r3, r7
 800130c:	08cc      	lsrs	r4, r1, #3
 800130e:	e6d7      	b.n	80010c0 <__aeabi_dsub+0x314>
 8001310:	4662      	mov	r2, ip
 8001312:	431a      	orrs	r2, r3
 8001314:	0014      	movs	r4, r2
 8001316:	1e63      	subs	r3, r4, #1
 8001318:	419c      	sbcs	r4, r3
 800131a:	e679      	b.n	8001010 <__aeabi_dsub+0x264>
 800131c:	0015      	movs	r5, r2
 800131e:	4664      	mov	r4, ip
 8001320:	3d20      	subs	r5, #32
 8001322:	40ec      	lsrs	r4, r5
 8001324:	46a0      	mov	r8, r4
 8001326:	2a20      	cmp	r2, #32
 8001328:	d005      	beq.n	8001336 <__aeabi_dsub+0x58a>
 800132a:	2540      	movs	r5, #64	; 0x40
 800132c:	4664      	mov	r4, ip
 800132e:	1aaa      	subs	r2, r5, r2
 8001330:	4094      	lsls	r4, r2
 8001332:	4323      	orrs	r3, r4
 8001334:	469a      	mov	sl, r3
 8001336:	4654      	mov	r4, sl
 8001338:	1e63      	subs	r3, r4, #1
 800133a:	419c      	sbcs	r4, r3
 800133c:	4643      	mov	r3, r8
 800133e:	4323      	orrs	r3, r4
 8001340:	e773      	b.n	800122a <__aeabi_dsub+0x47e>
 8001342:	4662      	mov	r2, ip
 8001344:	431a      	orrs	r2, r3
 8001346:	d023      	beq.n	8001390 <__aeabi_dsub+0x5e4>
 8001348:	000a      	movs	r2, r1
 800134a:	433a      	orrs	r2, r7
 800134c:	d000      	beq.n	8001350 <__aeabi_dsub+0x5a4>
 800134e:	e0a0      	b.n	8001492 <__aeabi_dsub+0x6e6>
 8001350:	4662      	mov	r2, ip
 8001352:	08db      	lsrs	r3, r3, #3
 8001354:	0752      	lsls	r2, r2, #29
 8001356:	4313      	orrs	r3, r2
 8001358:	4662      	mov	r2, ip
 800135a:	08d4      	lsrs	r4, r2, #3
 800135c:	e6b0      	b.n	80010c0 <__aeabi_dsub+0x314>
 800135e:	000b      	movs	r3, r1
 8001360:	433b      	orrs	r3, r7
 8001362:	d100      	bne.n	8001366 <__aeabi_dsub+0x5ba>
 8001364:	e728      	b.n	80011b8 <__aeabi_dsub+0x40c>
 8001366:	08ff      	lsrs	r7, r7, #3
 8001368:	074b      	lsls	r3, r1, #29
 800136a:	465d      	mov	r5, fp
 800136c:	433b      	orrs	r3, r7
 800136e:	08cc      	lsrs	r4, r1, #3
 8001370:	e697      	b.n	80010a2 <__aeabi_dsub+0x2f6>
 8001372:	2302      	movs	r3, #2
 8001374:	4698      	mov	r8, r3
 8001376:	e736      	b.n	80011e6 <__aeabi_dsub+0x43a>
 8001378:	1afc      	subs	r4, r7, r3
 800137a:	42a7      	cmp	r7, r4
 800137c:	41bf      	sbcs	r7, r7
 800137e:	4663      	mov	r3, ip
 8001380:	427f      	negs	r7, r7
 8001382:	1ac9      	subs	r1, r1, r3
 8001384:	1bcb      	subs	r3, r1, r7
 8001386:	4699      	mov	r9, r3
 8001388:	2301      	movs	r3, #1
 800138a:	465d      	mov	r5, fp
 800138c:	4698      	mov	r8, r3
 800138e:	e55e      	b.n	8000e4e <__aeabi_dsub+0xa2>
 8001390:	074b      	lsls	r3, r1, #29
 8001392:	08ff      	lsrs	r7, r7, #3
 8001394:	433b      	orrs	r3, r7
 8001396:	08cc      	lsrs	r4, r1, #3
 8001398:	e692      	b.n	80010c0 <__aeabi_dsub+0x314>
 800139a:	1bdc      	subs	r4, r3, r7
 800139c:	4660      	mov	r0, ip
 800139e:	42a3      	cmp	r3, r4
 80013a0:	41b6      	sbcs	r6, r6
 80013a2:	1a40      	subs	r0, r0, r1
 80013a4:	4276      	negs	r6, r6
 80013a6:	1b80      	subs	r0, r0, r6
 80013a8:	4681      	mov	r9, r0
 80013aa:	0200      	lsls	r0, r0, #8
 80013ac:	d560      	bpl.n	8001470 <__aeabi_dsub+0x6c4>
 80013ae:	1afc      	subs	r4, r7, r3
 80013b0:	42a7      	cmp	r7, r4
 80013b2:	41bf      	sbcs	r7, r7
 80013b4:	4663      	mov	r3, ip
 80013b6:	427f      	negs	r7, r7
 80013b8:	1ac9      	subs	r1, r1, r3
 80013ba:	1bcb      	subs	r3, r1, r7
 80013bc:	4699      	mov	r9, r3
 80013be:	465d      	mov	r5, fp
 80013c0:	e576      	b.n	8000eb0 <__aeabi_dsub+0x104>
 80013c2:	08ff      	lsrs	r7, r7, #3
 80013c4:	074b      	lsls	r3, r1, #29
 80013c6:	433b      	orrs	r3, r7
 80013c8:	08cc      	lsrs	r4, r1, #3
 80013ca:	e667      	b.n	800109c <__aeabi_dsub+0x2f0>
 80013cc:	000a      	movs	r2, r1
 80013ce:	08db      	lsrs	r3, r3, #3
 80013d0:	433a      	orrs	r2, r7
 80013d2:	d100      	bne.n	80013d6 <__aeabi_dsub+0x62a>
 80013d4:	e66f      	b.n	80010b6 <__aeabi_dsub+0x30a>
 80013d6:	4662      	mov	r2, ip
 80013d8:	0752      	lsls	r2, r2, #29
 80013da:	4313      	orrs	r3, r2
 80013dc:	4662      	mov	r2, ip
 80013de:	08d4      	lsrs	r4, r2, #3
 80013e0:	2280      	movs	r2, #128	; 0x80
 80013e2:	0312      	lsls	r2, r2, #12
 80013e4:	4214      	tst	r4, r2
 80013e6:	d007      	beq.n	80013f8 <__aeabi_dsub+0x64c>
 80013e8:	08c8      	lsrs	r0, r1, #3
 80013ea:	4210      	tst	r0, r2
 80013ec:	d104      	bne.n	80013f8 <__aeabi_dsub+0x64c>
 80013ee:	465d      	mov	r5, fp
 80013f0:	0004      	movs	r4, r0
 80013f2:	08fb      	lsrs	r3, r7, #3
 80013f4:	0749      	lsls	r1, r1, #29
 80013f6:	430b      	orrs	r3, r1
 80013f8:	0f5a      	lsrs	r2, r3, #29
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	08db      	lsrs	r3, r3, #3
 80013fe:	0752      	lsls	r2, r2, #29
 8001400:	4313      	orrs	r3, r2
 8001402:	e65d      	b.n	80010c0 <__aeabi_dsub+0x314>
 8001404:	074b      	lsls	r3, r1, #29
 8001406:	08ff      	lsrs	r7, r7, #3
 8001408:	433b      	orrs	r3, r7
 800140a:	08cc      	lsrs	r4, r1, #3
 800140c:	e649      	b.n	80010a2 <__aeabi_dsub+0x2f6>
 800140e:	19dc      	adds	r4, r3, r7
 8001410:	429c      	cmp	r4, r3
 8001412:	419b      	sbcs	r3, r3
 8001414:	4461      	add	r1, ip
 8001416:	4689      	mov	r9, r1
 8001418:	425b      	negs	r3, r3
 800141a:	4499      	add	r9, r3
 800141c:	464b      	mov	r3, r9
 800141e:	021b      	lsls	r3, r3, #8
 8001420:	d400      	bmi.n	8001424 <__aeabi_dsub+0x678>
 8001422:	e631      	b.n	8001088 <__aeabi_dsub+0x2dc>
 8001424:	464a      	mov	r2, r9
 8001426:	4b17      	ldr	r3, [pc, #92]	; (8001484 <__aeabi_dsub+0x6d8>)
 8001428:	401a      	ands	r2, r3
 800142a:	2301      	movs	r3, #1
 800142c:	4691      	mov	r9, r2
 800142e:	4698      	mov	r8, r3
 8001430:	e62a      	b.n	8001088 <__aeabi_dsub+0x2dc>
 8001432:	0016      	movs	r6, r2
 8001434:	4664      	mov	r4, ip
 8001436:	3e20      	subs	r6, #32
 8001438:	40f4      	lsrs	r4, r6
 800143a:	46a0      	mov	r8, r4
 800143c:	2a20      	cmp	r2, #32
 800143e:	d005      	beq.n	800144c <__aeabi_dsub+0x6a0>
 8001440:	2640      	movs	r6, #64	; 0x40
 8001442:	4664      	mov	r4, ip
 8001444:	1ab2      	subs	r2, r6, r2
 8001446:	4094      	lsls	r4, r2
 8001448:	4323      	orrs	r3, r4
 800144a:	469a      	mov	sl, r3
 800144c:	4654      	mov	r4, sl
 800144e:	1e63      	subs	r3, r4, #1
 8001450:	419c      	sbcs	r4, r3
 8001452:	4643      	mov	r3, r8
 8001454:	431c      	orrs	r4, r3
 8001456:	e5db      	b.n	8001010 <__aeabi_dsub+0x264>
 8001458:	0002      	movs	r2, r0
 800145a:	2400      	movs	r4, #0
 800145c:	2300      	movs	r3, #0
 800145e:	e548      	b.n	8000ef2 <__aeabi_dsub+0x146>
 8001460:	19dc      	adds	r4, r3, r7
 8001462:	42bc      	cmp	r4, r7
 8001464:	41bf      	sbcs	r7, r7
 8001466:	4461      	add	r1, ip
 8001468:	4689      	mov	r9, r1
 800146a:	427f      	negs	r7, r7
 800146c:	44b9      	add	r9, r7
 800146e:	e738      	b.n	80012e2 <__aeabi_dsub+0x536>
 8001470:	464b      	mov	r3, r9
 8001472:	4323      	orrs	r3, r4
 8001474:	d100      	bne.n	8001478 <__aeabi_dsub+0x6cc>
 8001476:	e69f      	b.n	80011b8 <__aeabi_dsub+0x40c>
 8001478:	e606      	b.n	8001088 <__aeabi_dsub+0x2dc>
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	000007fe 	.word	0x000007fe
 8001480:	000007ff 	.word	0x000007ff
 8001484:	ff7fffff 	.word	0xff7fffff
 8001488:	08ff      	lsrs	r7, r7, #3
 800148a:	074b      	lsls	r3, r1, #29
 800148c:	433b      	orrs	r3, r7
 800148e:	08cc      	lsrs	r4, r1, #3
 8001490:	e616      	b.n	80010c0 <__aeabi_dsub+0x314>
 8001492:	4662      	mov	r2, ip
 8001494:	08db      	lsrs	r3, r3, #3
 8001496:	0752      	lsls	r2, r2, #29
 8001498:	4313      	orrs	r3, r2
 800149a:	4662      	mov	r2, ip
 800149c:	08d4      	lsrs	r4, r2, #3
 800149e:	2280      	movs	r2, #128	; 0x80
 80014a0:	0312      	lsls	r2, r2, #12
 80014a2:	4214      	tst	r4, r2
 80014a4:	d007      	beq.n	80014b6 <__aeabi_dsub+0x70a>
 80014a6:	08c8      	lsrs	r0, r1, #3
 80014a8:	4210      	tst	r0, r2
 80014aa:	d104      	bne.n	80014b6 <__aeabi_dsub+0x70a>
 80014ac:	465d      	mov	r5, fp
 80014ae:	0004      	movs	r4, r0
 80014b0:	08fb      	lsrs	r3, r7, #3
 80014b2:	0749      	lsls	r1, r1, #29
 80014b4:	430b      	orrs	r3, r1
 80014b6:	0f5a      	lsrs	r2, r3, #29
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	0752      	lsls	r2, r2, #29
 80014bc:	08db      	lsrs	r3, r3, #3
 80014be:	4313      	orrs	r3, r2
 80014c0:	e5fe      	b.n	80010c0 <__aeabi_dsub+0x314>
 80014c2:	2300      	movs	r3, #0
 80014c4:	4a01      	ldr	r2, [pc, #4]	; (80014cc <__aeabi_dsub+0x720>)
 80014c6:	001c      	movs	r4, r3
 80014c8:	e513      	b.n	8000ef2 <__aeabi_dsub+0x146>
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	000007ff 	.word	0x000007ff

080014d0 <__aeabi_d2iz>:
 80014d0:	000a      	movs	r2, r1
 80014d2:	b530      	push	{r4, r5, lr}
 80014d4:	4c13      	ldr	r4, [pc, #76]	; (8001524 <__aeabi_d2iz+0x54>)
 80014d6:	0053      	lsls	r3, r2, #1
 80014d8:	0309      	lsls	r1, r1, #12
 80014da:	0005      	movs	r5, r0
 80014dc:	0b09      	lsrs	r1, r1, #12
 80014de:	2000      	movs	r0, #0
 80014e0:	0d5b      	lsrs	r3, r3, #21
 80014e2:	0fd2      	lsrs	r2, r2, #31
 80014e4:	42a3      	cmp	r3, r4
 80014e6:	dd04      	ble.n	80014f2 <__aeabi_d2iz+0x22>
 80014e8:	480f      	ldr	r0, [pc, #60]	; (8001528 <__aeabi_d2iz+0x58>)
 80014ea:	4283      	cmp	r3, r0
 80014ec:	dd02      	ble.n	80014f4 <__aeabi_d2iz+0x24>
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <__aeabi_d2iz+0x5c>)
 80014f0:	18d0      	adds	r0, r2, r3
 80014f2:	bd30      	pop	{r4, r5, pc}
 80014f4:	2080      	movs	r0, #128	; 0x80
 80014f6:	0340      	lsls	r0, r0, #13
 80014f8:	4301      	orrs	r1, r0
 80014fa:	480d      	ldr	r0, [pc, #52]	; (8001530 <__aeabi_d2iz+0x60>)
 80014fc:	1ac0      	subs	r0, r0, r3
 80014fe:	281f      	cmp	r0, #31
 8001500:	dd08      	ble.n	8001514 <__aeabi_d2iz+0x44>
 8001502:	480c      	ldr	r0, [pc, #48]	; (8001534 <__aeabi_d2iz+0x64>)
 8001504:	1ac3      	subs	r3, r0, r3
 8001506:	40d9      	lsrs	r1, r3
 8001508:	000b      	movs	r3, r1
 800150a:	4258      	negs	r0, r3
 800150c:	2a00      	cmp	r2, #0
 800150e:	d1f0      	bne.n	80014f2 <__aeabi_d2iz+0x22>
 8001510:	0018      	movs	r0, r3
 8001512:	e7ee      	b.n	80014f2 <__aeabi_d2iz+0x22>
 8001514:	4c08      	ldr	r4, [pc, #32]	; (8001538 <__aeabi_d2iz+0x68>)
 8001516:	40c5      	lsrs	r5, r0
 8001518:	46a4      	mov	ip, r4
 800151a:	4463      	add	r3, ip
 800151c:	4099      	lsls	r1, r3
 800151e:	000b      	movs	r3, r1
 8001520:	432b      	orrs	r3, r5
 8001522:	e7f2      	b.n	800150a <__aeabi_d2iz+0x3a>
 8001524:	000003fe 	.word	0x000003fe
 8001528:	0000041d 	.word	0x0000041d
 800152c:	7fffffff 	.word	0x7fffffff
 8001530:	00000433 	.word	0x00000433
 8001534:	00000413 	.word	0x00000413
 8001538:	fffffbed 	.word	0xfffffbed

0800153c <__aeabi_ui2d>:
 800153c:	b510      	push	{r4, lr}
 800153e:	1e04      	subs	r4, r0, #0
 8001540:	d010      	beq.n	8001564 <__aeabi_ui2d+0x28>
 8001542:	f000 f85f 	bl	8001604 <__clzsi2>
 8001546:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <__aeabi_ui2d+0x48>)
 8001548:	1a1b      	subs	r3, r3, r0
 800154a:	280a      	cmp	r0, #10
 800154c:	dc11      	bgt.n	8001572 <__aeabi_ui2d+0x36>
 800154e:	220b      	movs	r2, #11
 8001550:	0021      	movs	r1, r4
 8001552:	1a12      	subs	r2, r2, r0
 8001554:	40d1      	lsrs	r1, r2
 8001556:	3015      	adds	r0, #21
 8001558:	030a      	lsls	r2, r1, #12
 800155a:	055b      	lsls	r3, r3, #21
 800155c:	4084      	lsls	r4, r0
 800155e:	0b12      	lsrs	r2, r2, #12
 8001560:	0d5b      	lsrs	r3, r3, #21
 8001562:	e001      	b.n	8001568 <__aeabi_ui2d+0x2c>
 8001564:	2300      	movs	r3, #0
 8001566:	2200      	movs	r2, #0
 8001568:	051b      	lsls	r3, r3, #20
 800156a:	4313      	orrs	r3, r2
 800156c:	0020      	movs	r0, r4
 800156e:	0019      	movs	r1, r3
 8001570:	bd10      	pop	{r4, pc}
 8001572:	0022      	movs	r2, r4
 8001574:	380b      	subs	r0, #11
 8001576:	4082      	lsls	r2, r0
 8001578:	055b      	lsls	r3, r3, #21
 800157a:	0312      	lsls	r2, r2, #12
 800157c:	2400      	movs	r4, #0
 800157e:	0b12      	lsrs	r2, r2, #12
 8001580:	0d5b      	lsrs	r3, r3, #21
 8001582:	e7f1      	b.n	8001568 <__aeabi_ui2d+0x2c>
 8001584:	0000041e 	.word	0x0000041e

08001588 <__aeabi_cdrcmple>:
 8001588:	4684      	mov	ip, r0
 800158a:	0010      	movs	r0, r2
 800158c:	4662      	mov	r2, ip
 800158e:	468c      	mov	ip, r1
 8001590:	0019      	movs	r1, r3
 8001592:	4663      	mov	r3, ip
 8001594:	e000      	b.n	8001598 <__aeabi_cdcmpeq>
 8001596:	46c0      	nop			; (mov r8, r8)

08001598 <__aeabi_cdcmpeq>:
 8001598:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800159a:	f000 f8f9 	bl	8001790 <__ledf2>
 800159e:	2800      	cmp	r0, #0
 80015a0:	d401      	bmi.n	80015a6 <__aeabi_cdcmpeq+0xe>
 80015a2:	2100      	movs	r1, #0
 80015a4:	42c8      	cmn	r0, r1
 80015a6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080015a8 <__aeabi_dcmpeq>:
 80015a8:	b510      	push	{r4, lr}
 80015aa:	f000 f849 	bl	8001640 <__eqdf2>
 80015ae:	4240      	negs	r0, r0
 80015b0:	3001      	adds	r0, #1
 80015b2:	bd10      	pop	{r4, pc}

080015b4 <__aeabi_dcmplt>:
 80015b4:	b510      	push	{r4, lr}
 80015b6:	f000 f8eb 	bl	8001790 <__ledf2>
 80015ba:	2800      	cmp	r0, #0
 80015bc:	db01      	blt.n	80015c2 <__aeabi_dcmplt+0xe>
 80015be:	2000      	movs	r0, #0
 80015c0:	bd10      	pop	{r4, pc}
 80015c2:	2001      	movs	r0, #1
 80015c4:	bd10      	pop	{r4, pc}
 80015c6:	46c0      	nop			; (mov r8, r8)

080015c8 <__aeabi_dcmple>:
 80015c8:	b510      	push	{r4, lr}
 80015ca:	f000 f8e1 	bl	8001790 <__ledf2>
 80015ce:	2800      	cmp	r0, #0
 80015d0:	dd01      	ble.n	80015d6 <__aeabi_dcmple+0xe>
 80015d2:	2000      	movs	r0, #0
 80015d4:	bd10      	pop	{r4, pc}
 80015d6:	2001      	movs	r0, #1
 80015d8:	bd10      	pop	{r4, pc}
 80015da:	46c0      	nop			; (mov r8, r8)

080015dc <__aeabi_dcmpgt>:
 80015dc:	b510      	push	{r4, lr}
 80015de:	f000 f871 	bl	80016c4 <__gedf2>
 80015e2:	2800      	cmp	r0, #0
 80015e4:	dc01      	bgt.n	80015ea <__aeabi_dcmpgt+0xe>
 80015e6:	2000      	movs	r0, #0
 80015e8:	bd10      	pop	{r4, pc}
 80015ea:	2001      	movs	r0, #1
 80015ec:	bd10      	pop	{r4, pc}
 80015ee:	46c0      	nop			; (mov r8, r8)

080015f0 <__aeabi_dcmpge>:
 80015f0:	b510      	push	{r4, lr}
 80015f2:	f000 f867 	bl	80016c4 <__gedf2>
 80015f6:	2800      	cmp	r0, #0
 80015f8:	da01      	bge.n	80015fe <__aeabi_dcmpge+0xe>
 80015fa:	2000      	movs	r0, #0
 80015fc:	bd10      	pop	{r4, pc}
 80015fe:	2001      	movs	r0, #1
 8001600:	bd10      	pop	{r4, pc}
 8001602:	46c0      	nop			; (mov r8, r8)

08001604 <__clzsi2>:
 8001604:	211c      	movs	r1, #28
 8001606:	2301      	movs	r3, #1
 8001608:	041b      	lsls	r3, r3, #16
 800160a:	4298      	cmp	r0, r3
 800160c:	d301      	bcc.n	8001612 <__clzsi2+0xe>
 800160e:	0c00      	lsrs	r0, r0, #16
 8001610:	3910      	subs	r1, #16
 8001612:	0a1b      	lsrs	r3, r3, #8
 8001614:	4298      	cmp	r0, r3
 8001616:	d301      	bcc.n	800161c <__clzsi2+0x18>
 8001618:	0a00      	lsrs	r0, r0, #8
 800161a:	3908      	subs	r1, #8
 800161c:	091b      	lsrs	r3, r3, #4
 800161e:	4298      	cmp	r0, r3
 8001620:	d301      	bcc.n	8001626 <__clzsi2+0x22>
 8001622:	0900      	lsrs	r0, r0, #4
 8001624:	3904      	subs	r1, #4
 8001626:	a202      	add	r2, pc, #8	; (adr r2, 8001630 <__clzsi2+0x2c>)
 8001628:	5c10      	ldrb	r0, [r2, r0]
 800162a:	1840      	adds	r0, r0, r1
 800162c:	4770      	bx	lr
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	02020304 	.word	0x02020304
 8001634:	01010101 	.word	0x01010101
	...

08001640 <__eqdf2>:
 8001640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001642:	464e      	mov	r6, r9
 8001644:	4645      	mov	r5, r8
 8001646:	46de      	mov	lr, fp
 8001648:	4657      	mov	r7, sl
 800164a:	4690      	mov	r8, r2
 800164c:	b5e0      	push	{r5, r6, r7, lr}
 800164e:	0017      	movs	r7, r2
 8001650:	031a      	lsls	r2, r3, #12
 8001652:	0b12      	lsrs	r2, r2, #12
 8001654:	0005      	movs	r5, r0
 8001656:	4684      	mov	ip, r0
 8001658:	4819      	ldr	r0, [pc, #100]	; (80016c0 <__eqdf2+0x80>)
 800165a:	030e      	lsls	r6, r1, #12
 800165c:	004c      	lsls	r4, r1, #1
 800165e:	4691      	mov	r9, r2
 8001660:	005a      	lsls	r2, r3, #1
 8001662:	0fdb      	lsrs	r3, r3, #31
 8001664:	469b      	mov	fp, r3
 8001666:	0b36      	lsrs	r6, r6, #12
 8001668:	0d64      	lsrs	r4, r4, #21
 800166a:	0fc9      	lsrs	r1, r1, #31
 800166c:	0d52      	lsrs	r2, r2, #21
 800166e:	4284      	cmp	r4, r0
 8001670:	d019      	beq.n	80016a6 <__eqdf2+0x66>
 8001672:	4282      	cmp	r2, r0
 8001674:	d010      	beq.n	8001698 <__eqdf2+0x58>
 8001676:	2001      	movs	r0, #1
 8001678:	4294      	cmp	r4, r2
 800167a:	d10e      	bne.n	800169a <__eqdf2+0x5a>
 800167c:	454e      	cmp	r6, r9
 800167e:	d10c      	bne.n	800169a <__eqdf2+0x5a>
 8001680:	2001      	movs	r0, #1
 8001682:	45c4      	cmp	ip, r8
 8001684:	d109      	bne.n	800169a <__eqdf2+0x5a>
 8001686:	4559      	cmp	r1, fp
 8001688:	d017      	beq.n	80016ba <__eqdf2+0x7a>
 800168a:	2c00      	cmp	r4, #0
 800168c:	d105      	bne.n	800169a <__eqdf2+0x5a>
 800168e:	0030      	movs	r0, r6
 8001690:	4328      	orrs	r0, r5
 8001692:	1e43      	subs	r3, r0, #1
 8001694:	4198      	sbcs	r0, r3
 8001696:	e000      	b.n	800169a <__eqdf2+0x5a>
 8001698:	2001      	movs	r0, #1
 800169a:	bcf0      	pop	{r4, r5, r6, r7}
 800169c:	46bb      	mov	fp, r7
 800169e:	46b2      	mov	sl, r6
 80016a0:	46a9      	mov	r9, r5
 80016a2:	46a0      	mov	r8, r4
 80016a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016a6:	0033      	movs	r3, r6
 80016a8:	2001      	movs	r0, #1
 80016aa:	432b      	orrs	r3, r5
 80016ac:	d1f5      	bne.n	800169a <__eqdf2+0x5a>
 80016ae:	42a2      	cmp	r2, r4
 80016b0:	d1f3      	bne.n	800169a <__eqdf2+0x5a>
 80016b2:	464b      	mov	r3, r9
 80016b4:	433b      	orrs	r3, r7
 80016b6:	d1f0      	bne.n	800169a <__eqdf2+0x5a>
 80016b8:	e7e2      	b.n	8001680 <__eqdf2+0x40>
 80016ba:	2000      	movs	r0, #0
 80016bc:	e7ed      	b.n	800169a <__eqdf2+0x5a>
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	000007ff 	.word	0x000007ff

080016c4 <__gedf2>:
 80016c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016c6:	4647      	mov	r7, r8
 80016c8:	46ce      	mov	lr, r9
 80016ca:	0004      	movs	r4, r0
 80016cc:	0018      	movs	r0, r3
 80016ce:	0016      	movs	r6, r2
 80016d0:	031b      	lsls	r3, r3, #12
 80016d2:	0b1b      	lsrs	r3, r3, #12
 80016d4:	4d2d      	ldr	r5, [pc, #180]	; (800178c <__gedf2+0xc8>)
 80016d6:	004a      	lsls	r2, r1, #1
 80016d8:	4699      	mov	r9, r3
 80016da:	b580      	push	{r7, lr}
 80016dc:	0043      	lsls	r3, r0, #1
 80016de:	030f      	lsls	r7, r1, #12
 80016e0:	46a4      	mov	ip, r4
 80016e2:	46b0      	mov	r8, r6
 80016e4:	0b3f      	lsrs	r7, r7, #12
 80016e6:	0d52      	lsrs	r2, r2, #21
 80016e8:	0fc9      	lsrs	r1, r1, #31
 80016ea:	0d5b      	lsrs	r3, r3, #21
 80016ec:	0fc0      	lsrs	r0, r0, #31
 80016ee:	42aa      	cmp	r2, r5
 80016f0:	d021      	beq.n	8001736 <__gedf2+0x72>
 80016f2:	42ab      	cmp	r3, r5
 80016f4:	d013      	beq.n	800171e <__gedf2+0x5a>
 80016f6:	2a00      	cmp	r2, #0
 80016f8:	d122      	bne.n	8001740 <__gedf2+0x7c>
 80016fa:	433c      	orrs	r4, r7
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d102      	bne.n	8001706 <__gedf2+0x42>
 8001700:	464d      	mov	r5, r9
 8001702:	432e      	orrs	r6, r5
 8001704:	d022      	beq.n	800174c <__gedf2+0x88>
 8001706:	2c00      	cmp	r4, #0
 8001708:	d010      	beq.n	800172c <__gedf2+0x68>
 800170a:	4281      	cmp	r1, r0
 800170c:	d022      	beq.n	8001754 <__gedf2+0x90>
 800170e:	2002      	movs	r0, #2
 8001710:	3901      	subs	r1, #1
 8001712:	4008      	ands	r0, r1
 8001714:	3801      	subs	r0, #1
 8001716:	bcc0      	pop	{r6, r7}
 8001718:	46b9      	mov	r9, r7
 800171a:	46b0      	mov	r8, r6
 800171c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800171e:	464d      	mov	r5, r9
 8001720:	432e      	orrs	r6, r5
 8001722:	d129      	bne.n	8001778 <__gedf2+0xb4>
 8001724:	2a00      	cmp	r2, #0
 8001726:	d1f0      	bne.n	800170a <__gedf2+0x46>
 8001728:	433c      	orrs	r4, r7
 800172a:	d1ee      	bne.n	800170a <__gedf2+0x46>
 800172c:	2800      	cmp	r0, #0
 800172e:	d1f2      	bne.n	8001716 <__gedf2+0x52>
 8001730:	2001      	movs	r0, #1
 8001732:	4240      	negs	r0, r0
 8001734:	e7ef      	b.n	8001716 <__gedf2+0x52>
 8001736:	003d      	movs	r5, r7
 8001738:	4325      	orrs	r5, r4
 800173a:	d11d      	bne.n	8001778 <__gedf2+0xb4>
 800173c:	4293      	cmp	r3, r2
 800173e:	d0ee      	beq.n	800171e <__gedf2+0x5a>
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1e2      	bne.n	800170a <__gedf2+0x46>
 8001744:	464c      	mov	r4, r9
 8001746:	4326      	orrs	r6, r4
 8001748:	d1df      	bne.n	800170a <__gedf2+0x46>
 800174a:	e7e0      	b.n	800170e <__gedf2+0x4a>
 800174c:	2000      	movs	r0, #0
 800174e:	2c00      	cmp	r4, #0
 8001750:	d0e1      	beq.n	8001716 <__gedf2+0x52>
 8001752:	e7dc      	b.n	800170e <__gedf2+0x4a>
 8001754:	429a      	cmp	r2, r3
 8001756:	dc0a      	bgt.n	800176e <__gedf2+0xaa>
 8001758:	dbe8      	blt.n	800172c <__gedf2+0x68>
 800175a:	454f      	cmp	r7, r9
 800175c:	d8d7      	bhi.n	800170e <__gedf2+0x4a>
 800175e:	d00e      	beq.n	800177e <__gedf2+0xba>
 8001760:	2000      	movs	r0, #0
 8001762:	454f      	cmp	r7, r9
 8001764:	d2d7      	bcs.n	8001716 <__gedf2+0x52>
 8001766:	2900      	cmp	r1, #0
 8001768:	d0e2      	beq.n	8001730 <__gedf2+0x6c>
 800176a:	0008      	movs	r0, r1
 800176c:	e7d3      	b.n	8001716 <__gedf2+0x52>
 800176e:	4243      	negs	r3, r0
 8001770:	4158      	adcs	r0, r3
 8001772:	0040      	lsls	r0, r0, #1
 8001774:	3801      	subs	r0, #1
 8001776:	e7ce      	b.n	8001716 <__gedf2+0x52>
 8001778:	2002      	movs	r0, #2
 800177a:	4240      	negs	r0, r0
 800177c:	e7cb      	b.n	8001716 <__gedf2+0x52>
 800177e:	45c4      	cmp	ip, r8
 8001780:	d8c5      	bhi.n	800170e <__gedf2+0x4a>
 8001782:	2000      	movs	r0, #0
 8001784:	45c4      	cmp	ip, r8
 8001786:	d2c6      	bcs.n	8001716 <__gedf2+0x52>
 8001788:	e7ed      	b.n	8001766 <__gedf2+0xa2>
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	000007ff 	.word	0x000007ff

08001790 <__ledf2>:
 8001790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001792:	4647      	mov	r7, r8
 8001794:	46ce      	mov	lr, r9
 8001796:	0004      	movs	r4, r0
 8001798:	0018      	movs	r0, r3
 800179a:	0016      	movs	r6, r2
 800179c:	031b      	lsls	r3, r3, #12
 800179e:	0b1b      	lsrs	r3, r3, #12
 80017a0:	4d2c      	ldr	r5, [pc, #176]	; (8001854 <__ledf2+0xc4>)
 80017a2:	004a      	lsls	r2, r1, #1
 80017a4:	4699      	mov	r9, r3
 80017a6:	b580      	push	{r7, lr}
 80017a8:	0043      	lsls	r3, r0, #1
 80017aa:	030f      	lsls	r7, r1, #12
 80017ac:	46a4      	mov	ip, r4
 80017ae:	46b0      	mov	r8, r6
 80017b0:	0b3f      	lsrs	r7, r7, #12
 80017b2:	0d52      	lsrs	r2, r2, #21
 80017b4:	0fc9      	lsrs	r1, r1, #31
 80017b6:	0d5b      	lsrs	r3, r3, #21
 80017b8:	0fc0      	lsrs	r0, r0, #31
 80017ba:	42aa      	cmp	r2, r5
 80017bc:	d00d      	beq.n	80017da <__ledf2+0x4a>
 80017be:	42ab      	cmp	r3, r5
 80017c0:	d010      	beq.n	80017e4 <__ledf2+0x54>
 80017c2:	2a00      	cmp	r2, #0
 80017c4:	d127      	bne.n	8001816 <__ledf2+0x86>
 80017c6:	433c      	orrs	r4, r7
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d111      	bne.n	80017f0 <__ledf2+0x60>
 80017cc:	464d      	mov	r5, r9
 80017ce:	432e      	orrs	r6, r5
 80017d0:	d10e      	bne.n	80017f0 <__ledf2+0x60>
 80017d2:	2000      	movs	r0, #0
 80017d4:	2c00      	cmp	r4, #0
 80017d6:	d015      	beq.n	8001804 <__ledf2+0x74>
 80017d8:	e00e      	b.n	80017f8 <__ledf2+0x68>
 80017da:	003d      	movs	r5, r7
 80017dc:	4325      	orrs	r5, r4
 80017de:	d110      	bne.n	8001802 <__ledf2+0x72>
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d118      	bne.n	8001816 <__ledf2+0x86>
 80017e4:	464d      	mov	r5, r9
 80017e6:	432e      	orrs	r6, r5
 80017e8:	d10b      	bne.n	8001802 <__ledf2+0x72>
 80017ea:	2a00      	cmp	r2, #0
 80017ec:	d102      	bne.n	80017f4 <__ledf2+0x64>
 80017ee:	433c      	orrs	r4, r7
 80017f0:	2c00      	cmp	r4, #0
 80017f2:	d00b      	beq.n	800180c <__ledf2+0x7c>
 80017f4:	4281      	cmp	r1, r0
 80017f6:	d014      	beq.n	8001822 <__ledf2+0x92>
 80017f8:	2002      	movs	r0, #2
 80017fa:	3901      	subs	r1, #1
 80017fc:	4008      	ands	r0, r1
 80017fe:	3801      	subs	r0, #1
 8001800:	e000      	b.n	8001804 <__ledf2+0x74>
 8001802:	2002      	movs	r0, #2
 8001804:	bcc0      	pop	{r6, r7}
 8001806:	46b9      	mov	r9, r7
 8001808:	46b0      	mov	r8, r6
 800180a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800180c:	2800      	cmp	r0, #0
 800180e:	d1f9      	bne.n	8001804 <__ledf2+0x74>
 8001810:	2001      	movs	r0, #1
 8001812:	4240      	negs	r0, r0
 8001814:	e7f6      	b.n	8001804 <__ledf2+0x74>
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1ec      	bne.n	80017f4 <__ledf2+0x64>
 800181a:	464c      	mov	r4, r9
 800181c:	4326      	orrs	r6, r4
 800181e:	d1e9      	bne.n	80017f4 <__ledf2+0x64>
 8001820:	e7ea      	b.n	80017f8 <__ledf2+0x68>
 8001822:	429a      	cmp	r2, r3
 8001824:	dd04      	ble.n	8001830 <__ledf2+0xa0>
 8001826:	4243      	negs	r3, r0
 8001828:	4158      	adcs	r0, r3
 800182a:	0040      	lsls	r0, r0, #1
 800182c:	3801      	subs	r0, #1
 800182e:	e7e9      	b.n	8001804 <__ledf2+0x74>
 8001830:	429a      	cmp	r2, r3
 8001832:	dbeb      	blt.n	800180c <__ledf2+0x7c>
 8001834:	454f      	cmp	r7, r9
 8001836:	d8df      	bhi.n	80017f8 <__ledf2+0x68>
 8001838:	d006      	beq.n	8001848 <__ledf2+0xb8>
 800183a:	2000      	movs	r0, #0
 800183c:	454f      	cmp	r7, r9
 800183e:	d2e1      	bcs.n	8001804 <__ledf2+0x74>
 8001840:	2900      	cmp	r1, #0
 8001842:	d0e5      	beq.n	8001810 <__ledf2+0x80>
 8001844:	0008      	movs	r0, r1
 8001846:	e7dd      	b.n	8001804 <__ledf2+0x74>
 8001848:	45c4      	cmp	ip, r8
 800184a:	d8d5      	bhi.n	80017f8 <__ledf2+0x68>
 800184c:	2000      	movs	r0, #0
 800184e:	45c4      	cmp	ip, r8
 8001850:	d2d8      	bcs.n	8001804 <__ledf2+0x74>
 8001852:	e7f5      	b.n	8001840 <__ledf2+0xb0>
 8001854:	000007ff 	.word	0x000007ff

08001858 <add_valuen>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void add_valuen(uint32_t *x, uint32_t xn){
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
	for(uint16_t i = 0; i < N-1; i++){
 8001862:	230e      	movs	r3, #14
 8001864:	18fb      	adds	r3, r7, r3
 8001866:	2200      	movs	r2, #0
 8001868:	801a      	strh	r2, [r3, #0]
 800186a:	e012      	b.n	8001892 <add_valuen+0x3a>
		x[i] = x[i+1];
 800186c:	200e      	movs	r0, #14
 800186e:	183b      	adds	r3, r7, r0
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	3301      	adds	r3, #1
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	18d2      	adds	r2, r2, r3
 800187a:	183b      	adds	r3, r7, r0
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	18cb      	adds	r3, r1, r3
 8001884:	6812      	ldr	r2, [r2, #0]
 8001886:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < N-1; i++){
 8001888:	183b      	adds	r3, r7, r0
 800188a:	881a      	ldrh	r2, [r3, #0]
 800188c:	183b      	adds	r3, r7, r0
 800188e:	3201      	adds	r2, #1
 8001890:	801a      	strh	r2, [r3, #0]
 8001892:	230e      	movs	r3, #14
 8001894:	18fb      	adds	r3, r7, r3
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	2b05      	cmp	r3, #5
 800189a:	d9e7      	bls.n	800186c <add_valuen+0x14>
	}
	x[N-1] = xn;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3318      	adds	r3, #24
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	601a      	str	r2, [r3, #0]
}
 80018a4:	46c0      	nop			; (mov r8, r8)
 80018a6:	46bd      	mov	sp, r7
 80018a8:	b004      	add	sp, #16
 80018aa:	bd80      	pop	{r7, pc}

080018ac <lowpassfilter>:
	return (uint32_t)(sum/840.0);
}

uint32_t lasty = 0;
#define BETA (double)(0.1)
uint32_t lowpassfilter(uint32_t x){
 80018ac:	b5b0      	push	{r4, r5, r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	return (uint32_t)(BETA*x + (1-BETA)*lasty);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff fe41 	bl	800153c <__aeabi_ui2d>
 80018ba:	4a11      	ldr	r2, [pc, #68]	; (8001900 <lowpassfilter+0x54>)
 80018bc:	4b11      	ldr	r3, [pc, #68]	; (8001904 <lowpassfilter+0x58>)
 80018be:	f7ff f809 	bl	80008d4 <__aeabi_dmul>
 80018c2:	0002      	movs	r2, r0
 80018c4:	000b      	movs	r3, r1
 80018c6:	0014      	movs	r4, r2
 80018c8:	001d      	movs	r5, r3
 80018ca:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <lowpassfilter+0x5c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	0018      	movs	r0, r3
 80018d0:	f7ff fe34 	bl	800153c <__aeabi_ui2d>
 80018d4:	4a0d      	ldr	r2, [pc, #52]	; (800190c <lowpassfilter+0x60>)
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <lowpassfilter+0x64>)
 80018d8:	f7fe fffc 	bl	80008d4 <__aeabi_dmul>
 80018dc:	0002      	movs	r2, r0
 80018de:	000b      	movs	r3, r1
 80018e0:	0020      	movs	r0, r4
 80018e2:	0029      	movs	r1, r5
 80018e4:	f7fe fcba 	bl	800025c <__aeabi_dadd>
 80018e8:	0002      	movs	r2, r0
 80018ea:	000b      	movs	r3, r1
 80018ec:	0010      	movs	r0, r2
 80018ee:	0019      	movs	r1, r3
 80018f0:	f7fe fc96 	bl	8000220 <__aeabi_d2uiz>
 80018f4:	0003      	movs	r3, r0
}
 80018f6:	0018      	movs	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	b002      	add	sp, #8
 80018fc:	bdb0      	pop	{r4, r5, r7, pc}
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	9999999a 	.word	0x9999999a
 8001904:	3fb99999 	.word	0x3fb99999
 8001908:	200000cc 	.word	0x200000cc
 800190c:	cccccccd 	.word	0xcccccccd
 8001910:	3feccccc 	.word	0x3feccccc

08001914 <filter>:

uint32_t filter(uint32_t* x, uint32_t valor){
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
	uint32_t valor_filtrado = lowpassfilter(valor);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	0018      	movs	r0, r3
 8001922:	f7ff ffc3 	bl	80018ac <lowpassfilter>
 8001926:	0003      	movs	r3, r0
 8001928:	60fb      	str	r3, [r7, #12]
	add_valuen(x, valor_filtrado);
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	0011      	movs	r1, r2
 8001930:	0018      	movs	r0, r3
 8001932:	f7ff ff91 	bl	8001858 <add_valuen>
	//valor_filtrado = simpsons1140mean(x);
	lasty = valor_filtrado;
 8001936:	4b04      	ldr	r3, [pc, #16]	; (8001948 <filter+0x34>)
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	601a      	str	r2, [r3, #0]
	return valor_filtrado ;
 800193c:	68fb      	ldr	r3, [r7, #12]
}
 800193e:	0018      	movs	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	b004      	add	sp, #16
 8001944:	bd80      	pop	{r7, pc}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	200000cc 	.word	0x200000cc

0800194c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001952:	f000 fa45 	bl	8001de0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001956:	f000 f847 	bl	80019e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800195a:	f000 f8f3 	bl	8001b44 <MX_GPIO_Init>
  MX_ADC_Init();
 800195e:	f000 f895 	bl	8001a8c <MX_ADC_Init>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
  //#define DELAY 1
  uint32_t* x = malloc(N*sizeof(uint32_t));
 8001962:	201c      	movs	r0, #28
 8001964:	f001 fc6a 	bl	800323c <malloc>
 8001968:	0003      	movs	r3, r0
 800196a:	60bb      	str	r3, [r7, #8]
  for(uint8_t i = 0;i<N-1;i++){
 800196c:	230f      	movs	r3, #15
 800196e:	18fb      	adds	r3, r7, r3
 8001970:	2200      	movs	r2, #0
 8001972:	701a      	strb	r2, [r3, #0]
 8001974:	e01b      	b.n	80019ae <main+0x62>
	  HAL_ADC_Start(&hadc);
 8001976:	4b1b      	ldr	r3, [pc, #108]	; (80019e4 <main+0x98>)
 8001978:	0018      	movs	r0, r3
 800197a:	f000 fbd5 	bl	8002128 <HAL_ADC_Start>
	  //HAL_Delay(DELAY);					// inicializa e realiza a conversão
	  valor = HAL_ADC_GetValue(&hadc);	// pega o valor do adc
 800197e:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <main+0x98>)
 8001980:	0018      	movs	r0, r3
 8001982:	f000 fc25 	bl	80021d0 <HAL_ADC_GetValue>
 8001986:	0003      	movs	r3, r0
 8001988:	607b      	str	r3, [r7, #4]
	  uint32_t valor_filtrado = lowpassfilter(valor);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	0018      	movs	r0, r3
 800198e:	f7ff ff8d 	bl	80018ac <lowpassfilter>
 8001992:	0003      	movs	r3, r0
 8001994:	603b      	str	r3, [r7, #0]
	  add_valuen(x, valor_filtrado);
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	0011      	movs	r1, r2
 800199c:	0018      	movs	r0, r3
 800199e:	f7ff ff5b 	bl	8001858 <add_valuen>
  for(uint8_t i = 0;i<N-1;i++){
 80019a2:	210f      	movs	r1, #15
 80019a4:	187b      	adds	r3, r7, r1
 80019a6:	781a      	ldrb	r2, [r3, #0]
 80019a8:	187b      	adds	r3, r7, r1
 80019aa:	3201      	adds	r2, #1
 80019ac:	701a      	strb	r2, [r3, #0]
 80019ae:	230f      	movs	r3, #15
 80019b0:	18fb      	adds	r3, r7, r3
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b05      	cmp	r3, #5
 80019b6:	d9de      	bls.n	8001976 <main+0x2a>
  }
  while (1){
	  HAL_ADC_Start(&hadc);
 80019b8:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <main+0x98>)
 80019ba:	0018      	movs	r0, r3
 80019bc:	f000 fbb4 	bl	8002128 <HAL_ADC_Start>
	  //HAL_Delay(DELAY);					// inicializa e realiza a conversão
	  valor = HAL_ADC_GetValue(&hadc);	// pega o valor do adc
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <main+0x98>)
 80019c2:	0018      	movs	r0, r3
 80019c4:	f000 fc04 	bl	80021d0 <HAL_ADC_GetValue>
 80019c8:	0003      	movs	r3, r0
 80019ca:	607b      	str	r3, [r7, #4]
	  GPIOA->ODR=filter(x, valor);
 80019cc:	2390      	movs	r3, #144	; 0x90
 80019ce:	05dc      	lsls	r4, r3, #23
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	0011      	movs	r1, r2
 80019d6:	0018      	movs	r0, r3
 80019d8:	f7ff ff9c 	bl	8001914 <filter>
 80019dc:	0003      	movs	r3, r0
 80019de:	6163      	str	r3, [r4, #20]
	  HAL_ADC_Start(&hadc);
 80019e0:	e7ea      	b.n	80019b8 <main+0x6c>
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	2000008c 	.word	0x2000008c

080019e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019e8:	b590      	push	{r4, r7, lr}
 80019ea:	b091      	sub	sp, #68	; 0x44
 80019ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ee:	2410      	movs	r4, #16
 80019f0:	193b      	adds	r3, r7, r4
 80019f2:	0018      	movs	r0, r3
 80019f4:	2330      	movs	r3, #48	; 0x30
 80019f6:	001a      	movs	r2, r3
 80019f8:	2100      	movs	r1, #0
 80019fa:	f001 fc29 	bl	8003250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019fe:	003b      	movs	r3, r7
 8001a00:	0018      	movs	r0, r3
 8001a02:	2310      	movs	r3, #16
 8001a04:	001a      	movs	r2, r3
 8001a06:	2100      	movs	r1, #0
 8001a08:	f001 fc22 	bl	8003250 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001a0c:	0021      	movs	r1, r4
 8001a0e:	187b      	adds	r3, r7, r1
 8001a10:	2212      	movs	r2, #18
 8001a12:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a14:	187b      	adds	r3, r7, r1
 8001a16:	2201      	movs	r2, #1
 8001a18:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001a1a:	187b      	adds	r3, r7, r1
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a20:	187b      	adds	r3, r7, r1
 8001a22:	2210      	movs	r2, #16
 8001a24:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001a26:	187b      	adds	r3, r7, r1
 8001a28:	2210      	movs	r2, #16
 8001a2a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a2c:	187b      	adds	r3, r7, r1
 8001a2e:	2202      	movs	r2, #2
 8001a30:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a32:	187b      	adds	r3, r7, r1
 8001a34:	2280      	movs	r2, #128	; 0x80
 8001a36:	0212      	lsls	r2, r2, #8
 8001a38:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001a3a:	187b      	adds	r3, r7, r1
 8001a3c:	2280      	movs	r2, #128	; 0x80
 8001a3e:	0352      	lsls	r2, r2, #13
 8001a40:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001a42:	187b      	adds	r3, r7, r1
 8001a44:	2200      	movs	r2, #0
 8001a46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a48:	187b      	adds	r3, r7, r1
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f000 ff88 	bl	8002960 <HAL_RCC_OscConfig>
 8001a50:	1e03      	subs	r3, r0, #0
 8001a52:	d001      	beq.n	8001a58 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001a54:	f000 f8be 	bl	8001bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a58:	003b      	movs	r3, r7
 8001a5a:	2207      	movs	r2, #7
 8001a5c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a5e:	003b      	movs	r3, r7
 8001a60:	2202      	movs	r2, #2
 8001a62:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a64:	003b      	movs	r3, r7
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a6a:	003b      	movs	r3, r7
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a70:	003b      	movs	r3, r7
 8001a72:	2101      	movs	r1, #1
 8001a74:	0018      	movs	r0, r3
 8001a76:	f001 fa91 	bl	8002f9c <HAL_RCC_ClockConfig>
 8001a7a:	1e03      	subs	r3, r0, #0
 8001a7c:	d001      	beq.n	8001a82 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a7e:	f000 f8a9 	bl	8001bd4 <Error_Handler>
  }
}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	46bd      	mov	sp, r7
 8001a86:	b011      	add	sp, #68	; 0x44
 8001a88:	bd90      	pop	{r4, r7, pc}
	...

08001a8c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	0018      	movs	r0, r3
 8001a96:	230c      	movs	r3, #12
 8001a98:	001a      	movs	r2, r3
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	f001 fbd8 	bl	8003250 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001aa0:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <MX_ADC_Init+0xb0>)
 8001aa2:	4a27      	ldr	r2, [pc, #156]	; (8001b40 <MX_ADC_Init+0xb4>)
 8001aa4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001aa6:	4b25      	ldr	r3, [pc, #148]	; (8001b3c <MX_ADC_Init+0xb0>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 8001aac:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <MX_ADC_Init+0xb0>)
 8001aae:	2210      	movs	r2, #16
 8001ab0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ab2:	4b22      	ldr	r3, [pc, #136]	; (8001b3c <MX_ADC_Init+0xb0>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001ab8:	4b20      	ldr	r3, [pc, #128]	; (8001b3c <MX_ADC_Init+0xb0>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001abe:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <MX_ADC_Init+0xb0>)
 8001ac0:	2204      	movs	r2, #4
 8001ac2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001ac4:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <MX_ADC_Init+0xb0>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001aca:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <MX_ADC_Init+0xb0>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <MX_ADC_Init+0xb0>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001ad6:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <MX_ADC_Init+0xb0>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001adc:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <MX_ADC_Init+0xb0>)
 8001ade:	22c2      	movs	r2, #194	; 0xc2
 8001ae0:	32ff      	adds	r2, #255	; 0xff
 8001ae2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ae4:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <MX_ADC_Init+0xb0>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001aea:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <MX_ADC_Init+0xb0>)
 8001aec:	2224      	movs	r2, #36	; 0x24
 8001aee:	2100      	movs	r1, #0
 8001af0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001af2:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <MX_ADC_Init+0xb0>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001af8:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <MX_ADC_Init+0xb0>)
 8001afa:	0018      	movs	r0, r3
 8001afc:	f000 f9d4 	bl	8001ea8 <HAL_ADC_Init>
 8001b00:	1e03      	subs	r3, r0, #0
 8001b02:	d001      	beq.n	8001b08 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001b04:	f000 f866 	bl	8001bd4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	2209      	movs	r2, #9
 8001b0c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	2280      	movs	r2, #128	; 0x80
 8001b12:	0152      	lsls	r2, r2, #5
 8001b14:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	2280      	movs	r2, #128	; 0x80
 8001b1a:	0552      	lsls	r2, r2, #21
 8001b1c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001b1e:	1d3a      	adds	r2, r7, #4
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <MX_ADC_Init+0xb0>)
 8001b22:	0011      	movs	r1, r2
 8001b24:	0018      	movs	r0, r3
 8001b26:	f000 fb5f 	bl	80021e8 <HAL_ADC_ConfigChannel>
 8001b2a:	1e03      	subs	r3, r0, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8001b2e:	f000 f851 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001b32:	46c0      	nop			; (mov r8, r8)
 8001b34:	46bd      	mov	sp, r7
 8001b36:	b004      	add	sp, #16
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	2000008c 	.word	0x2000008c
 8001b40:	40012400 	.word	0x40012400

08001b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b44:	b590      	push	{r4, r7, lr}
 8001b46:	b089      	sub	sp, #36	; 0x24
 8001b48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4a:	240c      	movs	r4, #12
 8001b4c:	193b      	adds	r3, r7, r4
 8001b4e:	0018      	movs	r0, r3
 8001b50:	2314      	movs	r3, #20
 8001b52:	001a      	movs	r2, r3
 8001b54:	2100      	movs	r1, #0
 8001b56:	f001 fb7b 	bl	8003250 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5a:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <MX_GPIO_Init+0x8c>)
 8001b5c:	695a      	ldr	r2, [r3, #20]
 8001b5e:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <MX_GPIO_Init+0x8c>)
 8001b60:	2180      	movs	r1, #128	; 0x80
 8001b62:	0289      	lsls	r1, r1, #10
 8001b64:	430a      	orrs	r2, r1
 8001b66:	615a      	str	r2, [r3, #20]
 8001b68:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <MX_GPIO_Init+0x8c>)
 8001b6a:	695a      	ldr	r2, [r3, #20]
 8001b6c:	2380      	movs	r3, #128	; 0x80
 8001b6e:	029b      	lsls	r3, r3, #10
 8001b70:	4013      	ands	r3, r2
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b76:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <MX_GPIO_Init+0x8c>)
 8001b78:	695a      	ldr	r2, [r3, #20]
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <MX_GPIO_Init+0x8c>)
 8001b7c:	2180      	movs	r1, #128	; 0x80
 8001b7e:	02c9      	lsls	r1, r1, #11
 8001b80:	430a      	orrs	r2, r1
 8001b82:	615a      	str	r2, [r3, #20]
 8001b84:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <MX_GPIO_Init+0x8c>)
 8001b86:	695a      	ldr	r2, [r3, #20]
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	02db      	lsls	r3, r3, #11
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b92:	2390      	movs	r3, #144	; 0x90
 8001b94:	05db      	lsls	r3, r3, #23
 8001b96:	2200      	movs	r2, #0
 8001b98:	21ff      	movs	r1, #255	; 0xff
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	f000 fec2 	bl	8002924 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001ba0:	0021      	movs	r1, r4
 8001ba2:	187b      	adds	r3, r7, r1
 8001ba4:	22ff      	movs	r2, #255	; 0xff
 8001ba6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba8:	187b      	adds	r3, r7, r1
 8001baa:	2201      	movs	r2, #1
 8001bac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	187b      	adds	r3, r7, r1
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb4:	187b      	adds	r3, r7, r1
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	187a      	adds	r2, r7, r1
 8001bbc:	2390      	movs	r3, #144	; 0x90
 8001bbe:	05db      	lsls	r3, r3, #23
 8001bc0:	0011      	movs	r1, r2
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f000 fd3e 	bl	8002644 <HAL_GPIO_Init>

}
 8001bc8:	46c0      	nop			; (mov r8, r8)
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	b009      	add	sp, #36	; 0x24
 8001bce:	bd90      	pop	{r4, r7, pc}
 8001bd0:	40021000 	.word	0x40021000

08001bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd8:	b672      	cpsid	i
}
 8001bda:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <Error_Handler+0x8>
	...

08001be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be6:	4b0f      	ldr	r3, [pc, #60]	; (8001c24 <HAL_MspInit+0x44>)
 8001be8:	699a      	ldr	r2, [r3, #24]
 8001bea:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <HAL_MspInit+0x44>)
 8001bec:	2101      	movs	r1, #1
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	619a      	str	r2, [r3, #24]
 8001bf2:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <HAL_MspInit+0x44>)
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	607b      	str	r3, [r7, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfe:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <HAL_MspInit+0x44>)
 8001c00:	69da      	ldr	r2, [r3, #28]
 8001c02:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <HAL_MspInit+0x44>)
 8001c04:	2180      	movs	r1, #128	; 0x80
 8001c06:	0549      	lsls	r1, r1, #21
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	61da      	str	r2, [r3, #28]
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <HAL_MspInit+0x44>)
 8001c0e:	69da      	ldr	r2, [r3, #28]
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	055b      	lsls	r3, r3, #21
 8001c14:	4013      	ands	r3, r2
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	b002      	add	sp, #8
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	40021000 	.word	0x40021000

08001c28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c28:	b590      	push	{r4, r7, lr}
 8001c2a:	b08b      	sub	sp, #44	; 0x2c
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	2414      	movs	r4, #20
 8001c32:	193b      	adds	r3, r7, r4
 8001c34:	0018      	movs	r0, r3
 8001c36:	2314      	movs	r3, #20
 8001c38:	001a      	movs	r2, r3
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	f001 fb08 	bl	8003250 <memset>
  if(hadc->Instance==ADC1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a18      	ldr	r2, [pc, #96]	; (8001ca8 <HAL_ADC_MspInit+0x80>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d12a      	bne.n	8001ca0 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c4a:	4b18      	ldr	r3, [pc, #96]	; (8001cac <HAL_ADC_MspInit+0x84>)
 8001c4c:	699a      	ldr	r2, [r3, #24]
 8001c4e:	4b17      	ldr	r3, [pc, #92]	; (8001cac <HAL_ADC_MspInit+0x84>)
 8001c50:	2180      	movs	r1, #128	; 0x80
 8001c52:	0089      	lsls	r1, r1, #2
 8001c54:	430a      	orrs	r2, r1
 8001c56:	619a      	str	r2, [r3, #24]
 8001c58:	4b14      	ldr	r3, [pc, #80]	; (8001cac <HAL_ADC_MspInit+0x84>)
 8001c5a:	699a      	ldr	r2, [r3, #24]
 8001c5c:	2380      	movs	r3, #128	; 0x80
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c66:	4b11      	ldr	r3, [pc, #68]	; (8001cac <HAL_ADC_MspInit+0x84>)
 8001c68:	695a      	ldr	r2, [r3, #20]
 8001c6a:	4b10      	ldr	r3, [pc, #64]	; (8001cac <HAL_ADC_MspInit+0x84>)
 8001c6c:	2180      	movs	r1, #128	; 0x80
 8001c6e:	02c9      	lsls	r1, r1, #11
 8001c70:	430a      	orrs	r2, r1
 8001c72:	615a      	str	r2, [r3, #20]
 8001c74:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <HAL_ADC_MspInit+0x84>)
 8001c76:	695a      	ldr	r2, [r3, #20]
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	02db      	lsls	r3, r3, #11
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c82:	193b      	adds	r3, r7, r4
 8001c84:	2202      	movs	r2, #2
 8001c86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c88:	193b      	adds	r3, r7, r4
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	193b      	adds	r3, r7, r4
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c94:	193b      	adds	r3, r7, r4
 8001c96:	4a06      	ldr	r2, [pc, #24]	; (8001cb0 <HAL_ADC_MspInit+0x88>)
 8001c98:	0019      	movs	r1, r3
 8001c9a:	0010      	movs	r0, r2
 8001c9c:	f000 fcd2 	bl	8002644 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ca0:	46c0      	nop			; (mov r8, r8)
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	b00b      	add	sp, #44	; 0x2c
 8001ca6:	bd90      	pop	{r4, r7, pc}
 8001ca8:	40012400 	.word	0x40012400
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	48000400 	.word	0x48000400

08001cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <NMI_Handler+0x4>

08001cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <HardFault_Handler+0x4>

08001cc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001cc4:	46c0      	nop			; (mov r8, r8)
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cce:	46c0      	nop			; (mov r8, r8)
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd8:	f000 f8ca 	bl	8001e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cdc:	46c0      	nop			; (mov r8, r8)
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cec:	4a14      	ldr	r2, [pc, #80]	; (8001d40 <_sbrk+0x5c>)
 8001cee:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <_sbrk+0x60>)
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf8:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <_sbrk+0x64>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d102      	bne.n	8001d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d00:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <_sbrk+0x64>)
 8001d02:	4a12      	ldr	r2, [pc, #72]	; (8001d4c <_sbrk+0x68>)
 8001d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d06:	4b10      	ldr	r3, [pc, #64]	; (8001d48 <_sbrk+0x64>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	18d3      	adds	r3, r2, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d207      	bcs.n	8001d24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d14:	f001 fa68 	bl	80031e8 <__errno>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	220c      	movs	r2, #12
 8001d1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	425b      	negs	r3, r3
 8001d22:	e009      	b.n	8001d38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d24:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <_sbrk+0x64>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d2a:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <_sbrk+0x64>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	18d2      	adds	r2, r2, r3
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <_sbrk+0x64>)
 8001d34:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001d36:	68fb      	ldr	r3, [r7, #12]
}
 8001d38:	0018      	movs	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	b006      	add	sp, #24
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20001800 	.word	0x20001800
 8001d44:	00000400 	.word	0x00000400
 8001d48:	200000d0 	.word	0x200000d0
 8001d4c:	200000e8 	.word	0x200000e8

08001d50 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001d54:	46c0      	nop			; (mov r8, r8)
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d5c:	4813      	ldr	r0, [pc, #76]	; (8001dac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d5e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d60:	f7ff fff6 	bl	8001d50 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001d64:	4812      	ldr	r0, [pc, #72]	; (8001db0 <LoopForever+0x6>)
    LDR R1, [R0]
 8001d66:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001d68:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001d6a:	4a12      	ldr	r2, [pc, #72]	; (8001db4 <LoopForever+0xa>)
    CMP R1, R2
 8001d6c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001d6e:	d105      	bne.n	8001d7c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001d70:	4811      	ldr	r0, [pc, #68]	; (8001db8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001d72:	4912      	ldr	r1, [pc, #72]	; (8001dbc <LoopForever+0x12>)
    STR R1, [R0]
 8001d74:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001d76:	4812      	ldr	r0, [pc, #72]	; (8001dc0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001d78:	4912      	ldr	r1, [pc, #72]	; (8001dc4 <LoopForever+0x1a>)
    STR R1, [R0]
 8001d7a:	6001      	str	r1, [r0, #0]

08001d7c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d7c:	4812      	ldr	r0, [pc, #72]	; (8001dc8 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001d7e:	4913      	ldr	r1, [pc, #76]	; (8001dcc <LoopForever+0x22>)
  ldr r2, =_sidata
 8001d80:	4a13      	ldr	r2, [pc, #76]	; (8001dd0 <LoopForever+0x26>)
  movs r3, #0
 8001d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d84:	e002      	b.n	8001d8c <LoopCopyDataInit>

08001d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8a:	3304      	adds	r3, #4

08001d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d90:	d3f9      	bcc.n	8001d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d92:	4a10      	ldr	r2, [pc, #64]	; (8001dd4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001d94:	4c10      	ldr	r4, [pc, #64]	; (8001dd8 <LoopForever+0x2e>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d98:	e001      	b.n	8001d9e <LoopFillZerobss>

08001d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d9c:	3204      	adds	r2, #4

08001d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da0:	d3fb      	bcc.n	8001d9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001da2:	f001 fa27 	bl	80031f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001da6:	f7ff fdd1 	bl	800194c <main>

08001daa <LoopForever>:

LoopForever:
    b LoopForever
 8001daa:	e7fe      	b.n	8001daa <LoopForever>
  ldr   r0, =_estack
 8001dac:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001db0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001db4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001db8:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001dbc:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001dc0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001dc4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dcc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001dd0:	08003468 	.word	0x08003468
  ldr r2, =_sbss
 8001dd4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001dd8:	200000e8 	.word	0x200000e8

08001ddc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ddc:	e7fe      	b.n	8001ddc <ADC1_IRQHandler>
	...

08001de0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de4:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <HAL_Init+0x24>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_Init+0x24>)
 8001dea:	2110      	movs	r1, #16
 8001dec:	430a      	orrs	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001df0:	2003      	movs	r0, #3
 8001df2:	f000 f809 	bl	8001e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001df6:	f7ff fef3 	bl	8001be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	40022000 	.word	0x40022000

08001e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e08:	b590      	push	{r4, r7, lr}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e10:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <HAL_InitTick+0x5c>)
 8001e12:	681c      	ldr	r4, [r3, #0]
 8001e14:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <HAL_InitTick+0x60>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	0019      	movs	r1, r3
 8001e1a:	23fa      	movs	r3, #250	; 0xfa
 8001e1c:	0098      	lsls	r0, r3, #2
 8001e1e:	f7fe f973 	bl	8000108 <__udivsi3>
 8001e22:	0003      	movs	r3, r0
 8001e24:	0019      	movs	r1, r3
 8001e26:	0020      	movs	r0, r4
 8001e28:	f7fe f96e 	bl	8000108 <__udivsi3>
 8001e2c:	0003      	movs	r3, r0
 8001e2e:	0018      	movs	r0, r3
 8001e30:	f000 fbfb 	bl	800262a <HAL_SYSTICK_Config>
 8001e34:	1e03      	subs	r3, r0, #0
 8001e36:	d001      	beq.n	8001e3c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e00f      	b.n	8001e5c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b03      	cmp	r3, #3
 8001e40:	d80b      	bhi.n	8001e5a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	2301      	movs	r3, #1
 8001e46:	425b      	negs	r3, r3
 8001e48:	2200      	movs	r2, #0
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	f000 fbd8 	bl	8002600 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e50:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_InitTick+0x64>)
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
 8001e58:	e000      	b.n	8001e5c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
}
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	b003      	add	sp, #12
 8001e62:	bd90      	pop	{r4, r7, pc}
 8001e64:	20000000 	.word	0x20000000
 8001e68:	20000008 	.word	0x20000008
 8001e6c:	20000004 	.word	0x20000004

08001e70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e74:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <HAL_IncTick+0x1c>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	001a      	movs	r2, r3
 8001e7a:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <HAL_IncTick+0x20>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	18d2      	adds	r2, r2, r3
 8001e80:	4b03      	ldr	r3, [pc, #12]	; (8001e90 <HAL_IncTick+0x20>)
 8001e82:	601a      	str	r2, [r3, #0]
}
 8001e84:	46c0      	nop			; (mov r8, r8)
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	20000008 	.word	0x20000008
 8001e90:	200000d4 	.word	0x200000d4

08001e94 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  return uwTick;
 8001e98:	4b02      	ldr	r3, [pc, #8]	; (8001ea4 <HAL_GetTick+0x10>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
}
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	200000d4 	.word	0x200000d4

08001ea8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eb0:	230f      	movs	r3, #15
 8001eb2:	18fb      	adds	r3, r7, r3
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e125      	b.n	8002112 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10a      	bne.n	8001ee4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2234      	movs	r2, #52	; 0x34
 8001ed8:	2100      	movs	r1, #0
 8001eda:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	0018      	movs	r0, r3
 8001ee0:	f7ff fea2 	bl	8001c28 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee8:	2210      	movs	r2, #16
 8001eea:	4013      	ands	r3, r2
 8001eec:	d000      	beq.n	8001ef0 <HAL_ADC_Init+0x48>
 8001eee:	e103      	b.n	80020f8 <HAL_ADC_Init+0x250>
 8001ef0:	230f      	movs	r3, #15
 8001ef2:	18fb      	adds	r3, r7, r3
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d000      	beq.n	8001efc <HAL_ADC_Init+0x54>
 8001efa:	e0fd      	b.n	80020f8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2204      	movs	r2, #4
 8001f04:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001f06:	d000      	beq.n	8001f0a <HAL_ADC_Init+0x62>
 8001f08:	e0f6      	b.n	80020f8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0e:	4a83      	ldr	r2, [pc, #524]	; (800211c <HAL_ADC_Init+0x274>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	2202      	movs	r2, #2
 8001f14:	431a      	orrs	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	2203      	movs	r2, #3
 8001f22:	4013      	ands	r3, r2
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d112      	bne.n	8001f4e <HAL_ADC_Init+0xa6>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	4013      	ands	r3, r2
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d009      	beq.n	8001f4a <HAL_ADC_Init+0xa2>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	2380      	movs	r3, #128	; 0x80
 8001f3e:	021b      	lsls	r3, r3, #8
 8001f40:	401a      	ands	r2, r3
 8001f42:	2380      	movs	r3, #128	; 0x80
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d101      	bne.n	8001f4e <HAL_ADC_Init+0xa6>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <HAL_ADC_Init+0xa8>
 8001f4e:	2300      	movs	r3, #0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d116      	bne.n	8001f82 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	2218      	movs	r2, #24
 8001f5c:	4393      	bics	r3, r2
 8001f5e:	0019      	movs	r1, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	0899      	lsrs	r1, r3, #2
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68da      	ldr	r2, [r3, #12]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4964      	ldr	r1, [pc, #400]	; (8002120 <HAL_ADC_Init+0x278>)
 8001f8e:	400a      	ands	r2, r1
 8001f90:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	7e1b      	ldrb	r3, [r3, #24]
 8001f96:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	7e5b      	ldrb	r3, [r3, #25]
 8001f9c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f9e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	7e9b      	ldrb	r3, [r3, #26]
 8001fa4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001fa6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d002      	beq.n	8001fb6 <HAL_ADC_Init+0x10e>
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	015b      	lsls	r3, r3, #5
 8001fb4:	e000      	b.n	8001fb8 <HAL_ADC_Init+0x110>
 8001fb6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001fb8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001fbe:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d101      	bne.n	8001fcc <HAL_ADC_Init+0x124>
 8001fc8:	2304      	movs	r3, #4
 8001fca:	e000      	b.n	8001fce <HAL_ADC_Init+0x126>
 8001fcc:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001fce:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2124      	movs	r1, #36	; 0x24
 8001fd4:	5c5b      	ldrb	r3, [r3, r1]
 8001fd6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001fd8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	7edb      	ldrb	r3, [r3, #27]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d115      	bne.n	8002014 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	7e9b      	ldrb	r3, [r3, #26]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d105      	bne.n	8001ffc <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2280      	movs	r2, #128	; 0x80
 8001ff4:	0252      	lsls	r2, r2, #9
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	e00b      	b.n	8002014 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002000:	2220      	movs	r2, #32
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200c:	2201      	movs	r2, #1
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69da      	ldr	r2, [r3, #28]
 8002018:	23c2      	movs	r3, #194	; 0xc2
 800201a:	33ff      	adds	r3, #255	; 0xff
 800201c:	429a      	cmp	r2, r3
 800201e:	d007      	beq.n	8002030 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002028:	4313      	orrs	r3, r2
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	4313      	orrs	r3, r2
 800202e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68d9      	ldr	r1, [r3, #12]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	430a      	orrs	r2, r1
 800203e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	055b      	lsls	r3, r3, #21
 8002048:	429a      	cmp	r2, r3
 800204a:	d01b      	beq.n	8002084 <HAL_ADC_Init+0x1dc>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002050:	2b01      	cmp	r3, #1
 8002052:	d017      	beq.n	8002084 <HAL_ADC_Init+0x1dc>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002058:	2b02      	cmp	r3, #2
 800205a:	d013      	beq.n	8002084 <HAL_ADC_Init+0x1dc>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	2b03      	cmp	r3, #3
 8002062:	d00f      	beq.n	8002084 <HAL_ADC_Init+0x1dc>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	2b04      	cmp	r3, #4
 800206a:	d00b      	beq.n	8002084 <HAL_ADC_Init+0x1dc>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002070:	2b05      	cmp	r3, #5
 8002072:	d007      	beq.n	8002084 <HAL_ADC_Init+0x1dc>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002078:	2b06      	cmp	r3, #6
 800207a:	d003      	beq.n	8002084 <HAL_ADC_Init+0x1dc>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002080:	2b07      	cmp	r3, #7
 8002082:	d112      	bne.n	80020aa <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	695a      	ldr	r2, [r3, #20]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2107      	movs	r1, #7
 8002090:	438a      	bics	r2, r1
 8002092:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6959      	ldr	r1, [r3, #20]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209e:	2207      	movs	r2, #7
 80020a0:	401a      	ands	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4a1c      	ldr	r2, [pc, #112]	; (8002124 <HAL_ADC_Init+0x27c>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d10b      	bne.n	80020d2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c4:	2203      	movs	r2, #3
 80020c6:	4393      	bics	r3, r2
 80020c8:	2201      	movs	r2, #1
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80020d0:	e01c      	b.n	800210c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d6:	2212      	movs	r2, #18
 80020d8:	4393      	bics	r3, r2
 80020da:	2210      	movs	r2, #16
 80020dc:	431a      	orrs	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e6:	2201      	movs	r2, #1
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80020ee:	230f      	movs	r3, #15
 80020f0:	18fb      	adds	r3, r7, r3
 80020f2:	2201      	movs	r2, #1
 80020f4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80020f6:	e009      	b.n	800210c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fc:	2210      	movs	r2, #16
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002104:	230f      	movs	r3, #15
 8002106:	18fb      	adds	r3, r7, r3
 8002108:	2201      	movs	r2, #1
 800210a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800210c:	230f      	movs	r3, #15
 800210e:	18fb      	adds	r3, r7, r3
 8002110:	781b      	ldrb	r3, [r3, #0]
}
 8002112:	0018      	movs	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	b004      	add	sp, #16
 8002118:	bd80      	pop	{r7, pc}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	fffffefd 	.word	0xfffffefd
 8002120:	fffe0219 	.word	0xfffe0219
 8002124:	833fffe7 	.word	0x833fffe7

08002128 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002128:	b590      	push	{r4, r7, lr}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002130:	230f      	movs	r3, #15
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2204      	movs	r2, #4
 8002140:	4013      	ands	r3, r2
 8002142:	d138      	bne.n	80021b6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2234      	movs	r2, #52	; 0x34
 8002148:	5c9b      	ldrb	r3, [r3, r2]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_ADC_Start+0x2a>
 800214e:	2302      	movs	r3, #2
 8002150:	e038      	b.n	80021c4 <HAL_ADC_Start+0x9c>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2234      	movs	r2, #52	; 0x34
 8002156:	2101      	movs	r1, #1
 8002158:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	7e5b      	ldrb	r3, [r3, #25]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d007      	beq.n	8002172 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002162:	230f      	movs	r3, #15
 8002164:	18fc      	adds	r4, r7, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	0018      	movs	r0, r3
 800216a:	f000 f933 	bl	80023d4 <ADC_Enable>
 800216e:	0003      	movs	r3, r0
 8002170:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002172:	230f      	movs	r3, #15
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d120      	bne.n	80021be <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002180:	4a12      	ldr	r2, [pc, #72]	; (80021cc <HAL_ADC_Start+0xa4>)
 8002182:	4013      	ands	r3, r2
 8002184:	2280      	movs	r2, #128	; 0x80
 8002186:	0052      	lsls	r2, r2, #1
 8002188:	431a      	orrs	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2234      	movs	r2, #52	; 0x34
 8002198:	2100      	movs	r1, #0
 800219a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	221c      	movs	r2, #28
 80021a2:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2104      	movs	r1, #4
 80021b0:	430a      	orrs	r2, r1
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	e003      	b.n	80021be <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021b6:	230f      	movs	r3, #15
 80021b8:	18fb      	adds	r3, r7, r3
 80021ba:	2202      	movs	r2, #2
 80021bc:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80021be:	230f      	movs	r3, #15
 80021c0:	18fb      	adds	r3, r7, r3
 80021c2:	781b      	ldrb	r3, [r3, #0]
}
 80021c4:	0018      	movs	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	b005      	add	sp, #20
 80021ca:	bd90      	pop	{r4, r7, pc}
 80021cc:	fffff0fe 	.word	0xfffff0fe

080021d0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80021de:	0018      	movs	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	b002      	add	sp, #8
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021f2:	230f      	movs	r3, #15
 80021f4:	18fb      	adds	r3, r7, r3
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	055b      	lsls	r3, r3, #21
 8002206:	429a      	cmp	r2, r3
 8002208:	d011      	beq.n	800222e <HAL_ADC_ConfigChannel+0x46>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220e:	2b01      	cmp	r3, #1
 8002210:	d00d      	beq.n	800222e <HAL_ADC_ConfigChannel+0x46>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002216:	2b02      	cmp	r3, #2
 8002218:	d009      	beq.n	800222e <HAL_ADC_ConfigChannel+0x46>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221e:	2b03      	cmp	r3, #3
 8002220:	d005      	beq.n	800222e <HAL_ADC_ConfigChannel+0x46>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002226:	2b04      	cmp	r3, #4
 8002228:	d001      	beq.n	800222e <HAL_ADC_ConfigChannel+0x46>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2234      	movs	r2, #52	; 0x34
 8002232:	5c9b      	ldrb	r3, [r3, r2]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d101      	bne.n	800223c <HAL_ADC_ConfigChannel+0x54>
 8002238:	2302      	movs	r3, #2
 800223a:	e0bb      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x1cc>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2234      	movs	r2, #52	; 0x34
 8002240:	2101      	movs	r1, #1
 8002242:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	2204      	movs	r2, #4
 800224c:	4013      	ands	r3, r2
 800224e:	d000      	beq.n	8002252 <HAL_ADC_ConfigChannel+0x6a>
 8002250:	e09f      	b.n	8002392 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	4a59      	ldr	r2, [pc, #356]	; (80023bc <HAL_ADC_ConfigChannel+0x1d4>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d100      	bne.n	800225e <HAL_ADC_ConfigChannel+0x76>
 800225c:	e077      	b.n	800234e <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2201      	movs	r2, #1
 800226a:	409a      	lsls	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002278:	2380      	movs	r3, #128	; 0x80
 800227a:	055b      	lsls	r3, r3, #21
 800227c:	429a      	cmp	r2, r3
 800227e:	d037      	beq.n	80022f0 <HAL_ADC_ConfigChannel+0x108>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002284:	2b01      	cmp	r3, #1
 8002286:	d033      	beq.n	80022f0 <HAL_ADC_ConfigChannel+0x108>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228c:	2b02      	cmp	r3, #2
 800228e:	d02f      	beq.n	80022f0 <HAL_ADC_ConfigChannel+0x108>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002294:	2b03      	cmp	r3, #3
 8002296:	d02b      	beq.n	80022f0 <HAL_ADC_ConfigChannel+0x108>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	2b04      	cmp	r3, #4
 800229e:	d027      	beq.n	80022f0 <HAL_ADC_ConfigChannel+0x108>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a4:	2b05      	cmp	r3, #5
 80022a6:	d023      	beq.n	80022f0 <HAL_ADC_ConfigChannel+0x108>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ac:	2b06      	cmp	r3, #6
 80022ae:	d01f      	beq.n	80022f0 <HAL_ADC_ConfigChannel+0x108>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b4:	2b07      	cmp	r3, #7
 80022b6:	d01b      	beq.n	80022f0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	2107      	movs	r1, #7
 80022c4:	400b      	ands	r3, r1
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d012      	beq.n	80022f0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	695a      	ldr	r2, [r3, #20]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2107      	movs	r1, #7
 80022d6:	438a      	bics	r2, r1
 80022d8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6959      	ldr	r1, [r3, #20]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2207      	movs	r2, #7
 80022e6:	401a      	ands	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b10      	cmp	r3, #16
 80022f6:	d003      	beq.n	8002300 <HAL_ADC_ConfigChannel+0x118>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b11      	cmp	r3, #17
 80022fe:	d152      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002300:	4b2f      	ldr	r3, [pc, #188]	; (80023c0 <HAL_ADC_ConfigChannel+0x1d8>)
 8002302:	6819      	ldr	r1, [r3, #0]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b10      	cmp	r3, #16
 800230a:	d102      	bne.n	8002312 <HAL_ADC_ConfigChannel+0x12a>
 800230c:	2380      	movs	r3, #128	; 0x80
 800230e:	041b      	lsls	r3, r3, #16
 8002310:	e001      	b.n	8002316 <HAL_ADC_ConfigChannel+0x12e>
 8002312:	2380      	movs	r3, #128	; 0x80
 8002314:	03db      	lsls	r3, r3, #15
 8002316:	4a2a      	ldr	r2, [pc, #168]	; (80023c0 <HAL_ADC_ConfigChannel+0x1d8>)
 8002318:	430b      	orrs	r3, r1
 800231a:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b10      	cmp	r3, #16
 8002322:	d140      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002324:	4b27      	ldr	r3, [pc, #156]	; (80023c4 <HAL_ADC_ConfigChannel+0x1dc>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4927      	ldr	r1, [pc, #156]	; (80023c8 <HAL_ADC_ConfigChannel+0x1e0>)
 800232a:	0018      	movs	r0, r3
 800232c:	f7fd feec 	bl	8000108 <__udivsi3>
 8002330:	0003      	movs	r3, r0
 8002332:	001a      	movs	r2, r3
 8002334:	0013      	movs	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	189b      	adds	r3, r3, r2
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800233e:	e002      	b.n	8002346 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	3b01      	subs	r3, #1
 8002344:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1f9      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x158>
 800234c:	e02b      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2101      	movs	r1, #1
 800235a:	4099      	lsls	r1, r3
 800235c:	000b      	movs	r3, r1
 800235e:	43d9      	mvns	r1, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	400a      	ands	r2, r1
 8002366:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b10      	cmp	r3, #16
 800236e:	d003      	beq.n	8002378 <HAL_ADC_ConfigChannel+0x190>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b11      	cmp	r3, #17
 8002376:	d116      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002378:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <HAL_ADC_ConfigChannel+0x1d8>)
 800237a:	6819      	ldr	r1, [r3, #0]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b10      	cmp	r3, #16
 8002382:	d101      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x1a0>
 8002384:	4a11      	ldr	r2, [pc, #68]	; (80023cc <HAL_ADC_ConfigChannel+0x1e4>)
 8002386:	e000      	b.n	800238a <HAL_ADC_ConfigChannel+0x1a2>
 8002388:	4a11      	ldr	r2, [pc, #68]	; (80023d0 <HAL_ADC_ConfigChannel+0x1e8>)
 800238a:	4b0d      	ldr	r3, [pc, #52]	; (80023c0 <HAL_ADC_ConfigChannel+0x1d8>)
 800238c:	400a      	ands	r2, r1
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	e009      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002396:	2220      	movs	r2, #32
 8002398:	431a      	orrs	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800239e:	230f      	movs	r3, #15
 80023a0:	18fb      	adds	r3, r7, r3
 80023a2:	2201      	movs	r2, #1
 80023a4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2234      	movs	r2, #52	; 0x34
 80023aa:	2100      	movs	r1, #0
 80023ac:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80023ae:	230f      	movs	r3, #15
 80023b0:	18fb      	adds	r3, r7, r3
 80023b2:	781b      	ldrb	r3, [r3, #0]
}
 80023b4:	0018      	movs	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	b004      	add	sp, #16
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	00001001 	.word	0x00001001
 80023c0:	40012708 	.word	0x40012708
 80023c4:	20000000 	.word	0x20000000
 80023c8:	000f4240 	.word	0x000f4240
 80023cc:	ff7fffff 	.word	0xff7fffff
 80023d0:	ffbfffff 	.word	0xffbfffff

080023d4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2203      	movs	r2, #3
 80023ec:	4013      	ands	r3, r2
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d112      	bne.n	8002418 <ADC_Enable+0x44>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2201      	movs	r2, #1
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d009      	beq.n	8002414 <ADC_Enable+0x40>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	2380      	movs	r3, #128	; 0x80
 8002408:	021b      	lsls	r3, r3, #8
 800240a:	401a      	ands	r2, r3
 800240c:	2380      	movs	r3, #128	; 0x80
 800240e:	021b      	lsls	r3, r3, #8
 8002410:	429a      	cmp	r2, r3
 8002412:	d101      	bne.n	8002418 <ADC_Enable+0x44>
 8002414:	2301      	movs	r3, #1
 8002416:	e000      	b.n	800241a <ADC_Enable+0x46>
 8002418:	2300      	movs	r3, #0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d152      	bne.n	80024c4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	4a2a      	ldr	r2, [pc, #168]	; (80024d0 <ADC_Enable+0xfc>)
 8002426:	4013      	ands	r3, r2
 8002428:	d00d      	beq.n	8002446 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242e:	2210      	movs	r2, #16
 8002430:	431a      	orrs	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243a:	2201      	movs	r2, #1
 800243c:	431a      	orrs	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e03f      	b.n	80024c6 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2101      	movs	r1, #1
 8002452:	430a      	orrs	r2, r1
 8002454:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002456:	4b1f      	ldr	r3, [pc, #124]	; (80024d4 <ADC_Enable+0x100>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	491f      	ldr	r1, [pc, #124]	; (80024d8 <ADC_Enable+0x104>)
 800245c:	0018      	movs	r0, r3
 800245e:	f7fd fe53 	bl	8000108 <__udivsi3>
 8002462:	0003      	movs	r3, r0
 8002464:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002466:	e002      	b.n	800246e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	3b01      	subs	r3, #1
 800246c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1f9      	bne.n	8002468 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002474:	f7ff fd0e 	bl	8001e94 <HAL_GetTick>
 8002478:	0003      	movs	r3, r0
 800247a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800247c:	e01b      	b.n	80024b6 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800247e:	f7ff fd09 	bl	8001e94 <HAL_GetTick>
 8002482:	0002      	movs	r2, r0
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d914      	bls.n	80024b6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2201      	movs	r2, #1
 8002494:	4013      	ands	r3, r2
 8002496:	2b01      	cmp	r3, #1
 8002498:	d00d      	beq.n	80024b6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249e:	2210      	movs	r2, #16
 80024a0:	431a      	orrs	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024aa:	2201      	movs	r2, #1
 80024ac:	431a      	orrs	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e007      	b.n	80024c6 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2201      	movs	r2, #1
 80024be:	4013      	ands	r3, r2
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d1dc      	bne.n	800247e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	0018      	movs	r0, r3
 80024c8:	46bd      	mov	sp, r7
 80024ca:	b004      	add	sp, #16
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	80000017 	.word	0x80000017
 80024d4:	20000000 	.word	0x20000000
 80024d8:	000f4240 	.word	0x000f4240

080024dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024dc:	b590      	push	{r4, r7, lr}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	0002      	movs	r2, r0
 80024e4:	6039      	str	r1, [r7, #0]
 80024e6:	1dfb      	adds	r3, r7, #7
 80024e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80024ea:	1dfb      	adds	r3, r7, #7
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b7f      	cmp	r3, #127	; 0x7f
 80024f0:	d828      	bhi.n	8002544 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024f2:	4a2f      	ldr	r2, [pc, #188]	; (80025b0 <__NVIC_SetPriority+0xd4>)
 80024f4:	1dfb      	adds	r3, r7, #7
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	b25b      	sxtb	r3, r3
 80024fa:	089b      	lsrs	r3, r3, #2
 80024fc:	33c0      	adds	r3, #192	; 0xc0
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	589b      	ldr	r3, [r3, r2]
 8002502:	1dfa      	adds	r2, r7, #7
 8002504:	7812      	ldrb	r2, [r2, #0]
 8002506:	0011      	movs	r1, r2
 8002508:	2203      	movs	r2, #3
 800250a:	400a      	ands	r2, r1
 800250c:	00d2      	lsls	r2, r2, #3
 800250e:	21ff      	movs	r1, #255	; 0xff
 8002510:	4091      	lsls	r1, r2
 8002512:	000a      	movs	r2, r1
 8002514:	43d2      	mvns	r2, r2
 8002516:	401a      	ands	r2, r3
 8002518:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	019b      	lsls	r3, r3, #6
 800251e:	22ff      	movs	r2, #255	; 0xff
 8002520:	401a      	ands	r2, r3
 8002522:	1dfb      	adds	r3, r7, #7
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	0018      	movs	r0, r3
 8002528:	2303      	movs	r3, #3
 800252a:	4003      	ands	r3, r0
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002530:	481f      	ldr	r0, [pc, #124]	; (80025b0 <__NVIC_SetPriority+0xd4>)
 8002532:	1dfb      	adds	r3, r7, #7
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	b25b      	sxtb	r3, r3
 8002538:	089b      	lsrs	r3, r3, #2
 800253a:	430a      	orrs	r2, r1
 800253c:	33c0      	adds	r3, #192	; 0xc0
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002542:	e031      	b.n	80025a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002544:	4a1b      	ldr	r2, [pc, #108]	; (80025b4 <__NVIC_SetPriority+0xd8>)
 8002546:	1dfb      	adds	r3, r7, #7
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	0019      	movs	r1, r3
 800254c:	230f      	movs	r3, #15
 800254e:	400b      	ands	r3, r1
 8002550:	3b08      	subs	r3, #8
 8002552:	089b      	lsrs	r3, r3, #2
 8002554:	3306      	adds	r3, #6
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	18d3      	adds	r3, r2, r3
 800255a:	3304      	adds	r3, #4
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	1dfa      	adds	r2, r7, #7
 8002560:	7812      	ldrb	r2, [r2, #0]
 8002562:	0011      	movs	r1, r2
 8002564:	2203      	movs	r2, #3
 8002566:	400a      	ands	r2, r1
 8002568:	00d2      	lsls	r2, r2, #3
 800256a:	21ff      	movs	r1, #255	; 0xff
 800256c:	4091      	lsls	r1, r2
 800256e:	000a      	movs	r2, r1
 8002570:	43d2      	mvns	r2, r2
 8002572:	401a      	ands	r2, r3
 8002574:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	019b      	lsls	r3, r3, #6
 800257a:	22ff      	movs	r2, #255	; 0xff
 800257c:	401a      	ands	r2, r3
 800257e:	1dfb      	adds	r3, r7, #7
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	0018      	movs	r0, r3
 8002584:	2303      	movs	r3, #3
 8002586:	4003      	ands	r3, r0
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800258c:	4809      	ldr	r0, [pc, #36]	; (80025b4 <__NVIC_SetPriority+0xd8>)
 800258e:	1dfb      	adds	r3, r7, #7
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	001c      	movs	r4, r3
 8002594:	230f      	movs	r3, #15
 8002596:	4023      	ands	r3, r4
 8002598:	3b08      	subs	r3, #8
 800259a:	089b      	lsrs	r3, r3, #2
 800259c:	430a      	orrs	r2, r1
 800259e:	3306      	adds	r3, #6
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	18c3      	adds	r3, r0, r3
 80025a4:	3304      	adds	r3, #4
 80025a6:	601a      	str	r2, [r3, #0]
}
 80025a8:	46c0      	nop			; (mov r8, r8)
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b003      	add	sp, #12
 80025ae:	bd90      	pop	{r4, r7, pc}
 80025b0:	e000e100 	.word	0xe000e100
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	1e5a      	subs	r2, r3, #1
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	045b      	lsls	r3, r3, #17
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d301      	bcc.n	80025d0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025cc:	2301      	movs	r3, #1
 80025ce:	e010      	b.n	80025f2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025d0:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <SysTick_Config+0x44>)
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	3a01      	subs	r2, #1
 80025d6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025d8:	2301      	movs	r3, #1
 80025da:	425b      	negs	r3, r3
 80025dc:	2103      	movs	r1, #3
 80025de:	0018      	movs	r0, r3
 80025e0:	f7ff ff7c 	bl	80024dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <SysTick_Config+0x44>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ea:	4b04      	ldr	r3, [pc, #16]	; (80025fc <SysTick_Config+0x44>)
 80025ec:	2207      	movs	r2, #7
 80025ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	0018      	movs	r0, r3
 80025f4:	46bd      	mov	sp, r7
 80025f6:	b002      	add	sp, #8
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	e000e010 	.word	0xe000e010

08002600 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	607a      	str	r2, [r7, #4]
 800260a:	210f      	movs	r1, #15
 800260c:	187b      	adds	r3, r7, r1
 800260e:	1c02      	adds	r2, r0, #0
 8002610:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	187b      	adds	r3, r7, r1
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	b25b      	sxtb	r3, r3
 800261a:	0011      	movs	r1, r2
 800261c:	0018      	movs	r0, r3
 800261e:	f7ff ff5d 	bl	80024dc <__NVIC_SetPriority>
}
 8002622:	46c0      	nop			; (mov r8, r8)
 8002624:	46bd      	mov	sp, r7
 8002626:	b004      	add	sp, #16
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	0018      	movs	r0, r3
 8002636:	f7ff ffbf 	bl	80025b8 <SysTick_Config>
 800263a:	0003      	movs	r3, r0
}
 800263c:	0018      	movs	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	b002      	add	sp, #8
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002652:	e14f      	b.n	80028f4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2101      	movs	r1, #1
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	4091      	lsls	r1, r2
 800265e:	000a      	movs	r2, r1
 8002660:	4013      	ands	r3, r2
 8002662:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d100      	bne.n	800266c <HAL_GPIO_Init+0x28>
 800266a:	e140      	b.n	80028ee <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2203      	movs	r2, #3
 8002672:	4013      	ands	r3, r2
 8002674:	2b01      	cmp	r3, #1
 8002676:	d005      	beq.n	8002684 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2203      	movs	r2, #3
 800267e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002680:	2b02      	cmp	r3, #2
 8002682:	d130      	bne.n	80026e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	2203      	movs	r2, #3
 8002690:	409a      	lsls	r2, r3
 8002692:	0013      	movs	r3, r2
 8002694:	43da      	mvns	r2, r3
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4013      	ands	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	409a      	lsls	r2, r3
 80026a6:	0013      	movs	r3, r2
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026ba:	2201      	movs	r2, #1
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	409a      	lsls	r2, r3
 80026c0:	0013      	movs	r3, r2
 80026c2:	43da      	mvns	r2, r3
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	4013      	ands	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	091b      	lsrs	r3, r3, #4
 80026d0:	2201      	movs	r2, #1
 80026d2:	401a      	ands	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	409a      	lsls	r2, r3
 80026d8:	0013      	movs	r3, r2
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2203      	movs	r2, #3
 80026ec:	4013      	ands	r3, r2
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	d017      	beq.n	8002722 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	2203      	movs	r2, #3
 80026fe:	409a      	lsls	r2, r3
 8002700:	0013      	movs	r3, r2
 8002702:	43da      	mvns	r2, r3
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4013      	ands	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	409a      	lsls	r2, r3
 8002714:	0013      	movs	r3, r2
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2203      	movs	r2, #3
 8002728:	4013      	ands	r3, r2
 800272a:	2b02      	cmp	r3, #2
 800272c:	d123      	bne.n	8002776 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	08da      	lsrs	r2, r3, #3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3208      	adds	r2, #8
 8002736:	0092      	lsls	r2, r2, #2
 8002738:	58d3      	ldr	r3, [r2, r3]
 800273a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	2207      	movs	r2, #7
 8002740:	4013      	ands	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	220f      	movs	r2, #15
 8002746:	409a      	lsls	r2, r3
 8002748:	0013      	movs	r3, r2
 800274a:	43da      	mvns	r2, r3
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4013      	ands	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	691a      	ldr	r2, [r3, #16]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2107      	movs	r1, #7
 800275a:	400b      	ands	r3, r1
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	409a      	lsls	r2, r3
 8002760:	0013      	movs	r3, r2
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	4313      	orrs	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	08da      	lsrs	r2, r3, #3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3208      	adds	r2, #8
 8002770:	0092      	lsls	r2, r2, #2
 8002772:	6939      	ldr	r1, [r7, #16]
 8002774:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	2203      	movs	r2, #3
 8002782:	409a      	lsls	r2, r3
 8002784:	0013      	movs	r3, r2
 8002786:	43da      	mvns	r2, r3
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4013      	ands	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2203      	movs	r2, #3
 8002794:	401a      	ands	r2, r3
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	409a      	lsls	r2, r3
 800279c:	0013      	movs	r3, r2
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	23c0      	movs	r3, #192	; 0xc0
 80027b0:	029b      	lsls	r3, r3, #10
 80027b2:	4013      	ands	r3, r2
 80027b4:	d100      	bne.n	80027b8 <HAL_GPIO_Init+0x174>
 80027b6:	e09a      	b.n	80028ee <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b8:	4b54      	ldr	r3, [pc, #336]	; (800290c <HAL_GPIO_Init+0x2c8>)
 80027ba:	699a      	ldr	r2, [r3, #24]
 80027bc:	4b53      	ldr	r3, [pc, #332]	; (800290c <HAL_GPIO_Init+0x2c8>)
 80027be:	2101      	movs	r1, #1
 80027c0:	430a      	orrs	r2, r1
 80027c2:	619a      	str	r2, [r3, #24]
 80027c4:	4b51      	ldr	r3, [pc, #324]	; (800290c <HAL_GPIO_Init+0x2c8>)
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	2201      	movs	r2, #1
 80027ca:	4013      	ands	r3, r2
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027d0:	4a4f      	ldr	r2, [pc, #316]	; (8002910 <HAL_GPIO_Init+0x2cc>)
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	089b      	lsrs	r3, r3, #2
 80027d6:	3302      	adds	r3, #2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	589b      	ldr	r3, [r3, r2]
 80027dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	2203      	movs	r2, #3
 80027e2:	4013      	ands	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	220f      	movs	r2, #15
 80027e8:	409a      	lsls	r2, r3
 80027ea:	0013      	movs	r3, r2
 80027ec:	43da      	mvns	r2, r3
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	4013      	ands	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	2390      	movs	r3, #144	; 0x90
 80027f8:	05db      	lsls	r3, r3, #23
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d013      	beq.n	8002826 <HAL_GPIO_Init+0x1e2>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a44      	ldr	r2, [pc, #272]	; (8002914 <HAL_GPIO_Init+0x2d0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d00d      	beq.n	8002822 <HAL_GPIO_Init+0x1de>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a43      	ldr	r2, [pc, #268]	; (8002918 <HAL_GPIO_Init+0x2d4>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d007      	beq.n	800281e <HAL_GPIO_Init+0x1da>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a42      	ldr	r2, [pc, #264]	; (800291c <HAL_GPIO_Init+0x2d8>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d101      	bne.n	800281a <HAL_GPIO_Init+0x1d6>
 8002816:	2303      	movs	r3, #3
 8002818:	e006      	b.n	8002828 <HAL_GPIO_Init+0x1e4>
 800281a:	2305      	movs	r3, #5
 800281c:	e004      	b.n	8002828 <HAL_GPIO_Init+0x1e4>
 800281e:	2302      	movs	r3, #2
 8002820:	e002      	b.n	8002828 <HAL_GPIO_Init+0x1e4>
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <HAL_GPIO_Init+0x1e4>
 8002826:	2300      	movs	r3, #0
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	2103      	movs	r1, #3
 800282c:	400a      	ands	r2, r1
 800282e:	0092      	lsls	r2, r2, #2
 8002830:	4093      	lsls	r3, r2
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002838:	4935      	ldr	r1, [pc, #212]	; (8002910 <HAL_GPIO_Init+0x2cc>)
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	089b      	lsrs	r3, r3, #2
 800283e:	3302      	adds	r3, #2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002846:	4b36      	ldr	r3, [pc, #216]	; (8002920 <HAL_GPIO_Init+0x2dc>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	43da      	mvns	r2, r3
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	4013      	ands	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	2380      	movs	r3, #128	; 0x80
 800285c:	035b      	lsls	r3, r3, #13
 800285e:	4013      	ands	r3, r2
 8002860:	d003      	beq.n	800286a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4313      	orrs	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800286a:	4b2d      	ldr	r3, [pc, #180]	; (8002920 <HAL_GPIO_Init+0x2dc>)
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002870:	4b2b      	ldr	r3, [pc, #172]	; (8002920 <HAL_GPIO_Init+0x2dc>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	43da      	mvns	r2, r3
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4013      	ands	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	2380      	movs	r3, #128	; 0x80
 8002886:	039b      	lsls	r3, r3, #14
 8002888:	4013      	ands	r3, r2
 800288a:	d003      	beq.n	8002894 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	4313      	orrs	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002894:	4b22      	ldr	r3, [pc, #136]	; (8002920 <HAL_GPIO_Init+0x2dc>)
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800289a:	4b21      	ldr	r3, [pc, #132]	; (8002920 <HAL_GPIO_Init+0x2dc>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	43da      	mvns	r2, r3
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	4013      	ands	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	2380      	movs	r3, #128	; 0x80
 80028b0:	029b      	lsls	r3, r3, #10
 80028b2:	4013      	ands	r3, r2
 80028b4:	d003      	beq.n	80028be <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80028be:	4b18      	ldr	r3, [pc, #96]	; (8002920 <HAL_GPIO_Init+0x2dc>)
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80028c4:	4b16      	ldr	r3, [pc, #88]	; (8002920 <HAL_GPIO_Init+0x2dc>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	43da      	mvns	r2, r3
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	4013      	ands	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	2380      	movs	r3, #128	; 0x80
 80028da:	025b      	lsls	r3, r3, #9
 80028dc:	4013      	ands	r3, r2
 80028de:	d003      	beq.n	80028e8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80028e8:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <HAL_GPIO_Init+0x2dc>)
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	3301      	adds	r3, #1
 80028f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	40da      	lsrs	r2, r3
 80028fc:	1e13      	subs	r3, r2, #0
 80028fe:	d000      	beq.n	8002902 <HAL_GPIO_Init+0x2be>
 8002900:	e6a8      	b.n	8002654 <HAL_GPIO_Init+0x10>
  } 
}
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	46c0      	nop			; (mov r8, r8)
 8002906:	46bd      	mov	sp, r7
 8002908:	b006      	add	sp, #24
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40021000 	.word	0x40021000
 8002910:	40010000 	.word	0x40010000
 8002914:	48000400 	.word	0x48000400
 8002918:	48000800 	.word	0x48000800
 800291c:	48000c00 	.word	0x48000c00
 8002920:	40010400 	.word	0x40010400

08002924 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	0008      	movs	r0, r1
 800292e:	0011      	movs	r1, r2
 8002930:	1cbb      	adds	r3, r7, #2
 8002932:	1c02      	adds	r2, r0, #0
 8002934:	801a      	strh	r2, [r3, #0]
 8002936:	1c7b      	adds	r3, r7, #1
 8002938:	1c0a      	adds	r2, r1, #0
 800293a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800293c:	1c7b      	adds	r3, r7, #1
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d004      	beq.n	800294e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002944:	1cbb      	adds	r3, r7, #2
 8002946:	881a      	ldrh	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800294c:	e003      	b.n	8002956 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800294e:	1cbb      	adds	r3, r7, #2
 8002950:	881a      	ldrh	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	46bd      	mov	sp, r7
 800295a:	b002      	add	sp, #8
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e305      	b.n	8002f7e <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2201      	movs	r2, #1
 8002978:	4013      	ands	r3, r2
 800297a:	d100      	bne.n	800297e <HAL_RCC_OscConfig+0x1e>
 800297c:	e08d      	b.n	8002a9a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800297e:	4bc5      	ldr	r3, [pc, #788]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	220c      	movs	r2, #12
 8002984:	4013      	ands	r3, r2
 8002986:	2b04      	cmp	r3, #4
 8002988:	d00e      	beq.n	80029a8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800298a:	4bc2      	ldr	r3, [pc, #776]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	220c      	movs	r2, #12
 8002990:	4013      	ands	r3, r2
 8002992:	2b08      	cmp	r3, #8
 8002994:	d116      	bne.n	80029c4 <HAL_RCC_OscConfig+0x64>
 8002996:	4bbf      	ldr	r3, [pc, #764]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	23c0      	movs	r3, #192	; 0xc0
 800299c:	025b      	lsls	r3, r3, #9
 800299e:	401a      	ands	r2, r3
 80029a0:	2380      	movs	r3, #128	; 0x80
 80029a2:	025b      	lsls	r3, r3, #9
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d10d      	bne.n	80029c4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a8:	4bba      	ldr	r3, [pc, #744]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	2380      	movs	r3, #128	; 0x80
 80029ae:	029b      	lsls	r3, r3, #10
 80029b0:	4013      	ands	r3, r2
 80029b2:	d100      	bne.n	80029b6 <HAL_RCC_OscConfig+0x56>
 80029b4:	e070      	b.n	8002a98 <HAL_RCC_OscConfig+0x138>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d000      	beq.n	80029c0 <HAL_RCC_OscConfig+0x60>
 80029be:	e06b      	b.n	8002a98 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e2dc      	b.n	8002f7e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d107      	bne.n	80029dc <HAL_RCC_OscConfig+0x7c>
 80029cc:	4bb1      	ldr	r3, [pc, #708]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	4bb0      	ldr	r3, [pc, #704]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 80029d2:	2180      	movs	r1, #128	; 0x80
 80029d4:	0249      	lsls	r1, r1, #9
 80029d6:	430a      	orrs	r2, r1
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	e02f      	b.n	8002a3c <HAL_RCC_OscConfig+0xdc>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10c      	bne.n	80029fe <HAL_RCC_OscConfig+0x9e>
 80029e4:	4bab      	ldr	r3, [pc, #684]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4baa      	ldr	r3, [pc, #680]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 80029ea:	49ab      	ldr	r1, [pc, #684]	; (8002c98 <HAL_RCC_OscConfig+0x338>)
 80029ec:	400a      	ands	r2, r1
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	4ba8      	ldr	r3, [pc, #672]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4ba7      	ldr	r3, [pc, #668]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 80029f6:	49a9      	ldr	r1, [pc, #676]	; (8002c9c <HAL_RCC_OscConfig+0x33c>)
 80029f8:	400a      	ands	r2, r1
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	e01e      	b.n	8002a3c <HAL_RCC_OscConfig+0xdc>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b05      	cmp	r3, #5
 8002a04:	d10e      	bne.n	8002a24 <HAL_RCC_OscConfig+0xc4>
 8002a06:	4ba3      	ldr	r3, [pc, #652]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	4ba2      	ldr	r3, [pc, #648]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002a0c:	2180      	movs	r1, #128	; 0x80
 8002a0e:	02c9      	lsls	r1, r1, #11
 8002a10:	430a      	orrs	r2, r1
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	4b9f      	ldr	r3, [pc, #636]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	4b9e      	ldr	r3, [pc, #632]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002a1a:	2180      	movs	r1, #128	; 0x80
 8002a1c:	0249      	lsls	r1, r1, #9
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	e00b      	b.n	8002a3c <HAL_RCC_OscConfig+0xdc>
 8002a24:	4b9b      	ldr	r3, [pc, #620]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4b9a      	ldr	r3, [pc, #616]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002a2a:	499b      	ldr	r1, [pc, #620]	; (8002c98 <HAL_RCC_OscConfig+0x338>)
 8002a2c:	400a      	ands	r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	4b98      	ldr	r3, [pc, #608]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	4b97      	ldr	r3, [pc, #604]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002a36:	4999      	ldr	r1, [pc, #612]	; (8002c9c <HAL_RCC_OscConfig+0x33c>)
 8002a38:	400a      	ands	r2, r1
 8002a3a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d014      	beq.n	8002a6e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a44:	f7ff fa26 	bl	8001e94 <HAL_GetTick>
 8002a48:	0003      	movs	r3, r0
 8002a4a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4c:	e008      	b.n	8002a60 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a4e:	f7ff fa21 	bl	8001e94 <HAL_GetTick>
 8002a52:	0002      	movs	r2, r0
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b64      	cmp	r3, #100	; 0x64
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e28e      	b.n	8002f7e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a60:	4b8c      	ldr	r3, [pc, #560]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	2380      	movs	r3, #128	; 0x80
 8002a66:	029b      	lsls	r3, r3, #10
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d0f0      	beq.n	8002a4e <HAL_RCC_OscConfig+0xee>
 8002a6c:	e015      	b.n	8002a9a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6e:	f7ff fa11 	bl	8001e94 <HAL_GetTick>
 8002a72:	0003      	movs	r3, r0
 8002a74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a78:	f7ff fa0c 	bl	8001e94 <HAL_GetTick>
 8002a7c:	0002      	movs	r2, r0
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b64      	cmp	r3, #100	; 0x64
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e279      	b.n	8002f7e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8a:	4b82      	ldr	r3, [pc, #520]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	2380      	movs	r3, #128	; 0x80
 8002a90:	029b      	lsls	r3, r3, #10
 8002a92:	4013      	ands	r3, r2
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x118>
 8002a96:	e000      	b.n	8002a9a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a98:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d100      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x146>
 8002aa4:	e06c      	b.n	8002b80 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002aa6:	4b7b      	ldr	r3, [pc, #492]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	220c      	movs	r2, #12
 8002aac:	4013      	ands	r3, r2
 8002aae:	d00e      	beq.n	8002ace <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ab0:	4b78      	ldr	r3, [pc, #480]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	220c      	movs	r2, #12
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d11f      	bne.n	8002afc <HAL_RCC_OscConfig+0x19c>
 8002abc:	4b75      	ldr	r3, [pc, #468]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	23c0      	movs	r3, #192	; 0xc0
 8002ac2:	025b      	lsls	r3, r3, #9
 8002ac4:	401a      	ands	r2, r3
 8002ac6:	2380      	movs	r3, #128	; 0x80
 8002ac8:	021b      	lsls	r3, r3, #8
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d116      	bne.n	8002afc <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ace:	4b71      	ldr	r3, [pc, #452]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d005      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x184>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d001      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e24c      	b.n	8002f7e <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae4:	4b6b      	ldr	r3, [pc, #428]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	22f8      	movs	r2, #248	; 0xf8
 8002aea:	4393      	bics	r3, r2
 8002aec:	0019      	movs	r1, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	00da      	lsls	r2, r3, #3
 8002af4:	4b67      	ldr	r3, [pc, #412]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002af6:	430a      	orrs	r2, r1
 8002af8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002afa:	e041      	b.n	8002b80 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d024      	beq.n	8002b4e <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b04:	4b63      	ldr	r3, [pc, #396]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4b62      	ldr	r3, [pc, #392]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b10:	f7ff f9c0 	bl	8001e94 <HAL_GetTick>
 8002b14:	0003      	movs	r3, r0
 8002b16:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b1a:	f7ff f9bb 	bl	8001e94 <HAL_GetTick>
 8002b1e:	0002      	movs	r2, r0
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e228      	b.n	8002f7e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2c:	4b59      	ldr	r3, [pc, #356]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2202      	movs	r2, #2
 8002b32:	4013      	ands	r3, r2
 8002b34:	d0f1      	beq.n	8002b1a <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b36:	4b57      	ldr	r3, [pc, #348]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	22f8      	movs	r2, #248	; 0xf8
 8002b3c:	4393      	bics	r3, r2
 8002b3e:	0019      	movs	r1, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	00da      	lsls	r2, r3, #3
 8002b46:	4b53      	ldr	r3, [pc, #332]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	e018      	b.n	8002b80 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b4e:	4b51      	ldr	r3, [pc, #324]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	4b50      	ldr	r3, [pc, #320]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002b54:	2101      	movs	r1, #1
 8002b56:	438a      	bics	r2, r1
 8002b58:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5a:	f7ff f99b 	bl	8001e94 <HAL_GetTick>
 8002b5e:	0003      	movs	r3, r0
 8002b60:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b64:	f7ff f996 	bl	8001e94 <HAL_GetTick>
 8002b68:	0002      	movs	r2, r0
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e203      	b.n	8002f7e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b76:	4b47      	ldr	r3, [pc, #284]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	d1f1      	bne.n	8002b64 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2208      	movs	r2, #8
 8002b86:	4013      	ands	r3, r2
 8002b88:	d036      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d019      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b92:	4b40      	ldr	r3, [pc, #256]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002b94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b96:	4b3f      	ldr	r3, [pc, #252]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002b98:	2101      	movs	r1, #1
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9e:	f7ff f979 	bl	8001e94 <HAL_GetTick>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ba8:	f7ff f974 	bl	8001e94 <HAL_GetTick>
 8002bac:	0002      	movs	r2, r0
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e1e1      	b.n	8002f7e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bba:	4b36      	ldr	r3, [pc, #216]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d0f1      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x248>
 8002bc4:	e018      	b.n	8002bf8 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc6:	4b33      	ldr	r3, [pc, #204]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002bc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bca:	4b32      	ldr	r3, [pc, #200]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002bcc:	2101      	movs	r1, #1
 8002bce:	438a      	bics	r2, r1
 8002bd0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd2:	f7ff f95f 	bl	8001e94 <HAL_GetTick>
 8002bd6:	0003      	movs	r3, r0
 8002bd8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bdc:	f7ff f95a 	bl	8001e94 <HAL_GetTick>
 8002be0:	0002      	movs	r2, r0
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e1c7      	b.n	8002f7e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bee:	4b29      	ldr	r3, [pc, #164]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d1f1      	bne.n	8002bdc <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2204      	movs	r2, #4
 8002bfe:	4013      	ands	r3, r2
 8002c00:	d100      	bne.n	8002c04 <HAL_RCC_OscConfig+0x2a4>
 8002c02:	e0b5      	b.n	8002d70 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c04:	201f      	movs	r0, #31
 8002c06:	183b      	adds	r3, r7, r0
 8002c08:	2200      	movs	r2, #0
 8002c0a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c0c:	4b21      	ldr	r3, [pc, #132]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002c0e:	69da      	ldr	r2, [r3, #28]
 8002c10:	2380      	movs	r3, #128	; 0x80
 8002c12:	055b      	lsls	r3, r3, #21
 8002c14:	4013      	ands	r3, r2
 8002c16:	d110      	bne.n	8002c3a <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c18:	4b1e      	ldr	r3, [pc, #120]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002c1a:	69da      	ldr	r2, [r3, #28]
 8002c1c:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002c1e:	2180      	movs	r1, #128	; 0x80
 8002c20:	0549      	lsls	r1, r1, #21
 8002c22:	430a      	orrs	r2, r1
 8002c24:	61da      	str	r2, [r3, #28]
 8002c26:	4b1b      	ldr	r3, [pc, #108]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002c28:	69da      	ldr	r2, [r3, #28]
 8002c2a:	2380      	movs	r3, #128	; 0x80
 8002c2c:	055b      	lsls	r3, r3, #21
 8002c2e:	4013      	ands	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c34:	183b      	adds	r3, r7, r0
 8002c36:	2201      	movs	r2, #1
 8002c38:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3a:	4b19      	ldr	r3, [pc, #100]	; (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	2380      	movs	r3, #128	; 0x80
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	4013      	ands	r3, r2
 8002c44:	d11a      	bne.n	8002c7c <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c46:	4b16      	ldr	r3, [pc, #88]	; (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	4b15      	ldr	r3, [pc, #84]	; (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002c4c:	2180      	movs	r1, #128	; 0x80
 8002c4e:	0049      	lsls	r1, r1, #1
 8002c50:	430a      	orrs	r2, r1
 8002c52:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c54:	f7ff f91e 	bl	8001e94 <HAL_GetTick>
 8002c58:	0003      	movs	r3, r0
 8002c5a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c5e:	f7ff f919 	bl	8001e94 <HAL_GetTick>
 8002c62:	0002      	movs	r2, r0
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b64      	cmp	r3, #100	; 0x64
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e186      	b.n	8002f7e <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c70:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	2380      	movs	r3, #128	; 0x80
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d10f      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x344>
 8002c84:	4b03      	ldr	r3, [pc, #12]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002c86:	6a1a      	ldr	r2, [r3, #32]
 8002c88:	4b02      	ldr	r3, [pc, #8]	; (8002c94 <HAL_RCC_OscConfig+0x334>)
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	621a      	str	r2, [r3, #32]
 8002c90:	e036      	b.n	8002d00 <HAL_RCC_OscConfig+0x3a0>
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	40021000 	.word	0x40021000
 8002c98:	fffeffff 	.word	0xfffeffff
 8002c9c:	fffbffff 	.word	0xfffbffff
 8002ca0:	40007000 	.word	0x40007000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10c      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x366>
 8002cac:	4bb6      	ldr	r3, [pc, #728]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002cae:	6a1a      	ldr	r2, [r3, #32]
 8002cb0:	4bb5      	ldr	r3, [pc, #724]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	438a      	bics	r2, r1
 8002cb6:	621a      	str	r2, [r3, #32]
 8002cb8:	4bb3      	ldr	r3, [pc, #716]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002cba:	6a1a      	ldr	r2, [r3, #32]
 8002cbc:	4bb2      	ldr	r3, [pc, #712]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002cbe:	2104      	movs	r1, #4
 8002cc0:	438a      	bics	r2, r1
 8002cc2:	621a      	str	r2, [r3, #32]
 8002cc4:	e01c      	b.n	8002d00 <HAL_RCC_OscConfig+0x3a0>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	2b05      	cmp	r3, #5
 8002ccc:	d10c      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x388>
 8002cce:	4bae      	ldr	r3, [pc, #696]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002cd0:	6a1a      	ldr	r2, [r3, #32]
 8002cd2:	4bad      	ldr	r3, [pc, #692]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002cd4:	2104      	movs	r1, #4
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	621a      	str	r2, [r3, #32]
 8002cda:	4bab      	ldr	r3, [pc, #684]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002cdc:	6a1a      	ldr	r2, [r3, #32]
 8002cde:	4baa      	ldr	r3, [pc, #680]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	621a      	str	r2, [r3, #32]
 8002ce6:	e00b      	b.n	8002d00 <HAL_RCC_OscConfig+0x3a0>
 8002ce8:	4ba7      	ldr	r3, [pc, #668]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002cea:	6a1a      	ldr	r2, [r3, #32]
 8002cec:	4ba6      	ldr	r3, [pc, #664]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002cee:	2101      	movs	r1, #1
 8002cf0:	438a      	bics	r2, r1
 8002cf2:	621a      	str	r2, [r3, #32]
 8002cf4:	4ba4      	ldr	r3, [pc, #656]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002cf6:	6a1a      	ldr	r2, [r3, #32]
 8002cf8:	4ba3      	ldr	r3, [pc, #652]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002cfa:	2104      	movs	r1, #4
 8002cfc:	438a      	bics	r2, r1
 8002cfe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d014      	beq.n	8002d32 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d08:	f7ff f8c4 	bl	8001e94 <HAL_GetTick>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d10:	e009      	b.n	8002d26 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d12:	f7ff f8bf 	bl	8001e94 <HAL_GetTick>
 8002d16:	0002      	movs	r2, r0
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	4a9b      	ldr	r2, [pc, #620]	; (8002f8c <HAL_RCC_OscConfig+0x62c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e12b      	b.n	8002f7e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d26:	4b98      	ldr	r3, [pc, #608]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	d0f0      	beq.n	8002d12 <HAL_RCC_OscConfig+0x3b2>
 8002d30:	e013      	b.n	8002d5a <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d32:	f7ff f8af 	bl	8001e94 <HAL_GetTick>
 8002d36:	0003      	movs	r3, r0
 8002d38:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d3a:	e009      	b.n	8002d50 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d3c:	f7ff f8aa 	bl	8001e94 <HAL_GetTick>
 8002d40:	0002      	movs	r2, r0
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	4a91      	ldr	r2, [pc, #580]	; (8002f8c <HAL_RCC_OscConfig+0x62c>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e116      	b.n	8002f7e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d50:	4b8d      	ldr	r3, [pc, #564]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	2202      	movs	r2, #2
 8002d56:	4013      	ands	r3, r2
 8002d58:	d1f0      	bne.n	8002d3c <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d5a:	231f      	movs	r3, #31
 8002d5c:	18fb      	adds	r3, r7, r3
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d105      	bne.n	8002d70 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d64:	4b88      	ldr	r3, [pc, #544]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002d66:	69da      	ldr	r2, [r3, #28]
 8002d68:	4b87      	ldr	r3, [pc, #540]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002d6a:	4989      	ldr	r1, [pc, #548]	; (8002f90 <HAL_RCC_OscConfig+0x630>)
 8002d6c:	400a      	ands	r2, r1
 8002d6e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2210      	movs	r2, #16
 8002d76:	4013      	ands	r3, r2
 8002d78:	d063      	beq.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d12a      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002d82:	4b81      	ldr	r3, [pc, #516]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d86:	4b80      	ldr	r3, [pc, #512]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002d88:	2104      	movs	r1, #4
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002d8e:	4b7e      	ldr	r3, [pc, #504]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d92:	4b7d      	ldr	r3, [pc, #500]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002d94:	2101      	movs	r1, #1
 8002d96:	430a      	orrs	r2, r1
 8002d98:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d9a:	f7ff f87b 	bl	8001e94 <HAL_GetTick>
 8002d9e:	0003      	movs	r3, r0
 8002da0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002da4:	f7ff f876 	bl	8001e94 <HAL_GetTick>
 8002da8:	0002      	movs	r2, r0
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e0e3      	b.n	8002f7e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002db6:	4b74      	ldr	r3, [pc, #464]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dba:	2202      	movs	r2, #2
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	d0f1      	beq.n	8002da4 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002dc0:	4b71      	ldr	r3, [pc, #452]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc4:	22f8      	movs	r2, #248	; 0xf8
 8002dc6:	4393      	bics	r3, r2
 8002dc8:	0019      	movs	r1, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	00da      	lsls	r2, r3, #3
 8002dd0:	4b6d      	ldr	r3, [pc, #436]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	635a      	str	r2, [r3, #52]	; 0x34
 8002dd6:	e034      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	3305      	adds	r3, #5
 8002dde:	d111      	bne.n	8002e04 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002de0:	4b69      	ldr	r3, [pc, #420]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002de2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002de4:	4b68      	ldr	r3, [pc, #416]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002de6:	2104      	movs	r1, #4
 8002de8:	438a      	bics	r2, r1
 8002dea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002dec:	4b66      	ldr	r3, [pc, #408]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df0:	22f8      	movs	r2, #248	; 0xf8
 8002df2:	4393      	bics	r3, r2
 8002df4:	0019      	movs	r1, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	00da      	lsls	r2, r3, #3
 8002dfc:	4b62      	ldr	r3, [pc, #392]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	635a      	str	r2, [r3, #52]	; 0x34
 8002e02:	e01e      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002e04:	4b60      	ldr	r3, [pc, #384]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e08:	4b5f      	ldr	r3, [pc, #380]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002e0a:	2104      	movs	r1, #4
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002e10:	4b5d      	ldr	r3, [pc, #372]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e14:	4b5c      	ldr	r3, [pc, #368]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002e16:	2101      	movs	r1, #1
 8002e18:	438a      	bics	r2, r1
 8002e1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e1c:	f7ff f83a 	bl	8001e94 <HAL_GetTick>
 8002e20:	0003      	movs	r3, r0
 8002e22:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002e26:	f7ff f835 	bl	8001e94 <HAL_GetTick>
 8002e2a:	0002      	movs	r2, r0
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e0a2      	b.n	8002f7e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002e38:	4b53      	ldr	r3, [pc, #332]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d1f1      	bne.n	8002e26 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d100      	bne.n	8002e4c <HAL_RCC_OscConfig+0x4ec>
 8002e4a:	e097      	b.n	8002f7c <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e4c:	4b4e      	ldr	r3, [pc, #312]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	220c      	movs	r2, #12
 8002e52:	4013      	ands	r3, r2
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d100      	bne.n	8002e5a <HAL_RCC_OscConfig+0x4fa>
 8002e58:	e06b      	b.n	8002f32 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d14c      	bne.n	8002efc <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e62:	4b49      	ldr	r3, [pc, #292]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	4b48      	ldr	r3, [pc, #288]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002e68:	494a      	ldr	r1, [pc, #296]	; (8002f94 <HAL_RCC_OscConfig+0x634>)
 8002e6a:	400a      	ands	r2, r1
 8002e6c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6e:	f7ff f811 	bl	8001e94 <HAL_GetTick>
 8002e72:	0003      	movs	r3, r0
 8002e74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e78:	f7ff f80c 	bl	8001e94 <HAL_GetTick>
 8002e7c:	0002      	movs	r2, r0
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e079      	b.n	8002f7e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e8a:	4b3f      	ldr	r3, [pc, #252]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	2380      	movs	r3, #128	; 0x80
 8002e90:	049b      	lsls	r3, r3, #18
 8002e92:	4013      	ands	r3, r2
 8002e94:	d1f0      	bne.n	8002e78 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e96:	4b3c      	ldr	r3, [pc, #240]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9a:	220f      	movs	r2, #15
 8002e9c:	4393      	bics	r3, r2
 8002e9e:	0019      	movs	r1, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea4:	4b38      	ldr	r3, [pc, #224]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002eaa:	4b37      	ldr	r3, [pc, #220]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	4a3a      	ldr	r2, [pc, #232]	; (8002f98 <HAL_RCC_OscConfig+0x638>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	0019      	movs	r1, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	4b32      	ldr	r3, [pc, #200]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ec4:	4b30      	ldr	r3, [pc, #192]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	4b2f      	ldr	r3, [pc, #188]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002eca:	2180      	movs	r1, #128	; 0x80
 8002ecc:	0449      	lsls	r1, r1, #17
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed2:	f7fe ffdf 	bl	8001e94 <HAL_GetTick>
 8002ed6:	0003      	movs	r3, r0
 8002ed8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002edc:	f7fe ffda 	bl	8001e94 <HAL_GetTick>
 8002ee0:	0002      	movs	r2, r0
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e047      	b.n	8002f7e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eee:	4b26      	ldr	r3, [pc, #152]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	2380      	movs	r3, #128	; 0x80
 8002ef4:	049b      	lsls	r3, r3, #18
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCC_OscConfig+0x57c>
 8002efa:	e03f      	b.n	8002f7c <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002efc:	4b22      	ldr	r3, [pc, #136]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	4b21      	ldr	r3, [pc, #132]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002f02:	4924      	ldr	r1, [pc, #144]	; (8002f94 <HAL_RCC_OscConfig+0x634>)
 8002f04:	400a      	ands	r2, r1
 8002f06:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f08:	f7fe ffc4 	bl	8001e94 <HAL_GetTick>
 8002f0c:	0003      	movs	r3, r0
 8002f0e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f12:	f7fe ffbf 	bl	8001e94 <HAL_GetTick>
 8002f16:	0002      	movs	r2, r0
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e02c      	b.n	8002f7e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f24:	4b18      	ldr	r3, [pc, #96]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	2380      	movs	r3, #128	; 0x80
 8002f2a:	049b      	lsls	r3, r3, #18
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	d1f0      	bne.n	8002f12 <HAL_RCC_OscConfig+0x5b2>
 8002f30:	e024      	b.n	8002f7c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d101      	bne.n	8002f3e <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e01f      	b.n	8002f7e <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002f3e:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002f44:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <HAL_RCC_OscConfig+0x628>)
 8002f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f48:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	23c0      	movs	r3, #192	; 0xc0
 8002f4e:	025b      	lsls	r3, r3, #9
 8002f50:	401a      	ands	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d10e      	bne.n	8002f78 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	220f      	movs	r2, #15
 8002f5e:	401a      	ands	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d107      	bne.n	8002f78 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	23f0      	movs	r3, #240	; 0xf0
 8002f6c:	039b      	lsls	r3, r3, #14
 8002f6e:	401a      	ands	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d001      	beq.n	8002f7c <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e000      	b.n	8002f7e <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	0018      	movs	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b008      	add	sp, #32
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	00001388 	.word	0x00001388
 8002f90:	efffffff 	.word	0xefffffff
 8002f94:	feffffff 	.word	0xfeffffff
 8002f98:	ffc27fff 	.word	0xffc27fff

08002f9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e0b3      	b.n	8003118 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fb0:	4b5b      	ldr	r3, [pc, #364]	; (8003120 <HAL_RCC_ClockConfig+0x184>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d911      	bls.n	8002fe2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fbe:	4b58      	ldr	r3, [pc, #352]	; (8003120 <HAL_RCC_ClockConfig+0x184>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	4393      	bics	r3, r2
 8002fc6:	0019      	movs	r1, r3
 8002fc8:	4b55      	ldr	r3, [pc, #340]	; (8003120 <HAL_RCC_ClockConfig+0x184>)
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd0:	4b53      	ldr	r3, [pc, #332]	; (8003120 <HAL_RCC_ClockConfig+0x184>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d001      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e09a      	b.n	8003118 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	4013      	ands	r3, r2
 8002fea:	d015      	beq.n	8003018 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2204      	movs	r2, #4
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d006      	beq.n	8003004 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ff6:	4b4b      	ldr	r3, [pc, #300]	; (8003124 <HAL_RCC_ClockConfig+0x188>)
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	4b4a      	ldr	r3, [pc, #296]	; (8003124 <HAL_RCC_ClockConfig+0x188>)
 8002ffc:	21e0      	movs	r1, #224	; 0xe0
 8002ffe:	00c9      	lsls	r1, r1, #3
 8003000:	430a      	orrs	r2, r1
 8003002:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003004:	4b47      	ldr	r3, [pc, #284]	; (8003124 <HAL_RCC_ClockConfig+0x188>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	22f0      	movs	r2, #240	; 0xf0
 800300a:	4393      	bics	r3, r2
 800300c:	0019      	movs	r1, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	4b44      	ldr	r3, [pc, #272]	; (8003124 <HAL_RCC_ClockConfig+0x188>)
 8003014:	430a      	orrs	r2, r1
 8003016:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2201      	movs	r2, #1
 800301e:	4013      	ands	r3, r2
 8003020:	d040      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d107      	bne.n	800303a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800302a:	4b3e      	ldr	r3, [pc, #248]	; (8003124 <HAL_RCC_ClockConfig+0x188>)
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	2380      	movs	r3, #128	; 0x80
 8003030:	029b      	lsls	r3, r3, #10
 8003032:	4013      	ands	r3, r2
 8003034:	d114      	bne.n	8003060 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e06e      	b.n	8003118 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d107      	bne.n	8003052 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003042:	4b38      	ldr	r3, [pc, #224]	; (8003124 <HAL_RCC_ClockConfig+0x188>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	2380      	movs	r3, #128	; 0x80
 8003048:	049b      	lsls	r3, r3, #18
 800304a:	4013      	ands	r3, r2
 800304c:	d108      	bne.n	8003060 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e062      	b.n	8003118 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003052:	4b34      	ldr	r3, [pc, #208]	; (8003124 <HAL_RCC_ClockConfig+0x188>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2202      	movs	r2, #2
 8003058:	4013      	ands	r3, r2
 800305a:	d101      	bne.n	8003060 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e05b      	b.n	8003118 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003060:	4b30      	ldr	r3, [pc, #192]	; (8003124 <HAL_RCC_ClockConfig+0x188>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2203      	movs	r2, #3
 8003066:	4393      	bics	r3, r2
 8003068:	0019      	movs	r1, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	4b2d      	ldr	r3, [pc, #180]	; (8003124 <HAL_RCC_ClockConfig+0x188>)
 8003070:	430a      	orrs	r2, r1
 8003072:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003074:	f7fe ff0e 	bl	8001e94 <HAL_GetTick>
 8003078:	0003      	movs	r3, r0
 800307a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307c:	e009      	b.n	8003092 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800307e:	f7fe ff09 	bl	8001e94 <HAL_GetTick>
 8003082:	0002      	movs	r2, r0
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	4a27      	ldr	r2, [pc, #156]	; (8003128 <HAL_RCC_ClockConfig+0x18c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e042      	b.n	8003118 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003092:	4b24      	ldr	r3, [pc, #144]	; (8003124 <HAL_RCC_ClockConfig+0x188>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	220c      	movs	r2, #12
 8003098:	401a      	ands	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d1ec      	bne.n	800307e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030a4:	4b1e      	ldr	r3, [pc, #120]	; (8003120 <HAL_RCC_ClockConfig+0x184>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2201      	movs	r2, #1
 80030aa:	4013      	ands	r3, r2
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d211      	bcs.n	80030d6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b2:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <HAL_RCC_ClockConfig+0x184>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2201      	movs	r2, #1
 80030b8:	4393      	bics	r3, r2
 80030ba:	0019      	movs	r1, r3
 80030bc:	4b18      	ldr	r3, [pc, #96]	; (8003120 <HAL_RCC_ClockConfig+0x184>)
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c4:	4b16      	ldr	r3, [pc, #88]	; (8003120 <HAL_RCC_ClockConfig+0x184>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2201      	movs	r2, #1
 80030ca:	4013      	ands	r3, r2
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d001      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e020      	b.n	8003118 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2204      	movs	r2, #4
 80030dc:	4013      	ands	r3, r2
 80030de:	d009      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80030e0:	4b10      	ldr	r3, [pc, #64]	; (8003124 <HAL_RCC_ClockConfig+0x188>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	4a11      	ldr	r2, [pc, #68]	; (800312c <HAL_RCC_ClockConfig+0x190>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	0019      	movs	r1, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	4b0d      	ldr	r3, [pc, #52]	; (8003124 <HAL_RCC_ClockConfig+0x188>)
 80030f0:	430a      	orrs	r2, r1
 80030f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80030f4:	f000 f820 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 80030f8:	0001      	movs	r1, r0
 80030fa:	4b0a      	ldr	r3, [pc, #40]	; (8003124 <HAL_RCC_ClockConfig+0x188>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	091b      	lsrs	r3, r3, #4
 8003100:	220f      	movs	r2, #15
 8003102:	4013      	ands	r3, r2
 8003104:	4a0a      	ldr	r2, [pc, #40]	; (8003130 <HAL_RCC_ClockConfig+0x194>)
 8003106:	5cd3      	ldrb	r3, [r2, r3]
 8003108:	000a      	movs	r2, r1
 800310a:	40da      	lsrs	r2, r3
 800310c:	4b09      	ldr	r3, [pc, #36]	; (8003134 <HAL_RCC_ClockConfig+0x198>)
 800310e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003110:	2003      	movs	r0, #3
 8003112:	f7fe fe79 	bl	8001e08 <HAL_InitTick>
  
  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	0018      	movs	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	b004      	add	sp, #16
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40022000 	.word	0x40022000
 8003124:	40021000 	.word	0x40021000
 8003128:	00001388 	.word	0x00001388
 800312c:	fffff8ff 	.word	0xfffff8ff
 8003130:	08003430 	.word	0x08003430
 8003134:	20000000 	.word	0x20000000

08003138 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800313e:	2300      	movs	r3, #0
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	2300      	movs	r3, #0
 8003144:	60bb      	str	r3, [r7, #8]
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	2300      	movs	r3, #0
 800314c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800314e:	2300      	movs	r3, #0
 8003150:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003152:	4b21      	ldr	r3, [pc, #132]	; (80031d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	220c      	movs	r2, #12
 800315c:	4013      	ands	r3, r2
 800315e:	2b04      	cmp	r3, #4
 8003160:	d002      	beq.n	8003168 <HAL_RCC_GetSysClockFreq+0x30>
 8003162:	2b08      	cmp	r3, #8
 8003164:	d003      	beq.n	800316e <HAL_RCC_GetSysClockFreq+0x36>
 8003166:	e02e      	b.n	80031c6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003168:	4b1c      	ldr	r3, [pc, #112]	; (80031dc <HAL_RCC_GetSysClockFreq+0xa4>)
 800316a:	613b      	str	r3, [r7, #16]
      break;
 800316c:	e02e      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	0c9b      	lsrs	r3, r3, #18
 8003172:	220f      	movs	r2, #15
 8003174:	4013      	ands	r3, r2
 8003176:	4a1a      	ldr	r2, [pc, #104]	; (80031e0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003178:	5cd3      	ldrb	r3, [r2, r3]
 800317a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800317c:	4b16      	ldr	r3, [pc, #88]	; (80031d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	220f      	movs	r2, #15
 8003182:	4013      	ands	r3, r2
 8003184:	4a17      	ldr	r2, [pc, #92]	; (80031e4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003186:	5cd3      	ldrb	r3, [r2, r3]
 8003188:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	23c0      	movs	r3, #192	; 0xc0
 800318e:	025b      	lsls	r3, r3, #9
 8003190:	401a      	ands	r2, r3
 8003192:	2380      	movs	r3, #128	; 0x80
 8003194:	025b      	lsls	r3, r3, #9
 8003196:	429a      	cmp	r2, r3
 8003198:	d109      	bne.n	80031ae <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800319a:	68b9      	ldr	r1, [r7, #8]
 800319c:	480f      	ldr	r0, [pc, #60]	; (80031dc <HAL_RCC_GetSysClockFreq+0xa4>)
 800319e:	f7fc ffb3 	bl	8000108 <__udivsi3>
 80031a2:	0003      	movs	r3, r0
 80031a4:	001a      	movs	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4353      	muls	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031ae:	68b9      	ldr	r1, [r7, #8]
 80031b0:	480a      	ldr	r0, [pc, #40]	; (80031dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80031b2:	f7fc ffa9 	bl	8000108 <__udivsi3>
 80031b6:	0003      	movs	r3, r0
 80031b8:	001a      	movs	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4353      	muls	r3, r2
 80031be:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	613b      	str	r3, [r7, #16]
      break;
 80031c4:	e002      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031c6:	4b05      	ldr	r3, [pc, #20]	; (80031dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80031c8:	613b      	str	r3, [r7, #16]
      break;
 80031ca:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80031cc:	693b      	ldr	r3, [r7, #16]
}
 80031ce:	0018      	movs	r0, r3
 80031d0:	46bd      	mov	sp, r7
 80031d2:	b006      	add	sp, #24
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	40021000 	.word	0x40021000
 80031dc:	007a1200 	.word	0x007a1200
 80031e0:	08003440 	.word	0x08003440
 80031e4:	08003450 	.word	0x08003450

080031e8 <__errno>:
 80031e8:	4b01      	ldr	r3, [pc, #4]	; (80031f0 <__errno+0x8>)
 80031ea:	6818      	ldr	r0, [r3, #0]
 80031ec:	4770      	bx	lr
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	2000000c 	.word	0x2000000c

080031f4 <__libc_init_array>:
 80031f4:	b570      	push	{r4, r5, r6, lr}
 80031f6:	2600      	movs	r6, #0
 80031f8:	4d0c      	ldr	r5, [pc, #48]	; (800322c <__libc_init_array+0x38>)
 80031fa:	4c0d      	ldr	r4, [pc, #52]	; (8003230 <__libc_init_array+0x3c>)
 80031fc:	1b64      	subs	r4, r4, r5
 80031fe:	10a4      	asrs	r4, r4, #2
 8003200:	42a6      	cmp	r6, r4
 8003202:	d109      	bne.n	8003218 <__libc_init_array+0x24>
 8003204:	2600      	movs	r6, #0
 8003206:	f000 f8e7 	bl	80033d8 <_init>
 800320a:	4d0a      	ldr	r5, [pc, #40]	; (8003234 <__libc_init_array+0x40>)
 800320c:	4c0a      	ldr	r4, [pc, #40]	; (8003238 <__libc_init_array+0x44>)
 800320e:	1b64      	subs	r4, r4, r5
 8003210:	10a4      	asrs	r4, r4, #2
 8003212:	42a6      	cmp	r6, r4
 8003214:	d105      	bne.n	8003222 <__libc_init_array+0x2e>
 8003216:	bd70      	pop	{r4, r5, r6, pc}
 8003218:	00b3      	lsls	r3, r6, #2
 800321a:	58eb      	ldr	r3, [r5, r3]
 800321c:	4798      	blx	r3
 800321e:	3601      	adds	r6, #1
 8003220:	e7ee      	b.n	8003200 <__libc_init_array+0xc>
 8003222:	00b3      	lsls	r3, r6, #2
 8003224:	58eb      	ldr	r3, [r5, r3]
 8003226:	4798      	blx	r3
 8003228:	3601      	adds	r6, #1
 800322a:	e7f2      	b.n	8003212 <__libc_init_array+0x1e>
 800322c:	08003460 	.word	0x08003460
 8003230:	08003460 	.word	0x08003460
 8003234:	08003460 	.word	0x08003460
 8003238:	08003464 	.word	0x08003464

0800323c <malloc>:
 800323c:	b510      	push	{r4, lr}
 800323e:	4b03      	ldr	r3, [pc, #12]	; (800324c <malloc+0x10>)
 8003240:	0001      	movs	r1, r0
 8003242:	6818      	ldr	r0, [r3, #0]
 8003244:	f000 f82e 	bl	80032a4 <_malloc_r>
 8003248:	bd10      	pop	{r4, pc}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	2000000c 	.word	0x2000000c

08003250 <memset>:
 8003250:	0003      	movs	r3, r0
 8003252:	1882      	adds	r2, r0, r2
 8003254:	4293      	cmp	r3, r2
 8003256:	d100      	bne.n	800325a <memset+0xa>
 8003258:	4770      	bx	lr
 800325a:	7019      	strb	r1, [r3, #0]
 800325c:	3301      	adds	r3, #1
 800325e:	e7f9      	b.n	8003254 <memset+0x4>

08003260 <sbrk_aligned>:
 8003260:	b570      	push	{r4, r5, r6, lr}
 8003262:	4e0f      	ldr	r6, [pc, #60]	; (80032a0 <sbrk_aligned+0x40>)
 8003264:	000d      	movs	r5, r1
 8003266:	6831      	ldr	r1, [r6, #0]
 8003268:	0004      	movs	r4, r0
 800326a:	2900      	cmp	r1, #0
 800326c:	d102      	bne.n	8003274 <sbrk_aligned+0x14>
 800326e:	f000 f88f 	bl	8003390 <_sbrk_r>
 8003272:	6030      	str	r0, [r6, #0]
 8003274:	0029      	movs	r1, r5
 8003276:	0020      	movs	r0, r4
 8003278:	f000 f88a 	bl	8003390 <_sbrk_r>
 800327c:	1c43      	adds	r3, r0, #1
 800327e:	d00a      	beq.n	8003296 <sbrk_aligned+0x36>
 8003280:	2303      	movs	r3, #3
 8003282:	1cc5      	adds	r5, r0, #3
 8003284:	439d      	bics	r5, r3
 8003286:	42a8      	cmp	r0, r5
 8003288:	d007      	beq.n	800329a <sbrk_aligned+0x3a>
 800328a:	1a29      	subs	r1, r5, r0
 800328c:	0020      	movs	r0, r4
 800328e:	f000 f87f 	bl	8003390 <_sbrk_r>
 8003292:	1c43      	adds	r3, r0, #1
 8003294:	d101      	bne.n	800329a <sbrk_aligned+0x3a>
 8003296:	2501      	movs	r5, #1
 8003298:	426d      	negs	r5, r5
 800329a:	0028      	movs	r0, r5
 800329c:	bd70      	pop	{r4, r5, r6, pc}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	200000dc 	.word	0x200000dc

080032a4 <_malloc_r>:
 80032a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032a6:	2203      	movs	r2, #3
 80032a8:	1ccb      	adds	r3, r1, #3
 80032aa:	4393      	bics	r3, r2
 80032ac:	3308      	adds	r3, #8
 80032ae:	0006      	movs	r6, r0
 80032b0:	001f      	movs	r7, r3
 80032b2:	2b0c      	cmp	r3, #12
 80032b4:	d232      	bcs.n	800331c <_malloc_r+0x78>
 80032b6:	270c      	movs	r7, #12
 80032b8:	42b9      	cmp	r1, r7
 80032ba:	d831      	bhi.n	8003320 <_malloc_r+0x7c>
 80032bc:	0030      	movs	r0, r6
 80032be:	f000 f879 	bl	80033b4 <__malloc_lock>
 80032c2:	4d32      	ldr	r5, [pc, #200]	; (800338c <_malloc_r+0xe8>)
 80032c4:	682b      	ldr	r3, [r5, #0]
 80032c6:	001c      	movs	r4, r3
 80032c8:	2c00      	cmp	r4, #0
 80032ca:	d12e      	bne.n	800332a <_malloc_r+0x86>
 80032cc:	0039      	movs	r1, r7
 80032ce:	0030      	movs	r0, r6
 80032d0:	f7ff ffc6 	bl	8003260 <sbrk_aligned>
 80032d4:	0004      	movs	r4, r0
 80032d6:	1c43      	adds	r3, r0, #1
 80032d8:	d11e      	bne.n	8003318 <_malloc_r+0x74>
 80032da:	682c      	ldr	r4, [r5, #0]
 80032dc:	0025      	movs	r5, r4
 80032de:	2d00      	cmp	r5, #0
 80032e0:	d14a      	bne.n	8003378 <_malloc_r+0xd4>
 80032e2:	6823      	ldr	r3, [r4, #0]
 80032e4:	0029      	movs	r1, r5
 80032e6:	18e3      	adds	r3, r4, r3
 80032e8:	0030      	movs	r0, r6
 80032ea:	9301      	str	r3, [sp, #4]
 80032ec:	f000 f850 	bl	8003390 <_sbrk_r>
 80032f0:	9b01      	ldr	r3, [sp, #4]
 80032f2:	4283      	cmp	r3, r0
 80032f4:	d143      	bne.n	800337e <_malloc_r+0xda>
 80032f6:	6823      	ldr	r3, [r4, #0]
 80032f8:	3703      	adds	r7, #3
 80032fa:	1aff      	subs	r7, r7, r3
 80032fc:	2303      	movs	r3, #3
 80032fe:	439f      	bics	r7, r3
 8003300:	3708      	adds	r7, #8
 8003302:	2f0c      	cmp	r7, #12
 8003304:	d200      	bcs.n	8003308 <_malloc_r+0x64>
 8003306:	270c      	movs	r7, #12
 8003308:	0039      	movs	r1, r7
 800330a:	0030      	movs	r0, r6
 800330c:	f7ff ffa8 	bl	8003260 <sbrk_aligned>
 8003310:	1c43      	adds	r3, r0, #1
 8003312:	d034      	beq.n	800337e <_malloc_r+0xda>
 8003314:	6823      	ldr	r3, [r4, #0]
 8003316:	19df      	adds	r7, r3, r7
 8003318:	6027      	str	r7, [r4, #0]
 800331a:	e013      	b.n	8003344 <_malloc_r+0xa0>
 800331c:	2b00      	cmp	r3, #0
 800331e:	dacb      	bge.n	80032b8 <_malloc_r+0x14>
 8003320:	230c      	movs	r3, #12
 8003322:	2500      	movs	r5, #0
 8003324:	6033      	str	r3, [r6, #0]
 8003326:	0028      	movs	r0, r5
 8003328:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800332a:	6822      	ldr	r2, [r4, #0]
 800332c:	1bd1      	subs	r1, r2, r7
 800332e:	d420      	bmi.n	8003372 <_malloc_r+0xce>
 8003330:	290b      	cmp	r1, #11
 8003332:	d917      	bls.n	8003364 <_malloc_r+0xc0>
 8003334:	19e2      	adds	r2, r4, r7
 8003336:	6027      	str	r7, [r4, #0]
 8003338:	42a3      	cmp	r3, r4
 800333a:	d111      	bne.n	8003360 <_malloc_r+0xbc>
 800333c:	602a      	str	r2, [r5, #0]
 800333e:	6863      	ldr	r3, [r4, #4]
 8003340:	6011      	str	r1, [r2, #0]
 8003342:	6053      	str	r3, [r2, #4]
 8003344:	0030      	movs	r0, r6
 8003346:	0025      	movs	r5, r4
 8003348:	f000 f83c 	bl	80033c4 <__malloc_unlock>
 800334c:	2207      	movs	r2, #7
 800334e:	350b      	adds	r5, #11
 8003350:	1d23      	adds	r3, r4, #4
 8003352:	4395      	bics	r5, r2
 8003354:	1aea      	subs	r2, r5, r3
 8003356:	429d      	cmp	r5, r3
 8003358:	d0e5      	beq.n	8003326 <_malloc_r+0x82>
 800335a:	1b5b      	subs	r3, r3, r5
 800335c:	50a3      	str	r3, [r4, r2]
 800335e:	e7e2      	b.n	8003326 <_malloc_r+0x82>
 8003360:	605a      	str	r2, [r3, #4]
 8003362:	e7ec      	b.n	800333e <_malloc_r+0x9a>
 8003364:	6862      	ldr	r2, [r4, #4]
 8003366:	42a3      	cmp	r3, r4
 8003368:	d101      	bne.n	800336e <_malloc_r+0xca>
 800336a:	602a      	str	r2, [r5, #0]
 800336c:	e7ea      	b.n	8003344 <_malloc_r+0xa0>
 800336e:	605a      	str	r2, [r3, #4]
 8003370:	e7e8      	b.n	8003344 <_malloc_r+0xa0>
 8003372:	0023      	movs	r3, r4
 8003374:	6864      	ldr	r4, [r4, #4]
 8003376:	e7a7      	b.n	80032c8 <_malloc_r+0x24>
 8003378:	002c      	movs	r4, r5
 800337a:	686d      	ldr	r5, [r5, #4]
 800337c:	e7af      	b.n	80032de <_malloc_r+0x3a>
 800337e:	230c      	movs	r3, #12
 8003380:	0030      	movs	r0, r6
 8003382:	6033      	str	r3, [r6, #0]
 8003384:	f000 f81e 	bl	80033c4 <__malloc_unlock>
 8003388:	e7cd      	b.n	8003326 <_malloc_r+0x82>
 800338a:	46c0      	nop			; (mov r8, r8)
 800338c:	200000d8 	.word	0x200000d8

08003390 <_sbrk_r>:
 8003390:	2300      	movs	r3, #0
 8003392:	b570      	push	{r4, r5, r6, lr}
 8003394:	4d06      	ldr	r5, [pc, #24]	; (80033b0 <_sbrk_r+0x20>)
 8003396:	0004      	movs	r4, r0
 8003398:	0008      	movs	r0, r1
 800339a:	602b      	str	r3, [r5, #0]
 800339c:	f7fe fca2 	bl	8001ce4 <_sbrk>
 80033a0:	1c43      	adds	r3, r0, #1
 80033a2:	d103      	bne.n	80033ac <_sbrk_r+0x1c>
 80033a4:	682b      	ldr	r3, [r5, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d000      	beq.n	80033ac <_sbrk_r+0x1c>
 80033aa:	6023      	str	r3, [r4, #0]
 80033ac:	bd70      	pop	{r4, r5, r6, pc}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	200000e0 	.word	0x200000e0

080033b4 <__malloc_lock>:
 80033b4:	b510      	push	{r4, lr}
 80033b6:	4802      	ldr	r0, [pc, #8]	; (80033c0 <__malloc_lock+0xc>)
 80033b8:	f000 f80c 	bl	80033d4 <__retarget_lock_acquire_recursive>
 80033bc:	bd10      	pop	{r4, pc}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	200000e4 	.word	0x200000e4

080033c4 <__malloc_unlock>:
 80033c4:	b510      	push	{r4, lr}
 80033c6:	4802      	ldr	r0, [pc, #8]	; (80033d0 <__malloc_unlock+0xc>)
 80033c8:	f000 f805 	bl	80033d6 <__retarget_lock_release_recursive>
 80033cc:	bd10      	pop	{r4, pc}
 80033ce:	46c0      	nop			; (mov r8, r8)
 80033d0:	200000e4 	.word	0x200000e4

080033d4 <__retarget_lock_acquire_recursive>:
 80033d4:	4770      	bx	lr

080033d6 <__retarget_lock_release_recursive>:
 80033d6:	4770      	bx	lr

080033d8 <_init>:
 80033d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033de:	bc08      	pop	{r3}
 80033e0:	469e      	mov	lr, r3
 80033e2:	4770      	bx	lr

080033e4 <_fini>:
 80033e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ea:	bc08      	pop	{r3}
 80033ec:	469e      	mov	lr, r3
 80033ee:	4770      	bx	lr
